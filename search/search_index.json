{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"mcpp (Math for C Plus Plus) is cross platform , templated math library that can be used without compiling (except for the plotting functionality). It is targetted towards engineers and mathematicians . Used with a very simple and intuitive syntax inspired from Python libraries such as sympy , numpy , scipy and matplotlib . By only including mcpp.hpp file you get all the functions with their implementations into your code apart from the plotting functionality To use the plotting functionality you need to compile the library as the plotting functionality uses SFML and compiled as a shared library Unit testing is done using Google test Main targeted math sectors : Algebra Statistics Calculus Vectors Signal systems Tip When in doubt refer to doxygen documentation","title":"Overview"},{"location":"doxygen/Classes/","text":"Classes namespace alg Arithematic functions and solvers. struct ans namespace calc Contains differential and integral calculus functions. namespace lalg Contains functions related to matrices and linear algebra. namespace mth Generic mathematical functions. namespace sig All communication theory and signal processing functions. namespace stats Statistical functions. namespace var Namespace that contains all variable data types. struct QR Struct to contain the quartile range. class matrix Class for 2d matrix of objects. class Col Col class for another operator[]. struct LU Struct for PLU decomposition. class point class table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 class tree namespace vect Contains functions regarding vector operations and 1D array mathematics. Updated on 20 August 2022 at 21:24:15 EEST","title":"Classes"},{"location":"doxygen/Classes/#classes","text":"namespace alg Arithematic functions and solvers. struct ans namespace calc Contains differential and integral calculus functions. namespace lalg Contains functions related to matrices and linear algebra. namespace mth Generic mathematical functions. namespace sig All communication theory and signal processing functions. namespace stats Statistical functions. namespace var Namespace that contains all variable data types. struct QR Struct to contain the quartile range. class matrix Class for 2d matrix of objects. class Col Col class for another operator[]. struct LU Struct for PLU decomposition. class point class table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 class tree namespace vect Contains functions regarding vector operations and 1D array mathematics. Updated on 20 August 2022 at 21:24:15 EEST","title":"Classes"},{"location":"doxygen/Classes/classvar_1_1matrix/","text":"var::matrix Class for 2d matrix of objects. More... #include \"matrix.hpp\" Public Classes Name struct LU Struct for PLU decomposition. Protected Classes Name class Col Col class for another operator[]. Protected Types Name template <typename T > using std::vector< std::vector< T > > table 2D vector definition Public Functions Name matrix (int r, int c) Construct a new matrix object. matrix () Default construct a new matrix object. matrix (std::initializer_list< std::initializer_list< D >> a) Construct a new matrix object. int row () Returns the number of rows. int col () Returns the number of columns. int size () Returns total number of elements. auto begin () Mainly invoked for the ranged for loop. auto end () Returns end of data. auto begin () const Returns const begin. auto end () const Returns const end. D get_element (int i, int j) Get the element object. std::vector< D > get_row (int i) Returns the row at an index. std::vector< D > get_col (int j) Returns the column at an index. void resize (int r, int c) Resizes the matrix. void push_row (std::vector< D > a) Inserts row at the end or the matrix. void push_col (std::vector< D > a) Inserts column at the end of the matrix. void insert_row (int i, std::vector< D > a) Inserts row at specefic index. void insert_col (int j, std::vector< D > a) Inserts column at specefic index. void pop_row () Removes last row. void pop_col () removes last column void erase_row (int i) Erase row at index. void erase_col (int j) Erases column at index. void row_swap (int i1, int i2) Swaps row of matrix. void col_swap (int j1, int j2) Colum swap. void replace_row (int i, std::vector< D > a) Replaces certain row. void replace_col (int j, std::vector< D > a) Replaces certain colum. void sort_rows (int d =1) Sorts all rows. void sort_cols (int d =1) Sorts all columns. void sort_row (int i, int d =1) Sorts rows at specefic index. void sort_col (int j, int d =1) Sorts column at specefic index. template <typename LAMBDA > void row_op (int i, LAMBDA f) Does operations on specefic rows. template <typename LAMBDA > void col_op (int j, LAMBDA f) Does operations on a specefic column. template <typename LAMBDA > void mat_op (LAMBDA f) Function operation on all of the matrix. void join_row ( matrix other) Combines the rows of another matrix. void join_col ( matrix other) Combines the columns of another matrix. void turn_to (D n) Converts all elements to n. D sum () Sum of all elements. D tr () Trace of a matrix. D det () Returns the determinant. matrix T () Transpose of a matrix. matrix cofactor () Returns cofactor matrix. matrix M (int i, int j) Minor of a matrix. matrix adj () Adjugate of a matrix. matrix inv () Returns inverse of a matrix. matrix rref () Reduced row echolon form. matrix ref () Row echolon form. LU plu () PLU decomposition. bool is_square () Checks if matrix is square. bool is_empty () Returns if the matrix is empty or not. bool is_identity () Checks if matrix is an identity matrix. Col operator[] (int i) [][] operator for matrix matrix operator+ (const matrix & other) Matrix addition. matrix operator+ (D n) matrix+var as var as added to all elements void operator+= ( matrix a) Increments current matrix by matrix a void operator+= (D a) Specific variable increment. void operator++ (int a) Increment operator. matrix operator- () Negative of a matrix. matrix operator- (const matrix & other) Matrix subtraction. matrix operator- (D n) matrix-var void operator-= ( matrix a) Decrement current matrix by matrix a void operator-= (D a) Decrement current matrix by value a void operator-- (int a) Decrement operator. matrix operator* (const matrix & other) Matrix multiplication. matrix operator* (D n) matrix*var\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 matrix mathmul (const matrix & other) Normal multiplicatoin. matrix operator/ ( matrix & other) Matrix division using inverse. matrix operator/ (D n) matrix/var matrix mathdiv (const matrix & other) Normal math division. matrix operator() (int i1, int i2) Returns a sliced matrix. std::vector< D > operator() (int i, int j1, int j2) Column per row slicing. matrix operator() (int i1, int i2, int j1, int j2) Row and column slice. Protected Functions Name void check_col (int j) checks index for columns void check_row (int i) checks index for rows table < D > TT () Returns transpose for data. void check_size (int r, int c) Checks other matrix size for operators. matrix MM (int i, int j, matrix & other) Protected minor (used in DET ) D DET ( matrix a) Recursive determinant. void square () throws exception if matrix is not a square Friends Name matrix operator+ (D n, matrix & other) var+matrix matrix operator- (D n, matrix & other) var-matrix matrix operator* (D n, matrix & other) var*matrix\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 matrix operator/ (D n, matrix & other) var/matrix Detailed Description template < typename D > class var :: matrix ; Class for 2d matrix of objects. Template Parameters : D can be of any type Protected Types Documentation using table template < typename T > using var :: matrix < D >:: table = std :: vector < std :: vector < T > > ; 2D vector definition Template Parameters : T Public Functions Documentation function matrix inline matrix ( int r , int c ) Construct a new matrix object. Parameters : r number of rows c number of colums Usage : var :: matrix < int > m ( 2 , 3 ); // 2 rows, 3 colums function matrix inline matrix () Default construct a new matrix object. Usage : var :: matrix < int > m ; function matrix inline matrix ( std :: initializer_list < std :: initializer_list < D >> a ) Construct a new matrix object. Usage : var :: matrix < int > m = { { 1 , 2 , 3 }, { 4 , 5 , 6 }, { 7 , 8 , 9 } }; Getters ainitializer list function row inline int row () Returns the number of rows. Return : int Usage : var :: matrix < int > m ( 2 , 3 ); int r = m . row (); function col inline int col () Returns the number of columns. Return : int function size inline int size () Returns total number of elements. Return : int function begin inline auto begin () Mainly invoked for the ranged for loop. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : for ( auto i : m ){ for ( j : i ){ // do smth } } function end inline auto end () Returns end of data. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function begin inline auto begin () const Returns const begin. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function end inline auto end () const Returns const end. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_element inline D get_element ( int i , int j ) Get the element object. Parameters : i row index j column index Return : D Unlike the [] operator this does index checking function get_row inline std :: vector < D > get_row ( int i ) Returns the row at an index. Parameters : i row index Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : var :: matrix < int > m ( 3 , 3 ); auto col = m . get_col ( 1 ); function get_col inline std :: vector < D > get_col ( int j ) Returns the column at an index. Parameters : j column index Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Mutable methods function resize inline void resize ( int r , int c ) Resizes the matrix. Parameters : r number of rows c number of colums Usage : m . resize ( 3 , 3 ); Warning This resets all elements in the matrix function push_row inline void push_row ( std :: vector < D > a ) Inserts row at the end or the matrix. Parameters : a row vector Usage : m . push_row ({ 1 , 2 , 3 }); function push_col inline void push_col ( std :: vector < D > a ) Inserts column at the end of the matrix. Parameters : a column vector function insert_row inline void insert_row ( int i , std :: vector < D > a ) Inserts row at specefic index. Parameters : i row index a row vector Usage : m . insert_row ( 1 , { 1 , 2 , 3 }); function insert_col inline void insert_col ( int j , std :: vector < D > a ) Inserts column at specefic index. Parameters : j column index a column vector function pop_row inline void pop_row () Removes last row. Usage : m . pop_row ( 1 ); function pop_col inline void pop_col () removes last column function erase_row inline void erase_row ( int i ) Erase row at index. Parameters : i row index Usage : m . erase_row ( 1 ); function erase_col inline void erase_col ( int j ) Erases column at index. Parameters : j column index function row_swap inline void row_swap ( int i1 , int i2 ) Swaps row of matrix. Parameters : i1 first row i2 second row Usage : m . row_swap ( 0 , 1 ); // swaps row 0 with row 1 function col_swap inline void col_swap ( int j1 , int j2 ) Colum swap. Parameters : j1 first column j2 second column function replace_row inline void replace_row ( int i , std :: vector < D > a ) Replaces certain row. Parameters : i row index a std::vector function replace_col inline void replace_col ( int j , std :: vector < D > a ) Replaces certain colum. Parameters : j column index a std::vector function sort_rows inline void sort_rows ( int d = 1 ) Sorts all rows. Parameters : d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : m . sort_rows (); function sort_cols inline void sort_cols ( int d = 1 ) Sorts all columns. Parameters : d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function sort_row inline void sort_row ( int i , int d = 1 ) Sorts rows at specefic index. Parameters : i row index d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : m . sort_row ( 0 , 0 ); function sort_col inline void sort_col ( int j , int d = 1 ) Sorts column at specefic index. Parameters : j column index d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function row_op template < typename LAMBDA > inline void row_op ( int i , LAMBDA f ) Does operations on specefic rows. Parameters : i column index f function to change column elements Template Parameters : LAMBDA std::function Usage : auto f = []( int A ){ return A * 2 + 3 ;}; m . row_op ( 1 , f ); function col_op template < typename LAMBDA > inline void col_op ( int j , LAMBDA f ) Does operations on a specefic column. Parameters : j column index f function to change column elements Template Parameters : LAMBDA std::function Exception All row and column operations (inserting, removing .. etc) throw an std::invalid_argument\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 if: 1. There is a size mismatch 2. Invalid index function mat_op template < typename LAMBDA > inline void mat_op ( LAMBDA f ) Function operation on all of the matrix. Parameters : f Function Template Parameters : LAMBDA std::function Usage : auto f = []( int A ){ return A * 2 + 3 ;}; m . mat_op ( f ); function join_row inline void join_row ( matrix other ) Combines the rows of another matrix. Parameters : other matrix Usage : // m2 must have same number of columns as m1 m1 . join_row ( m2 ); function join_col inline void join_col ( matrix other ) Combines the columns of another matrix. Parameters : other matrix other must have same number of rows function turn_to inline void turn_to ( D n ) Converts all elements to n. Parameters : n the specifeid variable Usage : m . turn_to ( 1 ); Immutable methods function sum inline D sum () Sum of all elements. Return : D Usage : auto sum = m . sum (); function tr inline D tr () Trace of a matrix. Return : D function det inline D det () Returns the determinant. Return : D function T inline matrix T () Transpose of a matrix. Return : matrix Usage : var :: matrix < int > m ( 3 , 3 ); auto T = m . T (); function cofactor inline matrix cofactor () Returns cofactor matrix. Return : matrix function M inline matrix M ( int i , int j ) Minor of a matrix. Parameters : i row index j column index Return : matrix function adj inline matrix adj () Adjugate of a matrix. Return : matrix function inv inline matrix inv () Returns inverse of a matrix. Return : matrix function rref inline matrix rref () Reduced row echolon form. Return : matrix function ref inline matrix ref () Row echolon form. Return : matrix function plu inline LU plu () PLU decomposition. Return : LU Usage : // the output is LU struct auto LU = m . plu (); auto L = LU . L ; auto U = LU . U ; auto P = LU . p ; function is_square inline bool is_square () Checks if matrix is square. Return : true false Usage : bool square = m . is_square (); function is_empty inline bool is_empty () Returns if the matrix is empty or not. Return : true false function is_identity inline bool is_identity () Checks if matrix is an identity matrix. Return : true false Operator methods function operator[] inline Col operator []( int i ) [][] operator for matrix Parameters : i row index Return : Col which then returns &D Usage : // m[row][col] m [ 0 ][ 0 ] = 5 ; Does not check the correct row and colum index; function operator+ inline matrix operator + ( const matrix & other ) Matrix addition. Parameters : other Return : matrix Usage : // m1 and m2 are matrix class auto summed = m1 + m2 ; function operator+ inline matrix operator + ( D n ) matrix+var as var as added to all elements Parameters : n variable to add Return : matrix Usage : auto m_add_2 = m + 2 ; // or 2+m function operator+= inline void operator += ( matrix a ) Increments current matrix by matrix a Parameters : a matrix Usage : m1 += m2 ; // m1,m2 -> matrix function operator+= inline void operator += ( D a ) Specific variable increment. Parameters : a increments each value by a Usage : m += 2 ; // increments every element by 2 function operator++ inline void operator ++ ( int a ) Increment operator. Parameters : a Usage : m ++ ; all values will be increased by 1 function operator- inline matrix operator - () Negative of a matrix. Return : matrix Usage : auto negated = - m ; function operator- inline matrix operator - ( const matrix & other ) Matrix subtraction. Parameters : other matrix Return : matrix Usage : auto subtracted = m1 - m2 ; function operator- inline matrix operator - ( D n ) matrix-var Parameters : n variable to add Return : matrix Usage : auto m_take_2 = m -2 ; // or 2-m function operator-= inline void operator -= ( matrix a ) Decrement current matrix by matrix a Parameters : a matrix Usage : m1 -= m2 ; function operator-= inline void operator -= ( D a ) Decrement current matrix by value a Parameters : a Decrements each value by a Usage : m -= 2 ; // subtracts each element by 2 function operator-- inline void operator -- ( int a ) Decrement operator. Parameters : a Usage : m -- ; // deacreses every value of m by 1 function operator* inline matrix operator * ( const matrix & other ) Matrix multiplication. Parameters : other matrix Return : matrix Usage : auto matrix_mul = m * m ; function operator* inline matrix operator * ( D n ) matrix*var\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Parameters : n variable multiplying with Return : matrix Usage : auto m_by_2 = m * 2 ; // or 2*m function mathmul inline matrix mathmul ( const matrix & other ) Normal multiplicatoin. Parameters : other matrix Return : matrix Usage : auto mul_m = m1 . mathmul ( m2 ); function operator/ inline matrix operator / ( matrix & other ) Matrix division using inverse. Parameters : other matrix Return : matrix function operator/ inline matrix operator / ( D n ) matrix/var Parameters : n our variable Return : matrix Usage : auto m_over_2 = m / 2 ; // 2/m can work function mathdiv inline matrix mathdiv ( const matrix & other ) Normal math division. Parameters : other matrix Return : matrix Usage : auto divided = m1 . mathdiv ( m2 ); function operator() inline matrix operator ()( int i1 , int i2 ) Returns a sliced matrix. Parameters : i1 index row 1 (inclusive) i2 index row 2 (exclusive) Return : matrix Usage : // m(inclusive, exclusive) auto sliced = m ( 1 , 3 ); // row-1 to row-2 function operator() inline std :: vector < D > operator ()( int i , int j1 , int j2 ) Column per row slicing. Parameters : i row index j1 column index 1 (inclusive) j2 column index 2 (exclusive) Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Condition j2 >= j1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 must be true. function operator() inline matrix operator ()( int i1 , int i2 , int j1 , int j2 ) Row and column slice. Parameters : i1 row index 1 (inclusive) i2 row index 2 (exclusive) j1 column index 1 (inclusive) j2 column index 2 (exclusive) Return : matrix Exception All () operators will throw an std::invalid_argument\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 unless: Index is correct and valid \\(i_2 \\geq i_1\\) and \\(j_2 \\geq j_1\\) Protected Functions Documentation function check_col inline void check_col ( int j ) checks index for columns Parameters : j column index function check_row inline void check_row ( int i ) checks index for rows Parameters : i row index function TT inline table < D > TT () Returns transpose for data. Return : table<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function check_size inline void check_size ( int r , int c ) Checks other matrix size for operators. Parameters : r row c column function MM inline matrix MM ( int i , int j , matrix & other ) Protected minor (used in DET ) Parameters : i row index j column index other matrix Return : matrix function DET inline D DET ( matrix a ) Recursive determinant. Parameters : a matrix type Return : D function square inline void square () throws exception if matrix is not a square Friends friend operator+ friend matrix operator + ( D n , matrix & other ); var+matrix Parameters : n variable to add other matrix Return : matrix friend operator- friend matrix operator - ( D n , matrix & other ); var-matrix Parameters : n variable to add other matrix Return : matrix friend operator* friend matrix operator * ( D n , matrix & other ); var*matrix\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Parameters : n variable multiplying with other matrix Return : matrix friend operator/ friend matrix operator / ( D n , matrix & other ); var/matrix Parameters : n our variable other matrix Return : matrix Updated on 20 August 2022 at 21:24:15 EEST","title":"Matrix"},{"location":"doxygen/Classes/classvar_1_1matrix/#varmatrix","text":"Class for 2d matrix of objects. More... #include \"matrix.hpp\"","title":"var::matrix"},{"location":"doxygen/Classes/classvar_1_1matrix/#public-classes","text":"Name struct LU Struct for PLU decomposition.","title":"Public Classes"},{"location":"doxygen/Classes/classvar_1_1matrix/#protected-classes","text":"Name class Col Col class for another operator[].","title":"Protected Classes"},{"location":"doxygen/Classes/classvar_1_1matrix/#protected-types","text":"Name template <typename T > using std::vector< std::vector< T > > table 2D vector definition","title":"Protected Types"},{"location":"doxygen/Classes/classvar_1_1matrix/#public-functions","text":"Name matrix (int r, int c) Construct a new matrix object. matrix () Default construct a new matrix object. matrix (std::initializer_list< std::initializer_list< D >> a) Construct a new matrix object. int row () Returns the number of rows. int col () Returns the number of columns. int size () Returns total number of elements. auto begin () Mainly invoked for the ranged for loop. auto end () Returns end of data. auto begin () const Returns const begin. auto end () const Returns const end. D get_element (int i, int j) Get the element object. std::vector< D > get_row (int i) Returns the row at an index. std::vector< D > get_col (int j) Returns the column at an index. void resize (int r, int c) Resizes the matrix. void push_row (std::vector< D > a) Inserts row at the end or the matrix. void push_col (std::vector< D > a) Inserts column at the end of the matrix. void insert_row (int i, std::vector< D > a) Inserts row at specefic index. void insert_col (int j, std::vector< D > a) Inserts column at specefic index. void pop_row () Removes last row. void pop_col () removes last column void erase_row (int i) Erase row at index. void erase_col (int j) Erases column at index. void row_swap (int i1, int i2) Swaps row of matrix. void col_swap (int j1, int j2) Colum swap. void replace_row (int i, std::vector< D > a) Replaces certain row. void replace_col (int j, std::vector< D > a) Replaces certain colum. void sort_rows (int d =1) Sorts all rows. void sort_cols (int d =1) Sorts all columns. void sort_row (int i, int d =1) Sorts rows at specefic index. void sort_col (int j, int d =1) Sorts column at specefic index. template <typename LAMBDA > void row_op (int i, LAMBDA f) Does operations on specefic rows. template <typename LAMBDA > void col_op (int j, LAMBDA f) Does operations on a specefic column. template <typename LAMBDA > void mat_op (LAMBDA f) Function operation on all of the matrix. void join_row ( matrix other) Combines the rows of another matrix. void join_col ( matrix other) Combines the columns of another matrix. void turn_to (D n) Converts all elements to n. D sum () Sum of all elements. D tr () Trace of a matrix. D det () Returns the determinant. matrix T () Transpose of a matrix. matrix cofactor () Returns cofactor matrix. matrix M (int i, int j) Minor of a matrix. matrix adj () Adjugate of a matrix. matrix inv () Returns inverse of a matrix. matrix rref () Reduced row echolon form. matrix ref () Row echolon form. LU plu () PLU decomposition. bool is_square () Checks if matrix is square. bool is_empty () Returns if the matrix is empty or not. bool is_identity () Checks if matrix is an identity matrix. Col operator[] (int i) [][] operator for matrix matrix operator+ (const matrix & other) Matrix addition. matrix operator+ (D n) matrix+var as var as added to all elements void operator+= ( matrix a) Increments current matrix by matrix a void operator+= (D a) Specific variable increment. void operator++ (int a) Increment operator. matrix operator- () Negative of a matrix. matrix operator- (const matrix & other) Matrix subtraction. matrix operator- (D n) matrix-var void operator-= ( matrix a) Decrement current matrix by matrix a void operator-= (D a) Decrement current matrix by value a void operator-- (int a) Decrement operator. matrix operator* (const matrix & other) Matrix multiplication. matrix operator* (D n) matrix*var\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 matrix mathmul (const matrix & other) Normal multiplicatoin. matrix operator/ ( matrix & other) Matrix division using inverse. matrix operator/ (D n) matrix/var matrix mathdiv (const matrix & other) Normal math division. matrix operator() (int i1, int i2) Returns a sliced matrix. std::vector< D > operator() (int i, int j1, int j2) Column per row slicing. matrix operator() (int i1, int i2, int j1, int j2) Row and column slice.","title":"Public Functions"},{"location":"doxygen/Classes/classvar_1_1matrix/#protected-functions","text":"Name void check_col (int j) checks index for columns void check_row (int i) checks index for rows table < D > TT () Returns transpose for data. void check_size (int r, int c) Checks other matrix size for operators. matrix MM (int i, int j, matrix & other) Protected minor (used in DET ) D DET ( matrix a) Recursive determinant. void square () throws exception if matrix is not a square","title":"Protected Functions"},{"location":"doxygen/Classes/classvar_1_1matrix/#friends","text":"Name matrix operator+ (D n, matrix & other) var+matrix matrix operator- (D n, matrix & other) var-matrix matrix operator* (D n, matrix & other) var*matrix\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 matrix operator/ (D n, matrix & other) var/matrix","title":"Friends"},{"location":"doxygen/Classes/classvar_1_1matrix/#detailed-description","text":"template < typename D > class var :: matrix ; Class for 2d matrix of objects. Template Parameters : D can be of any type","title":"Detailed Description"},{"location":"doxygen/Classes/classvar_1_1matrix/#protected-types-documentation","text":"","title":"Protected Types Documentation"},{"location":"doxygen/Classes/classvar_1_1matrix/#using-table","text":"template < typename T > using var :: matrix < D >:: table = std :: vector < std :: vector < T > > ; 2D vector definition Template Parameters : T","title":"using table"},{"location":"doxygen/Classes/classvar_1_1matrix/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-matrix","text":"inline matrix ( int r , int c ) Construct a new matrix object. Parameters : r number of rows c number of colums Usage : var :: matrix < int > m ( 2 , 3 ); // 2 rows, 3 colums","title":"function matrix"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-matrix_1","text":"inline matrix () Default construct a new matrix object. Usage : var :: matrix < int > m ;","title":"function matrix"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-matrix_2","text":"inline matrix ( std :: initializer_list < std :: initializer_list < D >> a ) Construct a new matrix object. Usage : var :: matrix < int > m = { { 1 , 2 , 3 }, { 4 , 5 , 6 }, { 7 , 8 , 9 } };","title":"function matrix"},{"location":"doxygen/Classes/classvar_1_1matrix/#getters","text":"ainitializer list","title":"Getters"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-row","text":"inline int row () Returns the number of rows. Return : int Usage : var :: matrix < int > m ( 2 , 3 ); int r = m . row ();","title":"function row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-col","text":"inline int col () Returns the number of columns. Return : int","title":"function col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-size","text":"inline int size () Returns total number of elements. Return : int","title":"function size"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-begin","text":"inline auto begin () Mainly invoked for the ranged for loop. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : for ( auto i : m ){ for ( j : i ){ // do smth } }","title":"function begin"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-end","text":"inline auto end () Returns end of data. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function end"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-begin_1","text":"inline auto begin () const Returns const begin. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function begin"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-end_1","text":"inline auto end () const Returns const end. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function end"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-get_element","text":"inline D get_element ( int i , int j ) Get the element object. Parameters : i row index j column index Return : D Unlike the [] operator this does index checking","title":"function get_element"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-get_row","text":"inline std :: vector < D > get_row ( int i ) Returns the row at an index. Parameters : i row index Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : var :: matrix < int > m ( 3 , 3 ); auto col = m . get_col ( 1 );","title":"function get_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-get_col","text":"inline std :: vector < D > get_col ( int j ) Returns the column at an index. Parameters : j column index Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#mutable-methods","text":"","title":"Mutable methods"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-resize","text":"inline void resize ( int r , int c ) Resizes the matrix. Parameters : r number of rows c number of colums Usage : m . resize ( 3 , 3 ); Warning This resets all elements in the matrix","title":"function resize"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-push_row","text":"inline void push_row ( std :: vector < D > a ) Inserts row at the end or the matrix. Parameters : a row vector Usage : m . push_row ({ 1 , 2 , 3 });","title":"function push_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-push_col","text":"inline void push_col ( std :: vector < D > a ) Inserts column at the end of the matrix. Parameters : a column vector","title":"function push_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-insert_row","text":"inline void insert_row ( int i , std :: vector < D > a ) Inserts row at specefic index. Parameters : i row index a row vector Usage : m . insert_row ( 1 , { 1 , 2 , 3 });","title":"function insert_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-insert_col","text":"inline void insert_col ( int j , std :: vector < D > a ) Inserts column at specefic index. Parameters : j column index a column vector","title":"function insert_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-pop_row","text":"inline void pop_row () Removes last row. Usage : m . pop_row ( 1 );","title":"function pop_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-pop_col","text":"inline void pop_col () removes last column","title":"function pop_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-erase_row","text":"inline void erase_row ( int i ) Erase row at index. Parameters : i row index Usage : m . erase_row ( 1 );","title":"function erase_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-erase_col","text":"inline void erase_col ( int j ) Erases column at index. Parameters : j column index","title":"function erase_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-row_swap","text":"inline void row_swap ( int i1 , int i2 ) Swaps row of matrix. Parameters : i1 first row i2 second row Usage : m . row_swap ( 0 , 1 ); // swaps row 0 with row 1","title":"function row_swap"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-col_swap","text":"inline void col_swap ( int j1 , int j2 ) Colum swap. Parameters : j1 first column j2 second column","title":"function col_swap"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-replace_row","text":"inline void replace_row ( int i , std :: vector < D > a ) Replaces certain row. Parameters : i row index a std::vector","title":"function replace_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-replace_col","text":"inline void replace_col ( int j , std :: vector < D > a ) Replaces certain colum. Parameters : j column index a std::vector","title":"function replace_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-sort_rows","text":"inline void sort_rows ( int d = 1 ) Sorts all rows. Parameters : d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : m . sort_rows ();","title":"function sort_rows"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-sort_cols","text":"inline void sort_cols ( int d = 1 ) Sorts all columns. Parameters : d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function sort_cols"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-sort_row","text":"inline void sort_row ( int i , int d = 1 ) Sorts rows at specefic index. Parameters : i row index d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Usage : m . sort_row ( 0 , 0 );","title":"function sort_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-sort_col","text":"inline void sort_col ( int j , int d = 1 ) Sorts column at specefic index. Parameters : j column index d details are shown below d = 1 is accending order \\(\\rightarrow\\) sort_rows();\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 d = 0 is decending order \\(\\rightarrow\\) sort_rows(0);\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function sort_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-row_op","text":"template < typename LAMBDA > inline void row_op ( int i , LAMBDA f ) Does operations on specefic rows. Parameters : i column index f function to change column elements Template Parameters : LAMBDA std::function Usage : auto f = []( int A ){ return A * 2 + 3 ;}; m . row_op ( 1 , f );","title":"function row_op"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-col_op","text":"template < typename LAMBDA > inline void col_op ( int j , LAMBDA f ) Does operations on a specefic column. Parameters : j column index f function to change column elements Template Parameters : LAMBDA std::function Exception All row and column operations (inserting, removing .. etc) throw an std::invalid_argument\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 if: 1. There is a size mismatch 2. Invalid index","title":"function col_op"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-mat_op","text":"template < typename LAMBDA > inline void mat_op ( LAMBDA f ) Function operation on all of the matrix. Parameters : f Function Template Parameters : LAMBDA std::function Usage : auto f = []( int A ){ return A * 2 + 3 ;}; m . mat_op ( f );","title":"function mat_op"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-join_row","text":"inline void join_row ( matrix other ) Combines the rows of another matrix. Parameters : other matrix Usage : // m2 must have same number of columns as m1 m1 . join_row ( m2 );","title":"function join_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-join_col","text":"inline void join_col ( matrix other ) Combines the columns of another matrix. Parameters : other matrix other must have same number of rows","title":"function join_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-turn_to","text":"inline void turn_to ( D n ) Converts all elements to n. Parameters : n the specifeid variable Usage : m . turn_to ( 1 );","title":"function turn_to"},{"location":"doxygen/Classes/classvar_1_1matrix/#immutable-methods","text":"","title":"Immutable methods"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-sum","text":"inline D sum () Sum of all elements. Return : D Usage : auto sum = m . sum ();","title":"function sum"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-tr","text":"inline D tr () Trace of a matrix. Return : D","title":"function tr"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-det","text":"inline D det () Returns the determinant. Return : D","title":"function det"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-t","text":"inline matrix T () Transpose of a matrix. Return : matrix Usage : var :: matrix < int > m ( 3 , 3 ); auto T = m . T ();","title":"function T"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-cofactor","text":"inline matrix cofactor () Returns cofactor matrix. Return : matrix","title":"function cofactor"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-m","text":"inline matrix M ( int i , int j ) Minor of a matrix. Parameters : i row index j column index Return : matrix","title":"function M"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-adj","text":"inline matrix adj () Adjugate of a matrix. Return : matrix","title":"function adj"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-inv","text":"inline matrix inv () Returns inverse of a matrix. Return : matrix","title":"function inv"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-rref","text":"inline matrix rref () Reduced row echolon form. Return : matrix","title":"function rref"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-ref","text":"inline matrix ref () Row echolon form. Return : matrix","title":"function ref"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-plu","text":"inline LU plu () PLU decomposition. Return : LU Usage : // the output is LU struct auto LU = m . plu (); auto L = LU . L ; auto U = LU . U ; auto P = LU . p ;","title":"function plu"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-is_square","text":"inline bool is_square () Checks if matrix is square. Return : true false Usage : bool square = m . is_square ();","title":"function is_square"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-is_empty","text":"inline bool is_empty () Returns if the matrix is empty or not. Return : true false","title":"function is_empty"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-is_identity","text":"inline bool is_identity () Checks if matrix is an identity matrix. Return : true false","title":"function is_identity"},{"location":"doxygen/Classes/classvar_1_1matrix/#operator-methods","text":"","title":"Operator methods"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator","text":"inline Col operator []( int i ) [][] operator for matrix Parameters : i row index Return : Col which then returns &D Usage : // m[row][col] m [ 0 ][ 0 ] = 5 ; Does not check the correct row and colum index;","title":"function operator[]"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_1","text":"inline matrix operator + ( const matrix & other ) Matrix addition. Parameters : other Return : matrix Usage : // m1 and m2 are matrix class auto summed = m1 + m2 ;","title":"function operator+"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_2","text":"inline matrix operator + ( D n ) matrix+var as var as added to all elements Parameters : n variable to add Return : matrix Usage : auto m_add_2 = m + 2 ; // or 2+m","title":"function operator+"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_3","text":"inline void operator += ( matrix a ) Increments current matrix by matrix a Parameters : a matrix Usage : m1 += m2 ; // m1,m2 -> matrix","title":"function operator+="},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_4","text":"inline void operator += ( D a ) Specific variable increment. Parameters : a increments each value by a Usage : m += 2 ; // increments every element by 2","title":"function operator+="},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_5","text":"inline void operator ++ ( int a ) Increment operator. Parameters : a Usage : m ++ ; all values will be increased by 1","title":"function operator++"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator-","text":"inline matrix operator - () Negative of a matrix. Return : matrix Usage : auto negated = - m ;","title":"function operator-"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator-_1","text":"inline matrix operator - ( const matrix & other ) Matrix subtraction. Parameters : other matrix Return : matrix Usage : auto subtracted = m1 - m2 ;","title":"function operator-"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator-_2","text":"inline matrix operator - ( D n ) matrix-var Parameters : n variable to add Return : matrix Usage : auto m_take_2 = m -2 ; // or 2-m","title":"function operator-"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator-_3","text":"inline void operator -= ( matrix a ) Decrement current matrix by matrix a Parameters : a matrix Usage : m1 -= m2 ;","title":"function operator-="},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator-_4","text":"inline void operator -= ( D a ) Decrement current matrix by value a Parameters : a Decrements each value by a Usage : m -= 2 ; // subtracts each element by 2","title":"function operator-="},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator-_5","text":"inline void operator -- ( int a ) Decrement operator. Parameters : a Usage : m -- ; // deacreses every value of m by 1","title":"function operator--"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_6","text":"inline matrix operator * ( const matrix & other ) Matrix multiplication. Parameters : other matrix Return : matrix Usage : auto matrix_mul = m * m ;","title":"function operator*"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_7","text":"inline matrix operator * ( D n ) matrix*var\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Parameters : n variable multiplying with Return : matrix Usage : auto m_by_2 = m * 2 ; // or 2*m","title":"function operator*"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-mathmul","text":"inline matrix mathmul ( const matrix & other ) Normal multiplicatoin. Parameters : other matrix Return : matrix Usage : auto mul_m = m1 . mathmul ( m2 );","title":"function mathmul"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_8","text":"inline matrix operator / ( matrix & other ) Matrix division using inverse. Parameters : other matrix Return : matrix","title":"function operator/"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_9","text":"inline matrix operator / ( D n ) matrix/var Parameters : n our variable Return : matrix Usage : auto m_over_2 = m / 2 ; // 2/m can work","title":"function operator/"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-mathdiv","text":"inline matrix mathdiv ( const matrix & other ) Normal math division. Parameters : other matrix Return : matrix Usage : auto divided = m1 . mathdiv ( m2 );","title":"function mathdiv"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_10","text":"inline matrix operator ()( int i1 , int i2 ) Returns a sliced matrix. Parameters : i1 index row 1 (inclusive) i2 index row 2 (exclusive) Return : matrix Usage : // m(inclusive, exclusive) auto sliced = m ( 1 , 3 ); // row-1 to row-2","title":"function operator()"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_11","text":"inline std :: vector < D > operator ()( int i , int j1 , int j2 ) Column per row slicing. Parameters : i row index j1 column index 1 (inclusive) j2 column index 2 (exclusive) Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Condition j2 >= j1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 must be true.","title":"function operator()"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-operator_12","text":"inline matrix operator ()( int i1 , int i2 , int j1 , int j2 ) Row and column slice. Parameters : i1 row index 1 (inclusive) i2 row index 2 (exclusive) j1 column index 1 (inclusive) j2 column index 2 (exclusive) Return : matrix Exception All () operators will throw an std::invalid_argument\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 unless: Index is correct and valid \\(i_2 \\geq i_1\\) and \\(j_2 \\geq j_1\\)","title":"function operator()"},{"location":"doxygen/Classes/classvar_1_1matrix/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-check_col","text":"inline void check_col ( int j ) checks index for columns Parameters : j column index","title":"function check_col"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-check_row","text":"inline void check_row ( int i ) checks index for rows Parameters : i row index","title":"function check_row"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-tt","text":"inline table < D > TT () Returns transpose for data. Return : table<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function TT"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-check_size","text":"inline void check_size ( int r , int c ) Checks other matrix size for operators. Parameters : r row c column","title":"function check_size"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-mm","text":"inline matrix MM ( int i , int j , matrix & other ) Protected minor (used in DET ) Parameters : i row index j column index other matrix Return : matrix","title":"function MM"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-det_1","text":"inline D DET ( matrix a ) Recursive determinant. Parameters : a matrix type Return : D","title":"function DET"},{"location":"doxygen/Classes/classvar_1_1matrix/#function-square","text":"inline void square () throws exception if matrix is not a square","title":"function square"},{"location":"doxygen/Classes/classvar_1_1matrix/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classvar_1_1matrix/#friend-operator","text":"friend matrix operator + ( D n , matrix & other ); var+matrix Parameters : n variable to add other matrix Return : matrix","title":"friend operator+"},{"location":"doxygen/Classes/classvar_1_1matrix/#friend-operator-","text":"friend matrix operator - ( D n , matrix & other ); var-matrix Parameters : n variable to add other matrix Return : matrix","title":"friend operator-"},{"location":"doxygen/Classes/classvar_1_1matrix/#friend-operator_1","text":"friend matrix operator * ( D n , matrix & other ); var*matrix\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Parameters : n variable multiplying with other matrix Return : matrix","title":"friend operator*"},{"location":"doxygen/Classes/classvar_1_1matrix/#friend-operator_2","text":"friend matrix operator / ( D n , matrix & other ); var/matrix Parameters : n our variable other matrix Return : matrix Updated on 20 August 2022 at 21:24:15 EEST","title":"friend operator/"},{"location":"doxygen/Classes/classvar_1_1matrix_1_1Col/","text":"var::matrix::Col Col class for another operator[]. #include \"matrix.hpp\" Public Functions Name Col ( matrix & a, int i) Construct a new Col object. D & operator[] (int j) [] operator for col Public Functions Documentation function Col inline Col ( matrix & a , int i ) Construct a new Col object. Parameters : a i function operator[] inline D & operator []( int j ) [] operator for col Parameters : j Return : D& Updated on 20 August 2022 at 21:24:15 EEST","title":"var::matrix::Col"},{"location":"doxygen/Classes/classvar_1_1matrix_1_1Col/#varmatrixcol","text":"Col class for another operator[]. #include \"matrix.hpp\"","title":"var::matrix::Col"},{"location":"doxygen/Classes/classvar_1_1matrix_1_1Col/#public-functions","text":"Name Col ( matrix & a, int i) Construct a new Col object. D & operator[] (int j) [] operator for col","title":"Public Functions"},{"location":"doxygen/Classes/classvar_1_1matrix_1_1Col/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classvar_1_1matrix_1_1Col/#function-col","text":"inline Col ( matrix & a , int i ) Construct a new Col object. Parameters : a i","title":"function Col"},{"location":"doxygen/Classes/classvar_1_1matrix_1_1Col/#function-operator","text":"inline D & operator []( int j ) [] operator for col Parameters : j Return : D& Updated on 20 August 2022 at 21:24:15 EEST","title":"function operator[]"},{"location":"doxygen/Classes/classvar_1_1point/","text":"var::point More... Detailed Description template < typename D > class var :: point ; Updated on 20 August 2022 at 21:24:15 EEST","title":"var::point"},{"location":"doxygen/Classes/classvar_1_1point/#varpoint","text":"More...","title":"var::point"},{"location":"doxygen/Classes/classvar_1_1point/#detailed-description","text":"template < typename D > class var :: point ; Updated on 20 August 2022 at 21:24:15 EEST","title":"Detailed Description"},{"location":"doxygen/Classes/classvar_1_1table/","text":"var::table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 More... #include \"table.hpp\" Inherits from std::vector< std::vector< D > > Public Functions Name table () Construct a new table object. int row () Get the row size. int col () Get the col size. std::vector< std::string > get_col_names () Get the col names. std::vector< std::string > get_row_names () Get the row names. std::vector<&D > get_col (int index) Get the colum based on index. std::vector<&D > get_col (std::string name) Get the column vector based on header name. std::vector<&D > get_row (int index) Get the row based on index. std::vector<&D > get_row (std::string name) Get the row vector based on header name. void set_col_names (std::vector< std::string > names) void set_col_name (int j, std::string names) void set_row_names (std::vector< std::string > names) bool read_csv (std::string filename) Reads from csv file. bool save_csv (std::string filename) Reads from csv file. void show (int r) Shows a certain number of rows in table. void show () shows all of the table void show_header () Shows col_names only. table get_row_table (int r) Get the row as table. table get_col_table (std::string name) Get the col as table. bool add_col (std::vector< D > col_data, std::string col_name =std::string()) Adds new colum. bool add_row (std::vector< D > row_data) std::vector< D > get_avgs () Extract average of each column into a vector. std::vector< D > get_stds () Extract STD of each column into a vector. std::vector< D > get_vars () Extract variance of each column into a vector. std::vector< QR < D > > get_qrs () Extract QR of each column into a vector. std::vector< D > get_sums () Extract sum of each column into a vector. table describe_all () Statistical summary of all colums in table. Protected Functions Name void set_size () Sets the _row and _col according to the current class size. int check_col_name (std::string name) Returns column index of given column name. int check_row_name (std::string name) Returns row index of given row name. std::string generate_line (int l) Generates line to seperate rows. void generate_rows () Clears current row names and generates new ones. void generate_cols () Clears current column names and generates new ones. std::string center (const std::string s, const int w) Re-centers a string based on given width. std::string prd (D x, int width) Fills the string with given width with empty space. std::string prd (std::string x, int width) Gives spacing to a string. Protected Attributes Name std::vector< std::string > col_names Stores the column names. std::vector< std::string > row_names Stores the row names. int _row Row size. int _col Colum size. int sz Spacing size for print. Detailed Description template < typename D > class var :: table ; 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Public Functions Documentation function table inline table () Construct a new table object. Getters function row inline int row () Get the row size. Return : int function col inline int col () Get the col size. Return : int function get_col_names inline std :: vector < std :: string > get_col_names () Get the col names. Return : std::vector<std::string>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_row_names inline std :: vector < std :: string > get_row_names () Get the row names. Return : std::vector<std::string>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_col inline std :: vector <& D > get_col ( int index ) Get the colum based on index. Parameters : index index of that colum Exceptions : std::invalid_argument in case index is invalid Return : std::vector<&D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_col inline std :: vector <& D > get_col ( std :: string name ) Get the column vector based on header name. Parameters : name name of the column Exceptions : std::invalid_argument in case name is invalid Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : Empty if nothing exits function get_row inline std :: vector <& D > get_row ( int index ) Get the row based on index. Parameters : index index of that row Exceptions : std::invalid_argument in case index is invalid Return : std::vector<&D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_row inline std :: vector <& D > get_row ( std :: string name ) Get the row vector based on header name. Parameters : name name of the row Exceptions : std::invalid_argument in case name is invalid Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : Empty if nothing exits Setters function set_col_names inline void set_col_names ( std :: vector < std :: string > names ) function set_col_name inline void set_col_name ( int j , std :: string names ) function set_row_names inline void set_row_names ( std :: vector < std :: string > names ) function read_csv inline bool read_csv ( std :: string filename ) Reads from csv file. Parameters : file file name Return : true : if read is success false : if read did not complete function save_csv inline bool save_csv ( std :: string filename ) Reads from csv file. Parameters : file Return : true: if read is success false: if read did not complete function show inline void show ( int r ) Shows a certain number of rows in table. Parameters : r function show inline void show () shows all of the table function show_header inline void show_header () Shows col_names only. function get_row_table inline table get_row_table ( int r ) Get the row as table. Parameters : r Return : table function get_col_table inline table get_col_table ( std :: string name ) Get the col as table. Parameters : name Return : table function add_col inline bool add_col ( std :: vector < D > col_data , std :: string col_name = std :: string () ) Adds new colum. Parameters : col_name col_data Return : true false function add_row inline bool add_row ( std :: vector < D > row_data ) function get_avgs inline std :: vector < D > get_avgs () Extract average of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : same size as number of columns Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_stds inline std :: vector < D > get_stds () Extract STD of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 same size as number of columns Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_vars inline std :: vector < D > get_vars () Extract variance of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : same size as numebr of columns Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_qrs inline std :: vector < QR < D > > get_qrs () Extract QR of each column into a vector. Return : std::vector<QR>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : same size as number of colums Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function get_sums inline std :: vector < D > get_sums () Extract sum of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 size is same size as number of colums Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function describe_all inline table describe_all () Statistical summary of all colums in table. Return : table<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Example: Avg STD VAR Min Q1 Q2 Q3 Max IQR Sum col-0 .. .. .. .. .. .. .. .. .. .. col-1 .. .. .. .. .. .. .. .. .. .. Protected Functions Documentation function set_size inline void set_size () Sets the _row and _col according to the current class size. function check_col_name inline int check_col_name ( std :: string name ) Returns column index of given column name. Parameters : name string of column name Return : int \\([-1]\\) : index not found int \\([\\geq 0]\\) : index found function check_row_name inline int check_row_name ( std :: string name ) Returns row index of given row name. Parameters : name string of row name Return : int \\([-1]\\) : index not found int \\([\\geq 0]\\) : index found function generate_line inline std :: string generate_line ( int l ) Generates line to seperate rows. Parameters : l number of \"\u2015\" in the generated string Return : std::string function generate_rows inline void generate_rows () Clears current row names and generates new ones. function generate_cols inline void generate_cols () Clears current column names and generates new ones. function center static inline std :: string center ( const std :: string s , const int w ) Re-centers a string based on given width. Parameters : s string given w width to center the string to Return : std::string function prd static inline std :: string prd ( D x , int width ) Fills the string with given width with empty space. Parameters : x string given width width to center the string to Return : std::string function prd static inline std :: string prd ( std :: string x , int width ) Gives spacing to a string. Parameters : x string given width width to center the string to See : Similar to var::table::prd(D, int) Return : std::string Protected Attributes Documentation variable col_names std :: vector < std :: string > col_names ; Stores the column names. variable row_names std :: vector < std :: string > row_names ; Stores the row names. variable _row int _row ; Row size. variable _col int _col ; Colum size. variable sz int sz = 10 ; Spacing size for print. Updated on 20 August 2022 at 21:24:15 EEST","title":"Table"},{"location":"doxygen/Classes/classvar_1_1table/#vartable","text":"2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 More... #include \"table.hpp\" Inherits from std::vector< std::vector< D > >","title":"var::table"},{"location":"doxygen/Classes/classvar_1_1table/#public-functions","text":"Name table () Construct a new table object. int row () Get the row size. int col () Get the col size. std::vector< std::string > get_col_names () Get the col names. std::vector< std::string > get_row_names () Get the row names. std::vector<&D > get_col (int index) Get the colum based on index. std::vector<&D > get_col (std::string name) Get the column vector based on header name. std::vector<&D > get_row (int index) Get the row based on index. std::vector<&D > get_row (std::string name) Get the row vector based on header name. void set_col_names (std::vector< std::string > names) void set_col_name (int j, std::string names) void set_row_names (std::vector< std::string > names) bool read_csv (std::string filename) Reads from csv file. bool save_csv (std::string filename) Reads from csv file. void show (int r) Shows a certain number of rows in table. void show () shows all of the table void show_header () Shows col_names only. table get_row_table (int r) Get the row as table. table get_col_table (std::string name) Get the col as table. bool add_col (std::vector< D > col_data, std::string col_name =std::string()) Adds new colum. bool add_row (std::vector< D > row_data) std::vector< D > get_avgs () Extract average of each column into a vector. std::vector< D > get_stds () Extract STD of each column into a vector. std::vector< D > get_vars () Extract variance of each column into a vector. std::vector< QR < D > > get_qrs () Extract QR of each column into a vector. std::vector< D > get_sums () Extract sum of each column into a vector. table describe_all () Statistical summary of all colums in table.","title":"Public Functions"},{"location":"doxygen/Classes/classvar_1_1table/#protected-functions","text":"Name void set_size () Sets the _row and _col according to the current class size. int check_col_name (std::string name) Returns column index of given column name. int check_row_name (std::string name) Returns row index of given row name. std::string generate_line (int l) Generates line to seperate rows. void generate_rows () Clears current row names and generates new ones. void generate_cols () Clears current column names and generates new ones. std::string center (const std::string s, const int w) Re-centers a string based on given width. std::string prd (D x, int width) Fills the string with given width with empty space. std::string prd (std::string x, int width) Gives spacing to a string.","title":"Protected Functions"},{"location":"doxygen/Classes/classvar_1_1table/#protected-attributes","text":"Name std::vector< std::string > col_names Stores the column names. std::vector< std::string > row_names Stores the row names. int _row Row size. int _col Colum size. int sz Spacing size for print.","title":"Protected Attributes"},{"location":"doxygen/Classes/classvar_1_1table/#detailed-description","text":"template < typename D > class var :: table ; 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"Detailed Description"},{"location":"doxygen/Classes/classvar_1_1table/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classvar_1_1table/#function-table","text":"inline table () Construct a new table object.","title":"function table"},{"location":"doxygen/Classes/classvar_1_1table/#getters","text":"","title":"Getters"},{"location":"doxygen/Classes/classvar_1_1table/#function-row","text":"inline int row () Get the row size. Return : int","title":"function row"},{"location":"doxygen/Classes/classvar_1_1table/#function-col","text":"inline int col () Get the col size. Return : int","title":"function col"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_col_names","text":"inline std :: vector < std :: string > get_col_names () Get the col names. Return : std::vector<std::string>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_col_names"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_row_names","text":"inline std :: vector < std :: string > get_row_names () Get the row names. Return : std::vector<std::string>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_row_names"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_col","text":"inline std :: vector <& D > get_col ( int index ) Get the colum based on index. Parameters : index index of that colum Exceptions : std::invalid_argument in case index is invalid Return : std::vector<&D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_col"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_col_1","text":"inline std :: vector <& D > get_col ( std :: string name ) Get the column vector based on header name. Parameters : name name of the column Exceptions : std::invalid_argument in case name is invalid Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : Empty if nothing exits","title":"function get_col"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_row","text":"inline std :: vector <& D > get_row ( int index ) Get the row based on index. Parameters : index index of that row Exceptions : std::invalid_argument in case index is invalid Return : std::vector<&D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_row"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_row_1","text":"inline std :: vector <& D > get_row ( std :: string name ) Get the row vector based on header name. Parameters : name name of the row Exceptions : std::invalid_argument in case name is invalid Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : Empty if nothing exits","title":"function get_row"},{"location":"doxygen/Classes/classvar_1_1table/#setters","text":"","title":"Setters"},{"location":"doxygen/Classes/classvar_1_1table/#function-set_col_names","text":"inline void set_col_names ( std :: vector < std :: string > names )","title":"function set_col_names"},{"location":"doxygen/Classes/classvar_1_1table/#function-set_col_name","text":"inline void set_col_name ( int j , std :: string names )","title":"function set_col_name"},{"location":"doxygen/Classes/classvar_1_1table/#function-set_row_names","text":"inline void set_row_names ( std :: vector < std :: string > names )","title":"function set_row_names"},{"location":"doxygen/Classes/classvar_1_1table/#function-read_csv","text":"inline bool read_csv ( std :: string filename ) Reads from csv file. Parameters : file file name Return : true : if read is success false : if read did not complete","title":"function read_csv"},{"location":"doxygen/Classes/classvar_1_1table/#function-save_csv","text":"inline bool save_csv ( std :: string filename ) Reads from csv file. Parameters : file Return : true: if read is success false: if read did not complete","title":"function save_csv"},{"location":"doxygen/Classes/classvar_1_1table/#function-show","text":"inline void show ( int r ) Shows a certain number of rows in table. Parameters : r","title":"function show"},{"location":"doxygen/Classes/classvar_1_1table/#function-show_1","text":"inline void show () shows all of the table","title":"function show"},{"location":"doxygen/Classes/classvar_1_1table/#function-show_header","text":"inline void show_header () Shows col_names only.","title":"function show_header"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_row_table","text":"inline table get_row_table ( int r ) Get the row as table. Parameters : r Return : table","title":"function get_row_table"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_col_table","text":"inline table get_col_table ( std :: string name ) Get the col as table. Parameters : name Return : table","title":"function get_col_table"},{"location":"doxygen/Classes/classvar_1_1table/#function-add_col","text":"inline bool add_col ( std :: vector < D > col_data , std :: string col_name = std :: string () ) Adds new colum. Parameters : col_name col_data Return : true false","title":"function add_col"},{"location":"doxygen/Classes/classvar_1_1table/#function-add_row","text":"inline bool add_row ( std :: vector < D > row_data )","title":"function add_row"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_avgs","text":"inline std :: vector < D > get_avgs () Extract average of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : same size as number of columns Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_avgs"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_stds","text":"inline std :: vector < D > get_stds () Extract STD of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 same size as number of columns Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_stds"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_vars","text":"inline std :: vector < D > get_vars () Extract variance of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : same size as numebr of columns Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_vars"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_qrs","text":"inline std :: vector < QR < D > > get_qrs () Extract QR of each column into a vector. Return : std::vector<QR>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 : same size as number of colums Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_qrs"},{"location":"doxygen/Classes/classvar_1_1table/#function-get_sums","text":"inline std :: vector < D > get_sums () Extract sum of each column into a vector. Return : std::vector<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 size is same size as number of colums Used in describe_all()\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function get_sums"},{"location":"doxygen/Classes/classvar_1_1table/#function-describe_all","text":"inline table describe_all () Statistical summary of all colums in table. Return : table<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Example: Avg STD VAR Min Q1 Q2 Q3 Max IQR Sum col-0 .. .. .. .. .. .. .. .. .. .. col-1 .. .. .. .. .. .. .. .. .. ..","title":"function describe_all"},{"location":"doxygen/Classes/classvar_1_1table/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/Classes/classvar_1_1table/#function-set_size","text":"inline void set_size () Sets the _row and _col according to the current class size.","title":"function set_size"},{"location":"doxygen/Classes/classvar_1_1table/#function-check_col_name","text":"inline int check_col_name ( std :: string name ) Returns column index of given column name. Parameters : name string of column name Return : int \\([-1]\\) : index not found int \\([\\geq 0]\\) : index found","title":"function check_col_name"},{"location":"doxygen/Classes/classvar_1_1table/#function-check_row_name","text":"inline int check_row_name ( std :: string name ) Returns row index of given row name. Parameters : name string of row name Return : int \\([-1]\\) : index not found int \\([\\geq 0]\\) : index found","title":"function check_row_name"},{"location":"doxygen/Classes/classvar_1_1table/#function-generate_line","text":"inline std :: string generate_line ( int l ) Generates line to seperate rows. Parameters : l number of \"\u2015\" in the generated string Return : std::string","title":"function generate_line"},{"location":"doxygen/Classes/classvar_1_1table/#function-generate_rows","text":"inline void generate_rows () Clears current row names and generates new ones.","title":"function generate_rows"},{"location":"doxygen/Classes/classvar_1_1table/#function-generate_cols","text":"inline void generate_cols () Clears current column names and generates new ones.","title":"function generate_cols"},{"location":"doxygen/Classes/classvar_1_1table/#function-center","text":"static inline std :: string center ( const std :: string s , const int w ) Re-centers a string based on given width. Parameters : s string given w width to center the string to Return : std::string","title":"function center"},{"location":"doxygen/Classes/classvar_1_1table/#function-prd","text":"static inline std :: string prd ( D x , int width ) Fills the string with given width with empty space. Parameters : x string given width width to center the string to Return : std::string","title":"function prd"},{"location":"doxygen/Classes/classvar_1_1table/#function-prd_1","text":"static inline std :: string prd ( std :: string x , int width ) Gives spacing to a string. Parameters : x string given width width to center the string to See : Similar to var::table::prd(D, int) Return : std::string","title":"function prd"},{"location":"doxygen/Classes/classvar_1_1table/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"doxygen/Classes/classvar_1_1table/#variable-col_names","text":"std :: vector < std :: string > col_names ; Stores the column names.","title":"variable col_names"},{"location":"doxygen/Classes/classvar_1_1table/#variable-row_names","text":"std :: vector < std :: string > row_names ; Stores the row names.","title":"variable row_names"},{"location":"doxygen/Classes/classvar_1_1table/#variable-_row","text":"int _row ; Row size.","title":"variable _row"},{"location":"doxygen/Classes/classvar_1_1table/#variable-_col","text":"int _col ; Colum size.","title":"variable _col"},{"location":"doxygen/Classes/classvar_1_1table/#variable-sz","text":"int sz = 10 ; Spacing size for print. Updated on 20 August 2022 at 21:24:15 EEST","title":"variable sz"},{"location":"doxygen/Classes/classvar_1_1tree/","text":"var::tree More... #include \"tree.hpp\" Detailed Description template < typename D > class var :: tree ; Updated on 20 August 2022 at 21:24:15 EEST","title":"Tree"},{"location":"doxygen/Classes/classvar_1_1tree/#vartree","text":"More... #include \"tree.hpp\"","title":"var::tree"},{"location":"doxygen/Classes/classvar_1_1tree/#detailed-description","text":"template < typename D > class var :: tree ; Updated on 20 August 2022 at 21:24:15 EEST","title":"Detailed Description"},{"location":"doxygen/Classes/structalg_1_1ans/","text":"alg::ans More... #include \"solvers.hpp\" Public Attributes Name std::vector< D > real std::vector< std::complex< D > > imag Detailed Description template < typename D > struct alg :: ans ; Public Attributes Documentation variable real std :: vector < D > real ; variable imag std :: vector < std :: complex < D > > imag ; Updated on 20 August 2022 at 21:24:15 EEST","title":"alg::ans"},{"location":"doxygen/Classes/structalg_1_1ans/#algans","text":"More... #include \"solvers.hpp\"","title":"alg::ans"},{"location":"doxygen/Classes/structalg_1_1ans/#public-attributes","text":"Name std::vector< D > real std::vector< std::complex< D > > imag","title":"Public Attributes"},{"location":"doxygen/Classes/structalg_1_1ans/#detailed-description","text":"template < typename D > struct alg :: ans ;","title":"Detailed Description"},{"location":"doxygen/Classes/structalg_1_1ans/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/Classes/structalg_1_1ans/#variable-real","text":"std :: vector < D > real ;","title":"variable real"},{"location":"doxygen/Classes/structalg_1_1ans/#variable-imag","text":"std :: vector < std :: complex < D > > imag ; Updated on 20 August 2022 at 21:24:15 EEST","title":"variable imag"},{"location":"doxygen/Classes/structvar_1_1QR/","text":"var::QR Struct to contain the quartile range. More... #include \"others.hpp\" Public Attributes Name D LQ Lower quartile. D Q1 Q1 (25%) D Q2 Q2 (50%) D Q3 Q3 (75%) D UQ Upper quartile. Detailed Description template < typename D > struct var :: QR ; Struct to contain the quartile range. Public Attributes Documentation variable LQ D LQ ; Lower quartile. variable Q1 D Q1 ; Q1 (25%) variable Q2 D Q2 ; Q2 (50%) variable Q3 D Q3 ; Q3 (75%) variable UQ D UQ ; Upper quartile. Updated on 20 August 2022 at 21:24:15 EEST","title":"var::QR"},{"location":"doxygen/Classes/structvar_1_1QR/#varqr","text":"Struct to contain the quartile range. More... #include \"others.hpp\"","title":"var::QR"},{"location":"doxygen/Classes/structvar_1_1QR/#public-attributes","text":"Name D LQ Lower quartile. D Q1 Q1 (25%) D Q2 Q2 (50%) D Q3 Q3 (75%) D UQ Upper quartile.","title":"Public Attributes"},{"location":"doxygen/Classes/structvar_1_1QR/#detailed-description","text":"template < typename D > struct var :: QR ; Struct to contain the quartile range.","title":"Detailed Description"},{"location":"doxygen/Classes/structvar_1_1QR/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/Classes/structvar_1_1QR/#variable-lq","text":"D LQ ; Lower quartile.","title":"variable LQ"},{"location":"doxygen/Classes/structvar_1_1QR/#variable-q1","text":"D Q1 ; Q1 (25%)","title":"variable Q1"},{"location":"doxygen/Classes/structvar_1_1QR/#variable-q2","text":"D Q2 ; Q2 (50%)","title":"variable Q2"},{"location":"doxygen/Classes/structvar_1_1QR/#variable-q3","text":"D Q3 ; Q3 (75%)","title":"variable Q3"},{"location":"doxygen/Classes/structvar_1_1QR/#variable-uq","text":"D UQ ; Upper quartile. Updated on 20 August 2022 at 21:24:15 EEST","title":"variable UQ"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/","text":"var::matrix::LU Struct for PLU decomposition. More... #include \"matrix.hpp\" Public Attributes Name matrix L Lower triangular. matrix U Upper triangular. matrix P Permutation matrix. Detailed Description struct var :: matrix :: LU ; Struct for PLU decomposition. Usage : typename var :: matrix < D >:: LU a ; Public Attributes Documentation variable L matrix L ; Lower triangular. variable U matrix U ; Upper triangular. variable P matrix P ; Permutation matrix. Updated on 20 August 2022 at 21:24:15 EEST","title":"var::matrix::LU"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#varmatrixlu","text":"Struct for PLU decomposition. More... #include \"matrix.hpp\"","title":"var::matrix::LU"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#public-attributes","text":"Name matrix L Lower triangular. matrix U Upper triangular. matrix P Permutation matrix.","title":"Public Attributes"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#detailed-description","text":"struct var :: matrix :: LU ; Struct for PLU decomposition. Usage : typename var :: matrix < D >:: LU a ;","title":"Detailed Description"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#variable-l","text":"matrix L ; Lower triangular.","title":"variable L"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#variable-u","text":"matrix U ; Upper triangular.","title":"variable U"},{"location":"doxygen/Classes/structvar_1_1matrix_1_1LU/#variable-p","text":"matrix P ; Permutation matrix. Updated on 20 August 2022 at 21:24:15 EEST","title":"variable P"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/","text":"var::table::QR Struct to contain the quartile range. #include \"table.hpp\" Public Attributes Name D LQ Lower quartile. D Q1 Q1 (25%) D Q2 Q2 (50%) D Q3 Q3 (75%) D UQ Upper quartile. Public Attributes Documentation variable LQ D LQ ; Lower quartile. variable Q1 D Q1 ; Q1 (25%) variable Q2 D Q2 ; Q2 (50%) variable Q3 D Q3 ; Q3 (75%) variable UQ D UQ ; Upper quartile. Updated on 13 August 2022 at 01:14:25 EEST","title":"var::table::QR"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#vartableqr","text":"Struct to contain the quartile range. #include \"table.hpp\"","title":"var::table::QR"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#public-attributes","text":"Name D LQ Lower quartile. D Q1 Q1 (25%) D Q2 Q2 (50%) D Q3 Q3 (75%) D UQ Upper quartile.","title":"Public Attributes"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#variable-lq","text":"D LQ ; Lower quartile.","title":"variable LQ"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#variable-q1","text":"D Q1 ; Q1 (25%)","title":"variable Q1"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#variable-q2","text":"D Q2 ; Q2 (50%)","title":"variable Q2"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#variable-q3","text":"D Q3 ; Q3 (75%)","title":"variable Q3"},{"location":"doxygen/Classes/structvar_1_1table_1_1QR/#variable-uq","text":"D UQ ; Upper quartile. Updated on 13 August 2022 at 01:14:25 EEST","title":"variable UQ"},{"location":"doxygen/Examples/","text":"Examples Updated on 20 August 2022 at 21:24:15 EEST","title":"Examples"},{"location":"doxygen/Examples/#examples","text":"Updated on 20 August 2022 at 21:24:15 EEST","title":"Examples"},{"location":"doxygen/Files/","text":"Files dir includes dir includes/algebra file includes/algebra/solvers.hpp Implementation and declaration of arithemtic solvers functions. dir includes/calculus file includes/calculus/differential.hpp Differential calculus. file includes/calculus/integral.hpp Will contain ingeration functions. dir includes/communication file includes/communication/signals.hpp Contains functions relating to signal processing. dir includes/mathematic file includes/mathematic/mathematic.hpp General math functionality. dir includes/numerical file includes/numerical/linear.hpp Linearl algebra. file includes/numerical/vect.hpp Will contain functions that manipulate vectors. dir includes/statistics file includes/statistics/stat.hpp dir includes/variables file includes/variables/matrix.hpp Implementation and declaration of matrix class. file includes/variables/others.hpp Contains other data structures. file includes/variables/point.hpp file includes/variables/table.hpp Implementation and declaration of table.hpp. file includes/variables/tree.hpp file includes/variables/vecop.hpp Extends upon std::vector. file includes/mcpp.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/#files","text":"dir includes dir includes/algebra file includes/algebra/solvers.hpp Implementation and declaration of arithemtic solvers functions. dir includes/calculus file includes/calculus/differential.hpp Differential calculus. file includes/calculus/integral.hpp Will contain ingeration functions. dir includes/communication file includes/communication/signals.hpp Contains functions relating to signal processing. dir includes/mathematic file includes/mathematic/mathematic.hpp General math functionality. dir includes/numerical file includes/numerical/linear.hpp Linearl algebra. file includes/numerical/vect.hpp Will contain functions that manipulate vectors. dir includes/statistics file includes/statistics/stat.hpp dir includes/variables file includes/variables/matrix.hpp Implementation and declaration of matrix class. file includes/variables/others.hpp Contains other data structures. file includes/variables/point.hpp file includes/variables/table.hpp Implementation and declaration of table.hpp. file includes/variables/tree.hpp file includes/variables/vecop.hpp Extends upon std::vector. file includes/mcpp.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/differential_8hpp/","text":"includes/calculus/differential.hpp Differential calculus. More... Namespaces Name calc Contains differential and integral calculus functions. Functions Name template <typename LAMBDA ,typename D > D diff (LAMBDA f, D x, unsigned int n =1, D dx =D(0.00001)) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. template <typename D > std::vector< D > diff (std::vector< D > & x, std::vector< D > & y, int n =1) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > diff (LAMBDA f, std::vector< D > & x, int n =1) Derivative of function with given vector. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > taylor (LAMBDA f, std::vector< D > & x, D x0 =D(0)) template <typename D ,typename LAMBDA > std::vector< D > eular_method (LAMBDA f, D x0, unsigned int n) Detailed Description Differential calculus. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022 Functions Documentation function diff template < typename LAMBDA , typename D > D diff ( LAMBDA f , D x , unsigned int n = 1 , D dx = D ( 0.00001 ) ) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. Parameters : f Function x Point n Derivative order dx Step size Template Parameters : LAMBDA std::function D any floating point type (double, float ..) Return : D function diff template < typename D > std :: vector < D > diff ( std :: vector < D > & x , std :: vector < D > & y , int n = 1 ) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n Parameters : x Domain vector y Range vector n Derivative order Template Parameters : D any floating point type (double, float ..) Return : std::vector function diff template < typename D , typename LAMBDA > std :: vector < D > diff ( LAMBDA f , std :: vector < D > & x , int n = 1 ) Derivative of function with given vector. It returns a vector of size: x.size()-n Parameters : f Function x Domain vector n Derivative order Template Parameters : D LAMBDA Return : std::vector function taylor template < typename D , typename LAMBDA > std :: vector < D > taylor ( LAMBDA f , std :: vector < D > & x , D x0 = D ( 0 ) ) function eular_method template < typename D , typename LAMBDA > std :: vector < D > eular_method ( LAMBDA f , D x0 , unsigned int n ) Source code #pragma once #include \"../mcpp.hpp\" #include <cmath> #include <vector> namespace calc { template < typename LAMBDA , typename D > D diff ( LAMBDA f , D x , unsigned int n = 1 , D dx = D ( 0.00001 )) { // BUG higher orders have high error D ans = D ( 0.0 ); if ( n > 2 && x != D ( 0 ) && dx == D ( 0.00001 )) { dx = x * sqrt ( __DBL_EPSILON__ ) * 1 * pow ( 10 , n ); } for ( int k = 0 ; k <= n ; k ++ ) { ans += pow (( -1 ), k ) * mth :: combination ( n , k ) * f ( x + ( n - D ( 2 ) * k ) * dx ); } return D ( ans / ( pow (( D ( 2 ) * dx ), n ))); } template < typename D > std :: vector < D > diff ( std :: vector < D > & x , std :: vector < D > & y , int n = 1 ) { auto dx = vect :: difference ( x ); auto dy = vect :: difference ( y ); auto yp = dy / dx ; auto xp = vect :: averages ( x ); if ( n == 1 ) { return yp ; } return diff ( xp , yp , n - 1 ); } template < typename D , typename LAMBDA > std :: vector < D > diff ( LAMBDA f , std :: vector < D > & x , int n = 1 ) { auto y = vect :: vec_op ( f , x ); return diff ( x , y , n ); } template < typename D , typename LAMBDA > std :: vector < D > taylor ( LAMBDA f , std :: vector < D > & x , D x0 = D ( 0 )) { } template < typename D , typename LAMBDA > std :: vector < D > eular_method ( LAMBDA f , D x0 , unsigned int n ) { } } // TODO differentiation // TODO Eular method // TODO power series // TODO limits // TODO more testing on 'diff' cases Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/calculus/differential.hpp"},{"location":"doxygen/Files/differential_8hpp/#includescalculusdifferentialhpp","text":"Differential calculus. More...","title":"includes/calculus/differential.hpp"},{"location":"doxygen/Files/differential_8hpp/#namespaces","text":"Name calc Contains differential and integral calculus functions.","title":"Namespaces"},{"location":"doxygen/Files/differential_8hpp/#functions","text":"Name template <typename LAMBDA ,typename D > D diff (LAMBDA f, D x, unsigned int n =1, D dx =D(0.00001)) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. template <typename D > std::vector< D > diff (std::vector< D > & x, std::vector< D > & y, int n =1) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > diff (LAMBDA f, std::vector< D > & x, int n =1) Derivative of function with given vector. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > taylor (LAMBDA f, std::vector< D > & x, D x0 =D(0)) template <typename D ,typename LAMBDA > std::vector< D > eular_method (LAMBDA f, D x0, unsigned int n)","title":"Functions"},{"location":"doxygen/Files/differential_8hpp/#detailed-description","text":"Differential calculus. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/differential_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/differential_8hpp/#function-diff","text":"template < typename LAMBDA , typename D > D diff ( LAMBDA f , D x , unsigned int n = 1 , D dx = D ( 0.00001 ) ) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. Parameters : f Function x Point n Derivative order dx Step size Template Parameters : LAMBDA std::function D any floating point type (double, float ..) Return : D","title":"function diff"},{"location":"doxygen/Files/differential_8hpp/#function-diff_1","text":"template < typename D > std :: vector < D > diff ( std :: vector < D > & x , std :: vector < D > & y , int n = 1 ) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n Parameters : x Domain vector y Range vector n Derivative order Template Parameters : D any floating point type (double, float ..) Return : std::vector","title":"function diff"},{"location":"doxygen/Files/differential_8hpp/#function-diff_2","text":"template < typename D , typename LAMBDA > std :: vector < D > diff ( LAMBDA f , std :: vector < D > & x , int n = 1 ) Derivative of function with given vector. It returns a vector of size: x.size()-n Parameters : f Function x Domain vector n Derivative order Template Parameters : D LAMBDA Return : std::vector","title":"function diff"},{"location":"doxygen/Files/differential_8hpp/#function-taylor","text":"template < typename D , typename LAMBDA > std :: vector < D > taylor ( LAMBDA f , std :: vector < D > & x , D x0 = D ( 0 ) )","title":"function taylor"},{"location":"doxygen/Files/differential_8hpp/#function-eular_method","text":"template < typename D , typename LAMBDA > std :: vector < D > eular_method ( LAMBDA f , D x0 , unsigned int n )","title":"function eular_method"},{"location":"doxygen/Files/differential_8hpp/#source-code","text":"#pragma once #include \"../mcpp.hpp\" #include <cmath> #include <vector> namespace calc { template < typename LAMBDA , typename D > D diff ( LAMBDA f , D x , unsigned int n = 1 , D dx = D ( 0.00001 )) { // BUG higher orders have high error D ans = D ( 0.0 ); if ( n > 2 && x != D ( 0 ) && dx == D ( 0.00001 )) { dx = x * sqrt ( __DBL_EPSILON__ ) * 1 * pow ( 10 , n ); } for ( int k = 0 ; k <= n ; k ++ ) { ans += pow (( -1 ), k ) * mth :: combination ( n , k ) * f ( x + ( n - D ( 2 ) * k ) * dx ); } return D ( ans / ( pow (( D ( 2 ) * dx ), n ))); } template < typename D > std :: vector < D > diff ( std :: vector < D > & x , std :: vector < D > & y , int n = 1 ) { auto dx = vect :: difference ( x ); auto dy = vect :: difference ( y ); auto yp = dy / dx ; auto xp = vect :: averages ( x ); if ( n == 1 ) { return yp ; } return diff ( xp , yp , n - 1 ); } template < typename D , typename LAMBDA > std :: vector < D > diff ( LAMBDA f , std :: vector < D > & x , int n = 1 ) { auto y = vect :: vec_op ( f , x ); return diff ( x , y , n ); } template < typename D , typename LAMBDA > std :: vector < D > taylor ( LAMBDA f , std :: vector < D > & x , D x0 = D ( 0 )) { } template < typename D , typename LAMBDA > std :: vector < D > eular_method ( LAMBDA f , D x0 , unsigned int n ) { } } // TODO differentiation // TODO Eular method // TODO power series // TODO limits // TODO more testing on 'diff' cases Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/dir_09e761304027c904456130627fd4dcf5/","text":"includes Directories Name includes/algebra includes/calculus includes/communication includes/mathematic includes/numerical includes/statistics includes/variables Files Name includes/mcpp.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"includes"},{"location":"doxygen/Files/dir_09e761304027c904456130627fd4dcf5/#includes","text":"","title":"includes"},{"location":"doxygen/Files/dir_09e761304027c904456130627fd4dcf5/#directories","text":"Name includes/algebra includes/calculus includes/communication includes/mathematic includes/numerical includes/statistics includes/variables","title":"Directories"},{"location":"doxygen/Files/dir_09e761304027c904456130627fd4dcf5/#files","text":"Name includes/mcpp.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_1ac8c584a2311ca062bb43cbcaebb9f4/","text":"includes/variables Files Name includes/variables/matrix.hpp Implementation and declaration of matrix class. includes/variables/others.hpp Contains other data structures. includes/variables/point.hpp includes/variables/table.hpp Implementation and declaration of table.hpp. includes/variables/tree.hpp includes/variables/vecop.hpp Extends upon std::vector. Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables"},{"location":"doxygen/Files/dir_1ac8c584a2311ca062bb43cbcaebb9f4/#includesvariables","text":"","title":"includes/variables"},{"location":"doxygen/Files/dir_1ac8c584a2311ca062bb43cbcaebb9f4/#files","text":"Name includes/variables/matrix.hpp Implementation and declaration of matrix class. includes/variables/others.hpp Contains other data structures. includes/variables/point.hpp includes/variables/table.hpp Implementation and declaration of table.hpp. includes/variables/tree.hpp includes/variables/vecop.hpp Extends upon std::vector. Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_25d299ead5ad88191ac2f2d25bef095e/","text":"includes/algebra Files Name includes/algebra/solvers.hpp Implementation and declaration of arithemtic solvers functions. Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/algebra"},{"location":"doxygen/Files/dir_25d299ead5ad88191ac2f2d25bef095e/#includesalgebra","text":"","title":"includes/algebra"},{"location":"doxygen/Files/dir_25d299ead5ad88191ac2f2d25bef095e/#files","text":"Name includes/algebra/solvers.hpp Implementation and declaration of arithemtic solvers functions. Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_26658cbd91f1aecb4cf76855d0c330bb/","text":"includes/numerical Files Name includes/numerical/linear.hpp Linearl algebra. includes/numerical/vect.hpp Will contain functions that manipulate vectors. Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/numerical"},{"location":"doxygen/Files/dir_26658cbd91f1aecb4cf76855d0c330bb/#includesnumerical","text":"","title":"includes/numerical"},{"location":"doxygen/Files/dir_26658cbd91f1aecb4cf76855d0c330bb/#files","text":"Name includes/numerical/linear.hpp Linearl algebra. includes/numerical/vect.hpp Will contain functions that manipulate vectors. Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_2b97f0eb067416c511ded74a0cf87f9d/","text":"includes/communication Files Name includes/communication/signals.hpp Contains functions relating to signal processing. Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/communication"},{"location":"doxygen/Files/dir_2b97f0eb067416c511ded74a0cf87f9d/#includescommunication","text":"","title":"includes/communication"},{"location":"doxygen/Files/dir_2b97f0eb067416c511ded74a0cf87f9d/#files","text":"Name includes/communication/signals.hpp Contains functions relating to signal processing. Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_348221f04fff0f789742aea7cd63c2bd/","text":"includes/mathematic Files Name includes/mathematic/mathematic.hpp General math functionality. Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/mathematic"},{"location":"doxygen/Files/dir_348221f04fff0f789742aea7cd63c2bd/#includesmathematic","text":"","title":"includes/mathematic"},{"location":"doxygen/Files/dir_348221f04fff0f789742aea7cd63c2bd/#files","text":"Name includes/mathematic/mathematic.hpp General math functionality. Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_4cd83b732da33e26972dd88221fcb4f7/","text":"includes/calculus Files Name includes/calculus/differential.hpp Differential calculus. includes/calculus/integral.hpp Will contain ingeration functions. Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/calculus"},{"location":"doxygen/Files/dir_4cd83b732da33e26972dd88221fcb4f7/#includescalculus","text":"","title":"includes/calculus"},{"location":"doxygen/Files/dir_4cd83b732da33e26972dd88221fcb4f7/#files","text":"Name includes/calculus/differential.hpp Differential calculus. includes/calculus/integral.hpp Will contain ingeration functions. Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/dir_627040d70115e105397bdb429f987b1e/","text":"includes/statistics Files Name includes/statistics/stat.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/statistics"},{"location":"doxygen/Files/dir_627040d70115e105397bdb429f987b1e/#includesstatistics","text":"","title":"includes/statistics"},{"location":"doxygen/Files/dir_627040d70115e105397bdb429f987b1e/#files","text":"Name includes/statistics/stat.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"Files"},{"location":"doxygen/Files/integral_8hpp/","text":"includes/calculus/integral.hpp Will contain ingeration functions. More... Namespaces Name calc Contains differential and integral calculus functions. Detailed Description Will contain ingeration functions. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022 Source code // TODO fourier series // TODO integral namespace calc { } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/calculus/integral.hpp"},{"location":"doxygen/Files/integral_8hpp/#includescalculusintegralhpp","text":"Will contain ingeration functions. More...","title":"includes/calculus/integral.hpp"},{"location":"doxygen/Files/integral_8hpp/#namespaces","text":"Name calc Contains differential and integral calculus functions.","title":"Namespaces"},{"location":"doxygen/Files/integral_8hpp/#detailed-description","text":"Will contain ingeration functions. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/integral_8hpp/#source-code","text":"// TODO fourier series // TODO integral namespace calc { } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/linear_8hpp/","text":"includes/numerical/linear.hpp Linearl algebra. More... Namespaces Name lalg Contains functions related to matrices and linear algebra. Functions Name template <typename D > var::matrix < D > eye (int n) Produeces identity matrix of length n template <typename D > var::matrix < D > perms (D a, D b) Detailed Description Linearl algebra. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022 Functions Documentation function eye template < typename D > var :: matrix < D > eye ( int n ) Produeces identity matrix of length n Parameters : n Template Parameters : D Return : var::matrix<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function perms template < typename D > var :: matrix < D > perms ( D a , D b ) Source code #pragma once #include \"../mcpp.hpp\" // // forward declaration // namespace var // { // template <typename D> // class matrix; // } namespace lalg { template < typename D > var :: matrix < D > eye ( int n ) { var :: matrix < D > temp ( n , n ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { temp [ i ][ j ] = D ( 1 ); } else { temp [ i ][ j ] = D ( 0 ); } } } return temp ; } template < typename D > var :: matrix < D > perms ( D a , D b ) { } } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/numerical/linear.hpp"},{"location":"doxygen/Files/linear_8hpp/#includesnumericallinearhpp","text":"Linearl algebra. More...","title":"includes/numerical/linear.hpp"},{"location":"doxygen/Files/linear_8hpp/#namespaces","text":"Name lalg Contains functions related to matrices and linear algebra.","title":"Namespaces"},{"location":"doxygen/Files/linear_8hpp/#functions","text":"Name template <typename D > var::matrix < D > eye (int n) Produeces identity matrix of length n template <typename D > var::matrix < D > perms (D a, D b)","title":"Functions"},{"location":"doxygen/Files/linear_8hpp/#detailed-description","text":"Linearl algebra. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/linear_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/linear_8hpp/#function-eye","text":"template < typename D > var :: matrix < D > eye ( int n ) Produeces identity matrix of length n Parameters : n Template Parameters : D Return : var::matrix<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function eye"},{"location":"doxygen/Files/linear_8hpp/#function-perms","text":"template < typename D > var :: matrix < D > perms ( D a , D b )","title":"function perms"},{"location":"doxygen/Files/linear_8hpp/#source-code","text":"#pragma once #include \"../mcpp.hpp\" // // forward declaration // namespace var // { // template <typename D> // class matrix; // } namespace lalg { template < typename D > var :: matrix < D > eye ( int n ) { var :: matrix < D > temp ( n , n ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { temp [ i ][ j ] = D ( 1 ); } else { temp [ i ][ j ] = D ( 0 ); } } } return temp ; } template < typename D > var :: matrix < D > perms ( D a , D b ) { } } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/mathematic_8hpp/","text":"includes/mathematic/mathematic.hpp General math functionality. More... Namespaces Name mth Generic mathematical functions. Functions Name int factorial (int n) Factorial. int combination (int n, int k) Combination (Cr) template <typename D > int decimals (D a) Gets number of decimal places. template <typename D > D round (D a, int dp =0) overriding default round Detailed Description General math functionality. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022 Functions Documentation function factorial int factorial ( int n ) Factorial. Parameters : n Return : int function combination int combination ( int n , int k ) Combination (Cr) Parameters : n k Return : int function decimals template < typename D > int decimals ( D a ) Gets number of decimal places. Parameters : a Template Parameters : D Return : int function round template < typename D > D round ( D a , int dp = 0 ) overriding default round Parameters : a dp Template Parameters : D Return : D Source code #pragma once #include <algorithm> #include <cmath> #include <complex> #include <fstream> #include <iostream> #include <limits> #include <numeric> #include <sstream> #include <stdexcept> #include <vector> namespace mth { int factorial ( int n ) { int sum = 1 ; for ( int i = n ; i > 0 ; i -- ) { sum = sum * i ; } return sum ; } int combination ( int n , int k ) { return factorial ( n ) / ( factorial ( k ) * factorial ( n - k )); } template < typename D > int decimals ( D a ) { std :: string s ; std :: string t ; std :: stringstream out ; out << a ; s = out . str (); t = s . substr ( s . find ( \".\" ) + 1 ); return t . length (); } template < typename D > D round ( D a , int dp = 0 ) { if ( a < D ( 0 )) { return D ( ( a * pow ( 10 , dp ) - .5 ) / pow ( 10 , dp )); } return D ( ( a * pow ( 10 , dp ) + .5 ) / pow ( 10 , dp )); } } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/mathematic/mathematic.hpp"},{"location":"doxygen/Files/mathematic_8hpp/#includesmathematicmathematichpp","text":"General math functionality. More...","title":"includes/mathematic/mathematic.hpp"},{"location":"doxygen/Files/mathematic_8hpp/#namespaces","text":"Name mth Generic mathematical functions.","title":"Namespaces"},{"location":"doxygen/Files/mathematic_8hpp/#functions","text":"Name int factorial (int n) Factorial. int combination (int n, int k) Combination (Cr) template <typename D > int decimals (D a) Gets number of decimal places. template <typename D > D round (D a, int dp =0) overriding default round","title":"Functions"},{"location":"doxygen/Files/mathematic_8hpp/#detailed-description","text":"General math functionality. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/mathematic_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/mathematic_8hpp/#function-factorial","text":"int factorial ( int n ) Factorial. Parameters : n Return : int","title":"function factorial"},{"location":"doxygen/Files/mathematic_8hpp/#function-combination","text":"int combination ( int n , int k ) Combination (Cr) Parameters : n k Return : int","title":"function combination"},{"location":"doxygen/Files/mathematic_8hpp/#function-decimals","text":"template < typename D > int decimals ( D a ) Gets number of decimal places. Parameters : a Template Parameters : D Return : int","title":"function decimals"},{"location":"doxygen/Files/mathematic_8hpp/#function-round","text":"template < typename D > D round ( D a , int dp = 0 ) overriding default round Parameters : a dp Template Parameters : D Return : D","title":"function round"},{"location":"doxygen/Files/mathematic_8hpp/#source-code","text":"#pragma once #include <algorithm> #include <cmath> #include <complex> #include <fstream> #include <iostream> #include <limits> #include <numeric> #include <sstream> #include <stdexcept> #include <vector> namespace mth { int factorial ( int n ) { int sum = 1 ; for ( int i = n ; i > 0 ; i -- ) { sum = sum * i ; } return sum ; } int combination ( int n , int k ) { return factorial ( n ) / ( factorial ( k ) * factorial ( n - k )); } template < typename D > int decimals ( D a ) { std :: string s ; std :: string t ; std :: stringstream out ; out << a ; s = out . str (); t = s . substr ( s . find ( \".\" ) + 1 ); return t . length (); } template < typename D > D round ( D a , int dp = 0 ) { if ( a < D ( 0 )) { return D ( ( a * pow ( 10 , dp ) - .5 ) / pow ( 10 , dp )); } return D ( ( a * pow ( 10 , dp ) + .5 ) / pow ( 10 , dp )); } } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/matrix_8hpp/","text":"includes/variables/matrix.hpp Implementation and declaration of matrix class. More... Namespaces Name var Namespace that contains all variable data types. Classes Name class var::matrix Class for 2d matrix of objects. struct var::matrix::LU Struct for PLU decomposition. Detailed Description Implementation and declaration of matrix class. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022 Source code #pragma once #include \"../mcpp.hpp\" #include <algorithm> #include <cmath> #include <limits> #include <numeric> #include <cassert> // TODO: change code and inherit from table.hpp namespace var { template < typename D > class matrix { protected : class Col { private : matrix & _a ; int _i ; public : Col ( matrix & a , int i ) : _a ( a ), _i ( i ) {} D & operator []( int j ) { return _a . data [ _i ][ j ]; } }; template < typename T > using table = std :: vector < std :: vector < T >> ; void check_col ( int j ) { if ( j < 0 || j >= _col ) { throw std :: out_of_range ( \"var::matrix::check_col -> Col index is out of range\" ); } } void check_row ( int i ) { if ( i < 0 || i >= _row ) { throw std :: out_of_range ( \"var::matrix::check_row -> Row index is out of range\" ); } } table < D > TT () { // temps std :: vector < D > temp_col ; table < D > temp ; // reversing rows with colums for ( int i = 0 ; i < _col ; i ++ ) { temp_col . clear (); for ( int j = 0 ; j < _row ; j ++ ) { temp_col . push_back ( data [ j ][ i ]); } temp . push_back ( temp_col ); } // applying to data variable return temp ; } void check_size ( int r , int c ) { if ( c != _col || r != _row ) { throw std :: invalid_argument ( \"var::matrix::check_size -> Size mismatch\" ); } } matrix MM ( int i , int j , matrix & other ) { matrix b ( other . row () - 1 , other . col () - 1 ); int r = 0 ; int c = 0 ; for ( int ii = 0 ; ii < other . row (); ii ++ ) { for ( int jj = 0 ; jj < other . col (); jj ++ ) { if ( ii != i && jj != j ) { b [ r ][ c ] = other [ ii ][ jj ]; c ++ ; } } c = 0 ; if ( ii != i ) { r ++ ; } } return b ; } D DET ( matrix a ) { // 2x2 determinant if ( a . col () == 2 ) { return ( a [ 0 ][ 0 ] * a [ 1 ][ 1 ]) - ( a [ 1 ][ 0 ] * a [ 0 ][ 1 ]); } // n by n D sum = D (); for ( int j = 0 ; j < a . col (); j ++ ) { sum += a [ 0 ][ j ] * std :: pow (( -1 ), 0 + j ) * DET ( MM ( 0 , j , a )); } return sum ; } void square () { if ( ! is_square ()) { throw std :: invalid_argument ( \"var::matrix::square -> Matrix is not a square\" ); } } private : table < D > data ; int _row ; int _col ; public : struct LU { matrix L ; matrix U ; matrix P ; }; matrix ( int r , int c ) { resize ( r , c ); } matrix () : _row ( 0 ), _col ( 0 ) {} matrix ( std :: initializer_list < std :: initializer_list < D >> a ) { _row = a . size (); _col = a . begin () -> size (); std :: vector < D > vect_row ; for ( auto & i : a ) { vect_row . clear (); for ( auto & j : i ) { vect_row . push_back ( j ); } data . push_back ( vect_row ); } } int row () { return _row ; } int col () { return _col ; } int size () { return _col * _row ; } auto begin () { return data . begin (); } auto end () { return data . end (); } auto begin () const { return data . begin (); } auto end () const { return data . end (); } D get_element ( int i , int j ) { check_row ( i ); check_col ( j ); return data [ i ][ j ]; } std :: vector < D > get_row ( int i ) { check_row ( i ); return data [ i ]; } std :: vector < D > get_col ( int j ) { check_col ( j ); std :: vector < D > temp ; for ( int i = 0 ; i < _row ; i ++ ) { temp . push_back ( data [ i ][ j ]); } return temp ; } void resize ( int r , int c ) { // checking if ( r < 0 || c < 0 ) { throw std :: invalid_argument ( \"var::matrix::resize -> Invalid values\" ); } _row = r ; _col = c ; data . clear (); for ( int i = 0 ; i < _row ; i ++ ) { data . push_back ( std :: vector < D > ( _col )); } } void push_row ( std :: vector < D > a ) { // checking size if ( a . size () != _col && _row != 0 && _col != 0 ) { throw std :: invalid_argument ( \"var::matrix::push_row -> Size doesnt match\" ); } else if ( _row == 0 && _col == 0 ) { resize ( 1 , a . size ()); data [ 0 ] = a ; return ; } data . push_back ( a ); _row = data . size (); } void push_col ( std :: vector < D > a ) { // checking size if ( a . size () != _row && _row != 0 && _col != 0 ) { throw std :: invalid_argument ( \"var::matrix::push_col -> Size doesnt match\" ); } else if ( _row == 0 && _col == 0 ) { resize ( a . size (), 1 ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ][ 0 ] = a [ i ]; } return ; } for ( int i = 0 ; i < _row ; i ++ ) { data [ i ]. push_back ( a [ i ]); } _col = data [ 0 ]. size (); // since all colums have same size } void insert_row ( int i , std :: vector < D > a ) { if ( a . size () != _col ) { throw std :: invalid_argument ( \"var::matrix::insert_row -> Size doesnt match\" ); } check_row ( i ); typename table < D >:: iterator it = data . begin (); std :: advance ( it , i ); data . insert ( it , a ); _row = data . size (); } void insert_col ( int j , std :: vector < D > a ) { if ( a . size () != _row ) { throw std :: invalid_argument ( \"var::matrix::insert_col -> Size doesnt match\" ); } check_col ( j ); typename std :: vector < D >:: iterator it ; for ( int i = 0 ; i < _row ; i ++ ) { it = data [ i ]. begin (); std :: advance ( it , j ); data [ i ]. insert ( it , a [ i ]); } _col = data [ 0 ]. size (); // since all colums have same size } void pop_row () { if ( _row == 0 ) { throw std :: invalid_argument ( \"var::matrix::pop_row -> No rows to remove\" ); } data . pop_back (); _row = data . size (); } void pop_col () { if ( _col == 0 ) { throw std :: invalid_argument ( \"var::matrix::pop_col -> No colums to remove\" ); } for ( int i = 0 ; i < _row ; i ++ ) { data [ i ]. pop_back (); } _col = data [ 0 ]. size (); } void erase_row ( int i ) { check_row ( i ); data . erase ( data . begin () + i ); _row = data . size (); } void erase_col ( int j ) { check_col ( j ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ]. erase ( data [ i ]. begin () + j ); } _col = data [ 0 ]. size (); } void row_swap ( int i1 , int i2 ) { check_row ( i1 ); check_row ( i2 ); auto temp = data [ i1 ]; data [ i1 ] = data [ i2 ]; data [ i2 ] = temp ; } void col_swap ( int j1 , int j2 ) { check_col ( j1 ); check_col ( j2 ); D temp = D (); for ( int i = 0 ; i < _row ; i ++ ) { temp = data [ i ][ j1 ]; data [ i ][ j1 ] = data [ i ][ j2 ]; data [ i ][ j2 ] = temp ; } } void replace_row ( int i , std :: vector < D > a ) { if ( a . size () != _row ) { throw std :: invalid_argument ( \"var::matrix::replace_row -> Size doesnt match\" ); } check_row ( i ); data [ i ] = a ; } void replace_col ( int j , std :: vector < D > a ) { if ( a . size () != _col ) { throw std :: invalid_argument ( \"var::matrix::replace_col -> Size doesnt match\" ); } check_col ( j ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ][ j ] = a [ i ]; } } void sort_rows ( int d = 1 ) { for ( int i = 0 ; i < _row ; i ++ ) { sort_row ( i , d ); } } void sort_cols ( int d = 1 ) { for ( int j = 0 ; j < _col ; j ++ ) { sort_col ( j , d ); } } void sort_row ( int i , int d = 1 ) { check_row ( i ); auto dec = []( int a , int b ) -> bool { return a > b ; }; if ( d == 1 ) { // accending std :: sort ( data [ i ]. begin (), data [ i ]. end ()); } else { // decending std :: sort ( data [ i ]. begin (), data [ i ]. end (), dec ); } } void sort_col ( int j , int d = 1 ) { check_col ( j ); data = TT (); // transpose sort_row ( j , d ); // sort transposed data = TT (); // transpose back } template < typename LAMBDA > void row_op ( int i , LAMBDA f ) { check_row ( i ); for ( int j = 0 ; j < _col ; j ++ ) { data [ i ][ j ] = f ( data [ i ][ j ]); } } template < typename LAMBDA > void col_op ( int j , LAMBDA f ) { check_col ( j ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ][ j ] = f ( data [ i ][ j ]); } } template < typename LAMBDA > void mat_op ( LAMBDA f ) { for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { data [ i ][ j ] = f ( data [ i ][ j ]); } } } void join_row ( matrix other ) { if ( other . col () != _col ) { throw std :: invalid_argument ( \"var::matrix::join_row -> Size mismatch\" ); } for ( int i = 0 ; i < other . row (); i ++ ) { push_row ( other . get_row ( i )); } } void join_col ( matrix other ) { if ( other . row () != _row ) { throw std :: invalid_argument ( \"var::matrix::join_col -> Size mismatch\" ); } for ( int j = 0 ; j < other . col (); j ++ ) { push_col ( other . get_col ( j )); } } void turn_to ( D n ) { for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { data [ i ][ j ] = n ; } } } D sum () { D SUM = D (); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { SUM += data [ i ][ j ]; } } return SUM ; } D tr () { square (); D sum = D (); for ( int i = 0 ; i < _row ; i ++ ) { sum += data [ i ][ i ]; } return sum ; } D det () { square (); return DET ( * this ); } matrix T () { matrix temp ; temp . resize ( _col , _row ); temp . data = TT (); return temp ; } matrix cofactor () { square (); matrix temp ( _row , _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { auto m = MM ( i , j , * this ); temp [ i ][ j ] = pow (( -1 ), ( i + j )) * m . det (); } } return temp ; } matrix M ( int i , int j ) { return MM ( i , j , * this ); } matrix adj () { square (); matrix temp = cofactor (); return temp . T (); } matrix inv () { square (); D detm = det (); if ( detm == 0 ) { throw std :: runtime_error ( \"var::matrix::inv -> Determinant is 0\" ); } return adj () / detm ; } matrix rref () { matrix temp = * this ; auto RREF = []( matrix & A ) -> void { int lead = 0 ; for ( int r = 0 ; r < A . row (); r ++ ) { if ( lead >= A . col ()) { return ; } int i = r ; while ( A [ i ][ lead ] == 0 ) { i ++ ; if ( i >= A . row ()) { i = r ; lead ++ ; if ( lead >= A . col ()) { return ; } } } A . row_swap ( i , r ); auto divide_row = [ & ]( matrix & B , int i , D v ) -> void { assert ( A [ r ][ lead ] != 0 ); for ( int j = 0 ; j < B . col (); j ++ ) { B [ i ][ j ] /= v ; } }; auto add_rows = []( matrix & B , int i , int k , D v ) -> void { for ( int j = 0 ; j < B . col (); j ++ ) { B [ i ][ j ] += v * B [ k ][ j ]; } }; divide_row ( A , r , A [ r ][ lead ]); for ( i = 0 ; i < A . row (); i ++ ) { if ( i != r ) { add_rows ( A , i , r , - A [ i ][ lead ]); } } } }; RREF ( temp ); return temp ; } matrix ref () { matrix temp = * this ; int nr = _row ; int nc = _col ; for ( int r = 0 ; r < nr ; r ++ ) { bool allZeros = true ; for ( int c = 0 ; c < nc ; c ++ ) { if ( temp . data [ r ][ c ] != D ( 0 )) { allZeros = false ; break ; } } if ( allZeros ) { nr -- ; temp . row_swap ( r , nr ); } } int p = 0 ; while ( p < nr && p < nc ) { nextPivot : int r = 1 ; while ( temp . data [ p ][ p ] == D ( 0 )) { if (( p + r ) <= nr ) { p ++ ; goto nextPivot ; } temp . row_swap ( p , ( p + r )); r ++ ; } for ( r = 1 ; r < ( nr - p ); r ++ ) { if ( temp . data [ p + r ][ p ] != D ( 0 )) { int x = - temp . data [ p + r ][ p ] / temp . data [ p ][ p ]; for ( int c = p ; c < nc ; c ++ ) { temp . data [ p + r ][ c ] = temp . data [ p ][ c ] * x + temp . data [ p + r ][ c ]; } } } p ++ ; } return temp ; } LU plu () { LU lu ; int n = fmax ( _col , _row ); lu . U . resize ( n , n ); lu . L . resize ( n , n ); lu . P . resize ( n , n ); matrix temp = * this ; auto f = [ & ]( LU & a , matrix b ) -> void { std :: vector < int > perm ( n ); std :: iota ( perm . begin (), perm . end (), 0 ); for ( int j = 0 ; j < n ; j ++ ) { int max_index = j ; D max_value = D ( 0 ); for ( int i = j ; i < n ; i ++ ) { D value = D ( std :: abs ( D ( b . data [ perm [ i ]][ j ]))); if ( value > max_value ) { max_index = i ; max_value = value ; } } if ( max_value <= std :: numeric_limits < D >:: epsilon ()) { throw std :: runtime_error ( \"var::matrix::plu -> Matrix is singular\" ); } if ( j != max_index ) { std :: swap ( perm [ j ], perm [ max_index ]); } int jj = perm [ j ]; for ( int i = j + 1 ; i < n ; i ++ ) { int ii = perm [ i ]; b . data [ ii ][ j ] /= b . data [ jj ][ j ]; for ( int k = j + 1 ; k < n ; k ++ ) { b . data [ ii ][ k ] -= b . data [ ii ][ j ] * b . data [ jj ][ k ]; } } } for ( int j = 0 ; j < n ; j ++ ) { a . L . data [ j ][ j ] = 1 ; for ( int i = j + 1 ; i < n ; i ++ ) { a . L . data [ i ][ j ] = b . data [ perm [ i ]][ j ]; } for ( int i = 0 ; i <= j ; i ++ ) { a . U . data [ i ][ j ] = b . data [ perm [ i ]][ j ]; } } for ( int i = 0 ; i < n ; i ++ ) { a . P . data [ i ][ perm [ i ]] = 1 ; } a . P = a . P . inv (); }; if ( ! is_square ()) { matrix eyed = lalg :: eye < D > ( n ); if ( n == _row ) { temp . join_col ( eyed ( 0 , _row , 0 , fabs ( _row - _col ))); f ( lu , temp ); for ( int i = 0 ; i < fabs ( _row - _col ); i ++ ) { lu . U . pop_col (); lu . L . pop_col (); lu . L . pop_row (); lu . P . pop_row (); lu . P . pop_col (); } } else { temp . join_row ( eyed ( 0 , fabs ( _row - _col ), 0 , _col )); f ( lu , temp ); for ( int i = 0 ; i < fabs ( _row - _col ); i ++ ) { lu . U . pop_row (); lu . L . pop_col (); lu . L . pop_row (); lu . P . pop_row (); lu . P . pop_col (); } } } else { f ( lu , temp ); } return lu ; } bool is_square () { return _row == _col ; } bool is_empty () { return data . empty (); } bool is_identity () { if ( is_square ()) { int count_zeros = 0 ; int count_ones = 0 ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( i == j && round ( data [ i ][ j ]) == D ( 1 )) { count_ones ++ ; } else if ( i != j && round ( data [ i ][ j ]) == D ( 0 )) { count_zeros ++ ; } } } if ( count_ones + count_zeros == _row * _col && count_ones == _row ) { return true ; } } return false ; } // ***************************** [] operator ************************** // Col operator []( int i ) { return Col ( * this , i ); } // ***************************** + operator ************************** // matrix operator + ( const matrix & other ) { check_size ( other . _row , other . _col ); matrix temp ( _row , _col ); temp . data = data ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] + other . data [ i ][ j ]; } } return temp ; } matrix operator + ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] + n ; } } return temp ; } friend matrix operator + ( D n , matrix & other ) { return other + n ; } void operator += ( matrix a ) { * this = * this + a ; } void operator += ( D a ) { matrix temp = * this ; temp . turn_to ( a ); * this += temp ; } void operator ++ ( int a ) { * this += D ( 1 ); } // ***************************** - operator ************************** // matrix operator - () { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = - data [ i ][ j ]; } } return temp ; } matrix operator - ( const matrix & other ) { check_size ( other . _row , other . _col ); matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] - other . data [ i ][ j ]; } } return temp ; } matrix operator - ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] - n ; } } return temp ; } friend matrix operator - ( D n , matrix & other ) { matrix temp = - other ; return n + temp ; } void operator -= ( matrix a ) { * this = * this - a ; } void operator -= ( D a ) { matrix temp = * this ; temp . turn_to ( a ); * this -= temp ; } void operator -- ( int a ) { * this -= D ( 1 ); } // ***************************** * operator ************************** // matrix operator * ( const matrix & other ) { // condition if ( _row != other . _col && _col != other . _row ) { throw std :: invalid_argument ( \"var::matrix::operator * -> Size mismatch\" ); } auto SUM = [ this , other ]( int i , int j ) -> D { D summ = D (); for ( int k = 0 ; k < _col ; k ++ ) { summ += data [ i ][ k ] * other . data [ k ][ j ]; } return summ ; }; matrix temp ( _row , other . _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < other . _col ; j ++ ) { temp . data [ i ][ j ] = SUM ( i , j ); } } return temp ; } matrix operator * ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] * n ; } } return temp ; } matrix mathmul ( const matrix & other ) { // condition check_size ( other . _row , other . _col ); matrix temp ( _row , _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] * other . data [ i ][ j ]; } } return temp ; } friend matrix operator * ( D n , matrix & other ) { return other * n ; } // ***************************** / operator ************************** // matrix operator / ( matrix & other ) { matrix temp = * this * other . inv (); return temp ; } matrix operator / ( D n ) { matrix temp ( _row , _col ); temp . data = data ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] / n ; } } return temp ; } matrix mathdiv ( const matrix & other ) { check_size ( other . _row , other . _col ); matrix temp ( _row , _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] / other . data [ i ][ j ]; } } return temp ; } friend matrix operator / ( D n , matrix & other ) { matrix temp = other ; for ( int i = 0 ; i < other . _row ; i ++ ) { for ( int j = 0 ; j < other . _col ; j ++ ) { assert ( temp . data [ i ][ j ] > D ( 0 )); temp . data [ i ][ j ] = n / temp . data [ i ][ j ]; } } return temp ; } // ***************************** () operator ************************** // matrix operator ()( int i1 , int i2 ) { check_row ( i1 ); check_row ( i2 - 1 ); matrix temp ; for ( int i = i1 ; i < i2 ; i ++ ) { temp . push_row ( get_row ( i )); } return temp ; } std :: vector < D > operator ()( int i , int j1 , int j2 ) { check_row ( i ); check_col ( j1 ); check_col ( j2 - 1 ); std :: vector < D > temp ; for ( int j = j1 ; j < j2 ; j ++ ) { temp . push_back ( data [ i ][ j ]); } return temp ; } matrix operator ()( int i1 , int i2 , int j1 , int j2 ) { check_row ( i1 ); check_row ( i2 - 1 ); check_col ( j1 ); check_col ( j2 - 1 ); matrix temp ; if ( i2 == i1 ) { temp . resize ( 1 , j2 - j1 ); } else if ( j2 == j1 ) { temp . resize ( i2 - i1 , 1 ); } else if ( i2 == i1 && j2 == j1 ) { temp . resize ( 1 , 1 ); } else { temp . resize ( i2 - i1 , j2 - j1 ); } for ( int i = i1 ; i < i2 ; i ++ ) { for ( int j = j1 ; j < j2 ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ]; } } return temp ; } // *********************** conditional operators ******************** // bool operator == ( matrix other ) { check_size ( other . _row , other . _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( other . data [ i ][ j ] != data [ i ][ j ]) { return false ; } } } return true ; } bool operator < ( matrix other ) { if ( other . _col != _col || other . _row != _row ) { return false ; } for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( data [ i ][ j ] >= other . data [ i ][ j ]) { return false ; } } } return true ; } bool operator <= ( matrix other ) { check_size ( other . _row , other . _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( data [ i ][ j ] > other . data [ i ][ j ]) { return false ; } } } return true ; } bool operator > ( matrix other ) { return ! ( * this <= other ); } bool operator >= ( matrix other ) { return ! ( * this < other ); } bool operator != ( matrix other ) { return ! ( * this == other ); } // ***************************** % operator ************************** // matrix operator % ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] % n ; } } return temp ; } // ************************* stream operator ************************ // friend std :: ostream & operator << ( std :: ostream & out , const matrix & other ) { for ( int i = 0 ; i < other . _row ; i ++ ) { for ( int j = 0 ; j < other . _col ; j ++ ) { out << other . data [ i ][ j ]; if ( j < other . _col - 1 ) { out << \",\" ; } } if ( i != other . _row - 1 ) { out << \" \\n \" ; } } return out ; } friend std :: istream & operator >> ( std :: istream & input , matrix & other ) { std :: vector < D > temp ; other . resize ( 0 , 0 ); while ( input . good ()) { input >> temp ; if ( input . eof ()) { break ; } other . push_row ( temp ); temp . clear (); } return input ; } }; }; Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/matrix.hpp"},{"location":"doxygen/Files/matrix_8hpp/#includesvariablesmatrixhpp","text":"Implementation and declaration of matrix class. More...","title":"includes/variables/matrix.hpp"},{"location":"doxygen/Files/matrix_8hpp/#namespaces","text":"Name var Namespace that contains all variable data types.","title":"Namespaces"},{"location":"doxygen/Files/matrix_8hpp/#classes","text":"Name class var::matrix Class for 2d matrix of objects. struct var::matrix::LU Struct for PLU decomposition.","title":"Classes"},{"location":"doxygen/Files/matrix_8hpp/#detailed-description","text":"Implementation and declaration of matrix class. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/matrix_8hpp/#source-code","text":"#pragma once #include \"../mcpp.hpp\" #include <algorithm> #include <cmath> #include <limits> #include <numeric> #include <cassert> // TODO: change code and inherit from table.hpp namespace var { template < typename D > class matrix { protected : class Col { private : matrix & _a ; int _i ; public : Col ( matrix & a , int i ) : _a ( a ), _i ( i ) {} D & operator []( int j ) { return _a . data [ _i ][ j ]; } }; template < typename T > using table = std :: vector < std :: vector < T >> ; void check_col ( int j ) { if ( j < 0 || j >= _col ) { throw std :: out_of_range ( \"var::matrix::check_col -> Col index is out of range\" ); } } void check_row ( int i ) { if ( i < 0 || i >= _row ) { throw std :: out_of_range ( \"var::matrix::check_row -> Row index is out of range\" ); } } table < D > TT () { // temps std :: vector < D > temp_col ; table < D > temp ; // reversing rows with colums for ( int i = 0 ; i < _col ; i ++ ) { temp_col . clear (); for ( int j = 0 ; j < _row ; j ++ ) { temp_col . push_back ( data [ j ][ i ]); } temp . push_back ( temp_col ); } // applying to data variable return temp ; } void check_size ( int r , int c ) { if ( c != _col || r != _row ) { throw std :: invalid_argument ( \"var::matrix::check_size -> Size mismatch\" ); } } matrix MM ( int i , int j , matrix & other ) { matrix b ( other . row () - 1 , other . col () - 1 ); int r = 0 ; int c = 0 ; for ( int ii = 0 ; ii < other . row (); ii ++ ) { for ( int jj = 0 ; jj < other . col (); jj ++ ) { if ( ii != i && jj != j ) { b [ r ][ c ] = other [ ii ][ jj ]; c ++ ; } } c = 0 ; if ( ii != i ) { r ++ ; } } return b ; } D DET ( matrix a ) { // 2x2 determinant if ( a . col () == 2 ) { return ( a [ 0 ][ 0 ] * a [ 1 ][ 1 ]) - ( a [ 1 ][ 0 ] * a [ 0 ][ 1 ]); } // n by n D sum = D (); for ( int j = 0 ; j < a . col (); j ++ ) { sum += a [ 0 ][ j ] * std :: pow (( -1 ), 0 + j ) * DET ( MM ( 0 , j , a )); } return sum ; } void square () { if ( ! is_square ()) { throw std :: invalid_argument ( \"var::matrix::square -> Matrix is not a square\" ); } } private : table < D > data ; int _row ; int _col ; public : struct LU { matrix L ; matrix U ; matrix P ; }; matrix ( int r , int c ) { resize ( r , c ); } matrix () : _row ( 0 ), _col ( 0 ) {} matrix ( std :: initializer_list < std :: initializer_list < D >> a ) { _row = a . size (); _col = a . begin () -> size (); std :: vector < D > vect_row ; for ( auto & i : a ) { vect_row . clear (); for ( auto & j : i ) { vect_row . push_back ( j ); } data . push_back ( vect_row ); } } int row () { return _row ; } int col () { return _col ; } int size () { return _col * _row ; } auto begin () { return data . begin (); } auto end () { return data . end (); } auto begin () const { return data . begin (); } auto end () const { return data . end (); } D get_element ( int i , int j ) { check_row ( i ); check_col ( j ); return data [ i ][ j ]; } std :: vector < D > get_row ( int i ) { check_row ( i ); return data [ i ]; } std :: vector < D > get_col ( int j ) { check_col ( j ); std :: vector < D > temp ; for ( int i = 0 ; i < _row ; i ++ ) { temp . push_back ( data [ i ][ j ]); } return temp ; } void resize ( int r , int c ) { // checking if ( r < 0 || c < 0 ) { throw std :: invalid_argument ( \"var::matrix::resize -> Invalid values\" ); } _row = r ; _col = c ; data . clear (); for ( int i = 0 ; i < _row ; i ++ ) { data . push_back ( std :: vector < D > ( _col )); } } void push_row ( std :: vector < D > a ) { // checking size if ( a . size () != _col && _row != 0 && _col != 0 ) { throw std :: invalid_argument ( \"var::matrix::push_row -> Size doesnt match\" ); } else if ( _row == 0 && _col == 0 ) { resize ( 1 , a . size ()); data [ 0 ] = a ; return ; } data . push_back ( a ); _row = data . size (); } void push_col ( std :: vector < D > a ) { // checking size if ( a . size () != _row && _row != 0 && _col != 0 ) { throw std :: invalid_argument ( \"var::matrix::push_col -> Size doesnt match\" ); } else if ( _row == 0 && _col == 0 ) { resize ( a . size (), 1 ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ][ 0 ] = a [ i ]; } return ; } for ( int i = 0 ; i < _row ; i ++ ) { data [ i ]. push_back ( a [ i ]); } _col = data [ 0 ]. size (); // since all colums have same size } void insert_row ( int i , std :: vector < D > a ) { if ( a . size () != _col ) { throw std :: invalid_argument ( \"var::matrix::insert_row -> Size doesnt match\" ); } check_row ( i ); typename table < D >:: iterator it = data . begin (); std :: advance ( it , i ); data . insert ( it , a ); _row = data . size (); } void insert_col ( int j , std :: vector < D > a ) { if ( a . size () != _row ) { throw std :: invalid_argument ( \"var::matrix::insert_col -> Size doesnt match\" ); } check_col ( j ); typename std :: vector < D >:: iterator it ; for ( int i = 0 ; i < _row ; i ++ ) { it = data [ i ]. begin (); std :: advance ( it , j ); data [ i ]. insert ( it , a [ i ]); } _col = data [ 0 ]. size (); // since all colums have same size } void pop_row () { if ( _row == 0 ) { throw std :: invalid_argument ( \"var::matrix::pop_row -> No rows to remove\" ); } data . pop_back (); _row = data . size (); } void pop_col () { if ( _col == 0 ) { throw std :: invalid_argument ( \"var::matrix::pop_col -> No colums to remove\" ); } for ( int i = 0 ; i < _row ; i ++ ) { data [ i ]. pop_back (); } _col = data [ 0 ]. size (); } void erase_row ( int i ) { check_row ( i ); data . erase ( data . begin () + i ); _row = data . size (); } void erase_col ( int j ) { check_col ( j ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ]. erase ( data [ i ]. begin () + j ); } _col = data [ 0 ]. size (); } void row_swap ( int i1 , int i2 ) { check_row ( i1 ); check_row ( i2 ); auto temp = data [ i1 ]; data [ i1 ] = data [ i2 ]; data [ i2 ] = temp ; } void col_swap ( int j1 , int j2 ) { check_col ( j1 ); check_col ( j2 ); D temp = D (); for ( int i = 0 ; i < _row ; i ++ ) { temp = data [ i ][ j1 ]; data [ i ][ j1 ] = data [ i ][ j2 ]; data [ i ][ j2 ] = temp ; } } void replace_row ( int i , std :: vector < D > a ) { if ( a . size () != _row ) { throw std :: invalid_argument ( \"var::matrix::replace_row -> Size doesnt match\" ); } check_row ( i ); data [ i ] = a ; } void replace_col ( int j , std :: vector < D > a ) { if ( a . size () != _col ) { throw std :: invalid_argument ( \"var::matrix::replace_col -> Size doesnt match\" ); } check_col ( j ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ][ j ] = a [ i ]; } } void sort_rows ( int d = 1 ) { for ( int i = 0 ; i < _row ; i ++ ) { sort_row ( i , d ); } } void sort_cols ( int d = 1 ) { for ( int j = 0 ; j < _col ; j ++ ) { sort_col ( j , d ); } } void sort_row ( int i , int d = 1 ) { check_row ( i ); auto dec = []( int a , int b ) -> bool { return a > b ; }; if ( d == 1 ) { // accending std :: sort ( data [ i ]. begin (), data [ i ]. end ()); } else { // decending std :: sort ( data [ i ]. begin (), data [ i ]. end (), dec ); } } void sort_col ( int j , int d = 1 ) { check_col ( j ); data = TT (); // transpose sort_row ( j , d ); // sort transposed data = TT (); // transpose back } template < typename LAMBDA > void row_op ( int i , LAMBDA f ) { check_row ( i ); for ( int j = 0 ; j < _col ; j ++ ) { data [ i ][ j ] = f ( data [ i ][ j ]); } } template < typename LAMBDA > void col_op ( int j , LAMBDA f ) { check_col ( j ); for ( int i = 0 ; i < _row ; i ++ ) { data [ i ][ j ] = f ( data [ i ][ j ]); } } template < typename LAMBDA > void mat_op ( LAMBDA f ) { for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { data [ i ][ j ] = f ( data [ i ][ j ]); } } } void join_row ( matrix other ) { if ( other . col () != _col ) { throw std :: invalid_argument ( \"var::matrix::join_row -> Size mismatch\" ); } for ( int i = 0 ; i < other . row (); i ++ ) { push_row ( other . get_row ( i )); } } void join_col ( matrix other ) { if ( other . row () != _row ) { throw std :: invalid_argument ( \"var::matrix::join_col -> Size mismatch\" ); } for ( int j = 0 ; j < other . col (); j ++ ) { push_col ( other . get_col ( j )); } } void turn_to ( D n ) { for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { data [ i ][ j ] = n ; } } } D sum () { D SUM = D (); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { SUM += data [ i ][ j ]; } } return SUM ; } D tr () { square (); D sum = D (); for ( int i = 0 ; i < _row ; i ++ ) { sum += data [ i ][ i ]; } return sum ; } D det () { square (); return DET ( * this ); } matrix T () { matrix temp ; temp . resize ( _col , _row ); temp . data = TT (); return temp ; } matrix cofactor () { square (); matrix temp ( _row , _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { auto m = MM ( i , j , * this ); temp [ i ][ j ] = pow (( -1 ), ( i + j )) * m . det (); } } return temp ; } matrix M ( int i , int j ) { return MM ( i , j , * this ); } matrix adj () { square (); matrix temp = cofactor (); return temp . T (); } matrix inv () { square (); D detm = det (); if ( detm == 0 ) { throw std :: runtime_error ( \"var::matrix::inv -> Determinant is 0\" ); } return adj () / detm ; } matrix rref () { matrix temp = * this ; auto RREF = []( matrix & A ) -> void { int lead = 0 ; for ( int r = 0 ; r < A . row (); r ++ ) { if ( lead >= A . col ()) { return ; } int i = r ; while ( A [ i ][ lead ] == 0 ) { i ++ ; if ( i >= A . row ()) { i = r ; lead ++ ; if ( lead >= A . col ()) { return ; } } } A . row_swap ( i , r ); auto divide_row = [ & ]( matrix & B , int i , D v ) -> void { assert ( A [ r ][ lead ] != 0 ); for ( int j = 0 ; j < B . col (); j ++ ) { B [ i ][ j ] /= v ; } }; auto add_rows = []( matrix & B , int i , int k , D v ) -> void { for ( int j = 0 ; j < B . col (); j ++ ) { B [ i ][ j ] += v * B [ k ][ j ]; } }; divide_row ( A , r , A [ r ][ lead ]); for ( i = 0 ; i < A . row (); i ++ ) { if ( i != r ) { add_rows ( A , i , r , - A [ i ][ lead ]); } } } }; RREF ( temp ); return temp ; } matrix ref () { matrix temp = * this ; int nr = _row ; int nc = _col ; for ( int r = 0 ; r < nr ; r ++ ) { bool allZeros = true ; for ( int c = 0 ; c < nc ; c ++ ) { if ( temp . data [ r ][ c ] != D ( 0 )) { allZeros = false ; break ; } } if ( allZeros ) { nr -- ; temp . row_swap ( r , nr ); } } int p = 0 ; while ( p < nr && p < nc ) { nextPivot : int r = 1 ; while ( temp . data [ p ][ p ] == D ( 0 )) { if (( p + r ) <= nr ) { p ++ ; goto nextPivot ; } temp . row_swap ( p , ( p + r )); r ++ ; } for ( r = 1 ; r < ( nr - p ); r ++ ) { if ( temp . data [ p + r ][ p ] != D ( 0 )) { int x = - temp . data [ p + r ][ p ] / temp . data [ p ][ p ]; for ( int c = p ; c < nc ; c ++ ) { temp . data [ p + r ][ c ] = temp . data [ p ][ c ] * x + temp . data [ p + r ][ c ]; } } } p ++ ; } return temp ; } LU plu () { LU lu ; int n = fmax ( _col , _row ); lu . U . resize ( n , n ); lu . L . resize ( n , n ); lu . P . resize ( n , n ); matrix temp = * this ; auto f = [ & ]( LU & a , matrix b ) -> void { std :: vector < int > perm ( n ); std :: iota ( perm . begin (), perm . end (), 0 ); for ( int j = 0 ; j < n ; j ++ ) { int max_index = j ; D max_value = D ( 0 ); for ( int i = j ; i < n ; i ++ ) { D value = D ( std :: abs ( D ( b . data [ perm [ i ]][ j ]))); if ( value > max_value ) { max_index = i ; max_value = value ; } } if ( max_value <= std :: numeric_limits < D >:: epsilon ()) { throw std :: runtime_error ( \"var::matrix::plu -> Matrix is singular\" ); } if ( j != max_index ) { std :: swap ( perm [ j ], perm [ max_index ]); } int jj = perm [ j ]; for ( int i = j + 1 ; i < n ; i ++ ) { int ii = perm [ i ]; b . data [ ii ][ j ] /= b . data [ jj ][ j ]; for ( int k = j + 1 ; k < n ; k ++ ) { b . data [ ii ][ k ] -= b . data [ ii ][ j ] * b . data [ jj ][ k ]; } } } for ( int j = 0 ; j < n ; j ++ ) { a . L . data [ j ][ j ] = 1 ; for ( int i = j + 1 ; i < n ; i ++ ) { a . L . data [ i ][ j ] = b . data [ perm [ i ]][ j ]; } for ( int i = 0 ; i <= j ; i ++ ) { a . U . data [ i ][ j ] = b . data [ perm [ i ]][ j ]; } } for ( int i = 0 ; i < n ; i ++ ) { a . P . data [ i ][ perm [ i ]] = 1 ; } a . P = a . P . inv (); }; if ( ! is_square ()) { matrix eyed = lalg :: eye < D > ( n ); if ( n == _row ) { temp . join_col ( eyed ( 0 , _row , 0 , fabs ( _row - _col ))); f ( lu , temp ); for ( int i = 0 ; i < fabs ( _row - _col ); i ++ ) { lu . U . pop_col (); lu . L . pop_col (); lu . L . pop_row (); lu . P . pop_row (); lu . P . pop_col (); } } else { temp . join_row ( eyed ( 0 , fabs ( _row - _col ), 0 , _col )); f ( lu , temp ); for ( int i = 0 ; i < fabs ( _row - _col ); i ++ ) { lu . U . pop_row (); lu . L . pop_col (); lu . L . pop_row (); lu . P . pop_row (); lu . P . pop_col (); } } } else { f ( lu , temp ); } return lu ; } bool is_square () { return _row == _col ; } bool is_empty () { return data . empty (); } bool is_identity () { if ( is_square ()) { int count_zeros = 0 ; int count_ones = 0 ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( i == j && round ( data [ i ][ j ]) == D ( 1 )) { count_ones ++ ; } else if ( i != j && round ( data [ i ][ j ]) == D ( 0 )) { count_zeros ++ ; } } } if ( count_ones + count_zeros == _row * _col && count_ones == _row ) { return true ; } } return false ; } // ***************************** [] operator ************************** // Col operator []( int i ) { return Col ( * this , i ); } // ***************************** + operator ************************** // matrix operator + ( const matrix & other ) { check_size ( other . _row , other . _col ); matrix temp ( _row , _col ); temp . data = data ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] + other . data [ i ][ j ]; } } return temp ; } matrix operator + ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] + n ; } } return temp ; } friend matrix operator + ( D n , matrix & other ) { return other + n ; } void operator += ( matrix a ) { * this = * this + a ; } void operator += ( D a ) { matrix temp = * this ; temp . turn_to ( a ); * this += temp ; } void operator ++ ( int a ) { * this += D ( 1 ); } // ***************************** - operator ************************** // matrix operator - () { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = - data [ i ][ j ]; } } return temp ; } matrix operator - ( const matrix & other ) { check_size ( other . _row , other . _col ); matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] - other . data [ i ][ j ]; } } return temp ; } matrix operator - ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] - n ; } } return temp ; } friend matrix operator - ( D n , matrix & other ) { matrix temp = - other ; return n + temp ; } void operator -= ( matrix a ) { * this = * this - a ; } void operator -= ( D a ) { matrix temp = * this ; temp . turn_to ( a ); * this -= temp ; } void operator -- ( int a ) { * this -= D ( 1 ); } // ***************************** * operator ************************** // matrix operator * ( const matrix & other ) { // condition if ( _row != other . _col && _col != other . _row ) { throw std :: invalid_argument ( \"var::matrix::operator * -> Size mismatch\" ); } auto SUM = [ this , other ]( int i , int j ) -> D { D summ = D (); for ( int k = 0 ; k < _col ; k ++ ) { summ += data [ i ][ k ] * other . data [ k ][ j ]; } return summ ; }; matrix temp ( _row , other . _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < other . _col ; j ++ ) { temp . data [ i ][ j ] = SUM ( i , j ); } } return temp ; } matrix operator * ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] * n ; } } return temp ; } matrix mathmul ( const matrix & other ) { // condition check_size ( other . _row , other . _col ); matrix temp ( _row , _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] * other . data [ i ][ j ]; } } return temp ; } friend matrix operator * ( D n , matrix & other ) { return other * n ; } // ***************************** / operator ************************** // matrix operator / ( matrix & other ) { matrix temp = * this * other . inv (); return temp ; } matrix operator / ( D n ) { matrix temp ( _row , _col ); temp . data = data ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] / n ; } } return temp ; } matrix mathdiv ( const matrix & other ) { check_size ( other . _row , other . _col ); matrix temp ( _row , _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] / other . data [ i ][ j ]; } } return temp ; } friend matrix operator / ( D n , matrix & other ) { matrix temp = other ; for ( int i = 0 ; i < other . _row ; i ++ ) { for ( int j = 0 ; j < other . _col ; j ++ ) { assert ( temp . data [ i ][ j ] > D ( 0 )); temp . data [ i ][ j ] = n / temp . data [ i ][ j ]; } } return temp ; } // ***************************** () operator ************************** // matrix operator ()( int i1 , int i2 ) { check_row ( i1 ); check_row ( i2 - 1 ); matrix temp ; for ( int i = i1 ; i < i2 ; i ++ ) { temp . push_row ( get_row ( i )); } return temp ; } std :: vector < D > operator ()( int i , int j1 , int j2 ) { check_row ( i ); check_col ( j1 ); check_col ( j2 - 1 ); std :: vector < D > temp ; for ( int j = j1 ; j < j2 ; j ++ ) { temp . push_back ( data [ i ][ j ]); } return temp ; } matrix operator ()( int i1 , int i2 , int j1 , int j2 ) { check_row ( i1 ); check_row ( i2 - 1 ); check_col ( j1 ); check_col ( j2 - 1 ); matrix temp ; if ( i2 == i1 ) { temp . resize ( 1 , j2 - j1 ); } else if ( j2 == j1 ) { temp . resize ( i2 - i1 , 1 ); } else if ( i2 == i1 && j2 == j1 ) { temp . resize ( 1 , 1 ); } else { temp . resize ( i2 - i1 , j2 - j1 ); } for ( int i = i1 ; i < i2 ; i ++ ) { for ( int j = j1 ; j < j2 ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ]; } } return temp ; } // *********************** conditional operators ******************** // bool operator == ( matrix other ) { check_size ( other . _row , other . _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( other . data [ i ][ j ] != data [ i ][ j ]) { return false ; } } } return true ; } bool operator < ( matrix other ) { if ( other . _col != _col || other . _row != _row ) { return false ; } for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( data [ i ][ j ] >= other . data [ i ][ j ]) { return false ; } } } return true ; } bool operator <= ( matrix other ) { check_size ( other . _row , other . _col ); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( data [ i ][ j ] > other . data [ i ][ j ]) { return false ; } } } return true ; } bool operator > ( matrix other ) { return ! ( * this <= other ); } bool operator >= ( matrix other ) { return ! ( * this < other ); } bool operator != ( matrix other ) { return ! ( * this == other ); } // ***************************** % operator ************************** // matrix operator % ( D n ) { matrix temp = * this ; for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { temp . data [ i ][ j ] = data [ i ][ j ] % n ; } } return temp ; } // ************************* stream operator ************************ // friend std :: ostream & operator << ( std :: ostream & out , const matrix & other ) { for ( int i = 0 ; i < other . _row ; i ++ ) { for ( int j = 0 ; j < other . _col ; j ++ ) { out << other . data [ i ][ j ]; if ( j < other . _col - 1 ) { out << \",\" ; } } if ( i != other . _row - 1 ) { out << \" \\n \" ; } } return out ; } friend std :: istream & operator >> ( std :: istream & input , matrix & other ) { std :: vector < D > temp ; other . resize ( 0 , 0 ); while ( input . good ()) { input >> temp ; if ( input . eof ()) { break ; } other . push_row ( temp ); temp . clear (); } return input ; } }; }; Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/mcpp_8hpp/","text":"includes/mcpp.hpp Namespaces Name var Namespace that contains all variable data types. lalg Contains functions related to matrices and linear algebra. Functions Name template <typename D > var::matrix < D > eye (int n) Produeces identity matrix of length n template <typename D > var::matrix < D > perms (D a, D b) Functions Documentation function eye template < typename D > var :: matrix < D > eye ( int n ) Produeces identity matrix of length n Parameters : n Template Parameters : D Return : var::matrix<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function perms template < typename D > var :: matrix < D > perms ( D a , D b ) Source code #pragma once // foward declarations namespace var { template < typename D > class table ; template < typename D > class matrix ; template < typename D > class point ; template < typename D > class tree ; } namespace lalg { template < typename D > var :: matrix < D > eye ( int n ); template < typename D > var :: matrix < D > perms ( D a , D b ); } #include \"mathematic/mathematic.hpp\" #include \"numerical/vect.hpp\" #include \"variables/others.hpp\" #include \"variables/table.hpp\" #include \"variables/matrix.hpp\" #include \"variables/point.hpp\" #include \"variables/tree.hpp\" #include \"variables/vecop.hpp\" #include \"algebra/solvers.hpp\" #include \"numerical/linear.hpp\" #include \"statistics/stat.hpp\" #include \"calculus/differential.hpp\" #include \"calculus/integral.hpp\" #include \"communication/signals.hpp\" Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/mcpp.hpp"},{"location":"doxygen/Files/mcpp_8hpp/#includesmcpphpp","text":"","title":"includes/mcpp.hpp"},{"location":"doxygen/Files/mcpp_8hpp/#namespaces","text":"Name var Namespace that contains all variable data types. lalg Contains functions related to matrices and linear algebra.","title":"Namespaces"},{"location":"doxygen/Files/mcpp_8hpp/#functions","text":"Name template <typename D > var::matrix < D > eye (int n) Produeces identity matrix of length n template <typename D > var::matrix < D > perms (D a, D b)","title":"Functions"},{"location":"doxygen/Files/mcpp_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/mcpp_8hpp/#function-eye","text":"template < typename D > var :: matrix < D > eye ( int n ) Produeces identity matrix of length n Parameters : n Template Parameters : D Return : var::matrix<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function eye"},{"location":"doxygen/Files/mcpp_8hpp/#function-perms","text":"template < typename D > var :: matrix < D > perms ( D a , D b )","title":"function perms"},{"location":"doxygen/Files/mcpp_8hpp/#source-code","text":"#pragma once // foward declarations namespace var { template < typename D > class table ; template < typename D > class matrix ; template < typename D > class point ; template < typename D > class tree ; } namespace lalg { template < typename D > var :: matrix < D > eye ( int n ); template < typename D > var :: matrix < D > perms ( D a , D b ); } #include \"mathematic/mathematic.hpp\" #include \"numerical/vect.hpp\" #include \"variables/others.hpp\" #include \"variables/table.hpp\" #include \"variables/matrix.hpp\" #include \"variables/point.hpp\" #include \"variables/tree.hpp\" #include \"variables/vecop.hpp\" #include \"algebra/solvers.hpp\" #include \"numerical/linear.hpp\" #include \"statistics/stat.hpp\" #include \"calculus/differential.hpp\" #include \"calculus/integral.hpp\" #include \"communication/signals.hpp\" Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/others_8hpp/","text":"includes/variables/others.hpp Contains other data structures. More... Namespaces Name var Namespace that contains all variable data types. Classes Name struct var::QR Struct to contain the quartile range. Detailed Description Contains other data structures. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 14/08/2022 Copyright : Copyright (c) 2022 Source code #pragma once namespace var { template < typename D > struct QR { D LQ ; D Q1 ; D Q2 ; D Q3 ; D UQ ; }; } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/others.hpp"},{"location":"doxygen/Files/others_8hpp/#includesvariablesothershpp","text":"Contains other data structures. More...","title":"includes/variables/others.hpp"},{"location":"doxygen/Files/others_8hpp/#namespaces","text":"Name var Namespace that contains all variable data types.","title":"Namespaces"},{"location":"doxygen/Files/others_8hpp/#classes","text":"Name struct var::QR Struct to contain the quartile range.","title":"Classes"},{"location":"doxygen/Files/others_8hpp/#detailed-description","text":"Contains other data structures. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 14/08/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/others_8hpp/#source-code","text":"#pragma once namespace var { template < typename D > struct QR { D LQ ; D Q1 ; D Q2 ; D Q3 ; D UQ ; }; } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/point_8hpp/","text":"includes/variables/point.hpp Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/point.hpp"},{"location":"doxygen/Files/point_8hpp/#includesvariablespointhpp","text":"Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/point.hpp"},{"location":"doxygen/Files/signals_8hpp/","text":"includes/communication/signals.hpp Contains functions relating to signal processing. More... Namespaces Name sig All communication theory and signal processing functions. Detailed Description Contains functions relating to signal processing. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022 Source code namespace sig { } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/communication/signals.hpp"},{"location":"doxygen/Files/signals_8hpp/#includescommunicationsignalshpp","text":"Contains functions relating to signal processing. More...","title":"includes/communication/signals.hpp"},{"location":"doxygen/Files/signals_8hpp/#namespaces","text":"Name sig All communication theory and signal processing functions.","title":"Namespaces"},{"location":"doxygen/Files/signals_8hpp/#detailed-description","text":"Contains functions relating to signal processing. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/signals_8hpp/#source-code","text":"namespace sig { } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/solvers_8hpp/","text":"includes/algebra/solvers.hpp Implementation and declaration of arithemtic solvers functions. More... Namespaces Name alg Arithematic functions and solvers. Classes Name struct alg::ans Functions Name template <typename D ,typename LAMBDA > std::vector< D > root (LAMBDA f, D tol =D(1000)) template <typename D ,typename LAMBDA > std::vector< D > newton_root (LAMBDA f, D x0) template <typename D > ans< D > poly_root (int n, std::vector< D > a) template <typename D > D linear_root (std::vector< D > eq) Linear root through inputing Ax+C such that it is represented as vector {A, C}. template <typename D ,typename LAMBDA > D bisection_root (LAMBDA f, D min, D max, D tol =D(0.00001)) Used to get real roots through bisection method. template <typename D > std::vector< D > linear_sim ( var::matrix < D > eq) Solves a system of linear equations expressed as a matrix. Detailed Description Implementation and declaration of arithemtic solvers functions. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022 Functions Documentation function root template < typename D , typename LAMBDA > std :: vector < D > root ( LAMBDA f , D tol = D ( 1000 ) ) function newton_root template < typename D , typename LAMBDA > std :: vector < D > newton_root ( LAMBDA f , D x0 ) function poly_root template < typename D > ans < D > poly_root ( int n , std :: vector < D > a ) function linear_root template < typename D > D linear_root ( std :: vector < D > eq ) Linear root through inputing Ax+C such that it is represented as vector {A, C}. Parameters : eq Template Parameters : D Return : D Usage : // answer of x+2 = 0; auto ans = linear ({ 1 , 2 }); function bisection_root template < typename D , typename LAMBDA > D bisection_root ( LAMBDA f , D min , D max , D tol = D ( 0.00001 ) ) Used to get real roots through bisection method. Parameters : f function min minimum value max maximum value tol tolerance Template Parameters : D LAMBDA Return : D Usage : // roots between -5 and -1 auto ans = bisection_root < double > ( f , -5.0 , -1.0 ); Exception Will throw exceptions as follows: stdruntime_error \\(\\rightarrow \\min\\) is not smaller than \\(\\max\\) `stdlogic_error \\(\\rightarrow \\text{sign}(f(\\min)) == \\text{sign}(f(\\max))\\) which means solution doesn't exist function linear_sim template < typename D > std :: vector < D > linear_sim ( var :: matrix < D > eq ) Solves a system of linear equations expressed as a matrix. Parameters : eq matrix Template Parameters : D Return : std::vector Representing the input \\[ \\displaylines{\\underbrace{\\left[\\begin{array} \\ a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\\\ \\end{array}\\right]}_A \\ \\underbrace{\\left[\\begin{array} \\ x_1 \\\\ x_2 \\\\ x_3 \\\\ \\end{array}\\right]}_x = \\underbrace{\\left[\\begin{array} \\ d_1 \\\\ d_2 \\\\ d_3 \\end{array}\\right]}_b \\\\ eq = \\left[\\begin{array}{rrr:r} a_1 & b_1 & c_1 & d_1 \\\\ a_2 & b_2 & c_2 & d_2 \\\\ a_3 & b_3 & c_3 & d_3 \\\\ \\end{array}\\right]} \\] Source code #pragma once #include \"../mcpp.hpp\" namespace alg { template < typename D , typename LAMBDA > std :: vector < D > root ( LAMBDA f , D tol = D ( 1000 )) { } template < typename D , typename LAMBDA > std :: vector < D > newton_root ( LAMBDA f , D x0 ) { } template < typename D > struct ans { std :: vector < D > real ; std :: vector < std :: complex < D >> imag ; }; template < typename D > ans < D > poly_root ( int n , std :: vector < D > a ) { } template < typename D > D linear_root ( std :: vector < D > eq ) { if ( eq . size () > 2 ) { throw std :: invalid_argument ( \"alg::slv::linear_root -> Vector is more than 2\" ); } return ( - eq [ 1 ] / eq [ 0 ]); } template < typename D , typename LAMBDA > D bisection_root ( LAMBDA f , D min , D max , D tol = D ( 0.00001 )) { auto check = [ & ]( D a , D b ) -> bool { return ( a < b && ( f ( a ) * f ( b )) < D ( 0 )); }; auto mid = [ & ]( D a , D b ) -> D { return (( a + b ) / D ( 2 )); }; if ( min >= max ) { throw std :: runtime_error ( \"alg::bisection_root -> min is not smaller than max\" ); } else if (( f ( min ) * f ( max )) >= D ( 0 )){ throw std :: logic_error ( \"alg::bisection_root -> sign(f(min)) == sign(f(max)) which means solution doesn't exist\" ); } D a = min ; D b = max ; D t = mid ( a , b ); int counter = 0 ; int max_counter = ( int ) 100 * ( D ( 1 ) / tol ); int dp = mth :: decimals ( tol ) - 1 ; while ( mth :: round ( f ( t ), dp ) != tol && counter <= max_counter ) { // case 1 if ( check ( t , b )) { a = t ; } // case 2 else { b = t ; } t = mid ( a , b ); counter ++ ; } return t ; } template < typename D > std :: vector < D > linear_sim ( var :: matrix < D > eq ) { var :: matrix < D > A = eq ( 0 , eq . row (), 0 , eq . col () - 1 ); if ( ! A . is_square ()) { throw std :: invalid_argument ( \"alg::slv::linear_sim -> A in Ax=B should be a square ([AB] is incomplete)\" ); } std :: vector < D > C = eq . get_col ( eq . col () - 1 ); typename var :: matrix < D >:: LU LU = A . plu (); // LZ = P^T*C var :: matrix < D > temp ; temp . push_col ( C ); temp = LU . P . T () * temp ; C = temp . get_col ( temp . col () - 1 ); std :: vector < D > Z ; Z . push_back ( C [ 0 ] / LU . L [ 0 ][ 0 ]); for ( int i = 1 ; i < LU . L . row (); i ++ ) { D sum = C [ i ]; for ( int j = 0 ; j <= i ; j ++ ) { sum -= LU . L [ i ][ j ] * Z [ j ]; } Z . push_back ( sum / LU . L [ i ][ i ]); } // UX = Z std :: vector < D > X ( Z . size ()); X [ Z . size () - 1 ] = Z [ Z . size () - 1 ] / LU . U [ LU . U . row () - 1 ][ LU . U . row () - 1 ]; for ( int i = LU . U . row () - 2 ; i >= 0 ; i -- ) { D sum = Z [ i ]; for ( int j = LU . U . col (); j > i ; j -- ) { sum -= LU . U [ i ][ j ] * X [ j ]; } X [ i ] = sum / LU . U [ i ][ i ]; } return X ; } } // TODO polyfit // TODO binomial // TODO roots Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/algebra/solvers.hpp"},{"location":"doxygen/Files/solvers_8hpp/#includesalgebrasolvershpp","text":"Implementation and declaration of arithemtic solvers functions. More...","title":"includes/algebra/solvers.hpp"},{"location":"doxygen/Files/solvers_8hpp/#namespaces","text":"Name alg Arithematic functions and solvers.","title":"Namespaces"},{"location":"doxygen/Files/solvers_8hpp/#classes","text":"Name struct alg::ans","title":"Classes"},{"location":"doxygen/Files/solvers_8hpp/#functions","text":"Name template <typename D ,typename LAMBDA > std::vector< D > root (LAMBDA f, D tol =D(1000)) template <typename D ,typename LAMBDA > std::vector< D > newton_root (LAMBDA f, D x0) template <typename D > ans< D > poly_root (int n, std::vector< D > a) template <typename D > D linear_root (std::vector< D > eq) Linear root through inputing Ax+C such that it is represented as vector {A, C}. template <typename D ,typename LAMBDA > D bisection_root (LAMBDA f, D min, D max, D tol =D(0.00001)) Used to get real roots through bisection method. template <typename D > std::vector< D > linear_sim ( var::matrix < D > eq) Solves a system of linear equations expressed as a matrix.","title":"Functions"},{"location":"doxygen/Files/solvers_8hpp/#detailed-description","text":"Implementation and declaration of arithemtic solvers functions. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/solvers_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/solvers_8hpp/#function-root","text":"template < typename D , typename LAMBDA > std :: vector < D > root ( LAMBDA f , D tol = D ( 1000 ) )","title":"function root"},{"location":"doxygen/Files/solvers_8hpp/#function-newton_root","text":"template < typename D , typename LAMBDA > std :: vector < D > newton_root ( LAMBDA f , D x0 )","title":"function newton_root"},{"location":"doxygen/Files/solvers_8hpp/#function-poly_root","text":"template < typename D > ans < D > poly_root ( int n , std :: vector < D > a )","title":"function poly_root"},{"location":"doxygen/Files/solvers_8hpp/#function-linear_root","text":"template < typename D > D linear_root ( std :: vector < D > eq ) Linear root through inputing Ax+C such that it is represented as vector {A, C}. Parameters : eq Template Parameters : D Return : D Usage : // answer of x+2 = 0; auto ans = linear ({ 1 , 2 });","title":"function linear_root"},{"location":"doxygen/Files/solvers_8hpp/#function-bisection_root","text":"template < typename D , typename LAMBDA > D bisection_root ( LAMBDA f , D min , D max , D tol = D ( 0.00001 ) ) Used to get real roots through bisection method. Parameters : f function min minimum value max maximum value tol tolerance Template Parameters : D LAMBDA Return : D Usage : // roots between -5 and -1 auto ans = bisection_root < double > ( f , -5.0 , -1.0 ); Exception Will throw exceptions as follows: stdruntime_error \\(\\rightarrow \\min\\) is not smaller than \\(\\max\\) `stdlogic_error \\(\\rightarrow \\text{sign}(f(\\min)) == \\text{sign}(f(\\max))\\) which means solution doesn't exist","title":"function bisection_root"},{"location":"doxygen/Files/solvers_8hpp/#function-linear_sim","text":"template < typename D > std :: vector < D > linear_sim ( var :: matrix < D > eq ) Solves a system of linear equations expressed as a matrix. Parameters : eq matrix Template Parameters : D Return : std::vector Representing the input \\[ \\displaylines{\\underbrace{\\left[\\begin{array} \\ a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\\\ \\end{array}\\right]}_A \\ \\underbrace{\\left[\\begin{array} \\ x_1 \\\\ x_2 \\\\ x_3 \\\\ \\end{array}\\right]}_x = \\underbrace{\\left[\\begin{array} \\ d_1 \\\\ d_2 \\\\ d_3 \\end{array}\\right]}_b \\\\ eq = \\left[\\begin{array}{rrr:r} a_1 & b_1 & c_1 & d_1 \\\\ a_2 & b_2 & c_2 & d_2 \\\\ a_3 & b_3 & c_3 & d_3 \\\\ \\end{array}\\right]} \\]","title":"function linear_sim"},{"location":"doxygen/Files/solvers_8hpp/#source-code","text":"#pragma once #include \"../mcpp.hpp\" namespace alg { template < typename D , typename LAMBDA > std :: vector < D > root ( LAMBDA f , D tol = D ( 1000 )) { } template < typename D , typename LAMBDA > std :: vector < D > newton_root ( LAMBDA f , D x0 ) { } template < typename D > struct ans { std :: vector < D > real ; std :: vector < std :: complex < D >> imag ; }; template < typename D > ans < D > poly_root ( int n , std :: vector < D > a ) { } template < typename D > D linear_root ( std :: vector < D > eq ) { if ( eq . size () > 2 ) { throw std :: invalid_argument ( \"alg::slv::linear_root -> Vector is more than 2\" ); } return ( - eq [ 1 ] / eq [ 0 ]); } template < typename D , typename LAMBDA > D bisection_root ( LAMBDA f , D min , D max , D tol = D ( 0.00001 )) { auto check = [ & ]( D a , D b ) -> bool { return ( a < b && ( f ( a ) * f ( b )) < D ( 0 )); }; auto mid = [ & ]( D a , D b ) -> D { return (( a + b ) / D ( 2 )); }; if ( min >= max ) { throw std :: runtime_error ( \"alg::bisection_root -> min is not smaller than max\" ); } else if (( f ( min ) * f ( max )) >= D ( 0 )){ throw std :: logic_error ( \"alg::bisection_root -> sign(f(min)) == sign(f(max)) which means solution doesn't exist\" ); } D a = min ; D b = max ; D t = mid ( a , b ); int counter = 0 ; int max_counter = ( int ) 100 * ( D ( 1 ) / tol ); int dp = mth :: decimals ( tol ) - 1 ; while ( mth :: round ( f ( t ), dp ) != tol && counter <= max_counter ) { // case 1 if ( check ( t , b )) { a = t ; } // case 2 else { b = t ; } t = mid ( a , b ); counter ++ ; } return t ; } template < typename D > std :: vector < D > linear_sim ( var :: matrix < D > eq ) { var :: matrix < D > A = eq ( 0 , eq . row (), 0 , eq . col () - 1 ); if ( ! A . is_square ()) { throw std :: invalid_argument ( \"alg::slv::linear_sim -> A in Ax=B should be a square ([AB] is incomplete)\" ); } std :: vector < D > C = eq . get_col ( eq . col () - 1 ); typename var :: matrix < D >:: LU LU = A . plu (); // LZ = P^T*C var :: matrix < D > temp ; temp . push_col ( C ); temp = LU . P . T () * temp ; C = temp . get_col ( temp . col () - 1 ); std :: vector < D > Z ; Z . push_back ( C [ 0 ] / LU . L [ 0 ][ 0 ]); for ( int i = 1 ; i < LU . L . row (); i ++ ) { D sum = C [ i ]; for ( int j = 0 ; j <= i ; j ++ ) { sum -= LU . L [ i ][ j ] * Z [ j ]; } Z . push_back ( sum / LU . L [ i ][ i ]); } // UX = Z std :: vector < D > X ( Z . size ()); X [ Z . size () - 1 ] = Z [ Z . size () - 1 ] / LU . U [ LU . U . row () - 1 ][ LU . U . row () - 1 ]; for ( int i = LU . U . row () - 2 ; i >= 0 ; i -- ) { D sum = Z [ i ]; for ( int j = LU . U . col (); j > i ; j -- ) { sum -= LU . U [ i ][ j ] * X [ j ]; } X [ i ] = sum / LU . U [ i ][ i ]; } return X ; } } // TODO polyfit // TODO binomial // TODO roots Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/stat_8hpp/","text":"includes/statistics/stat.hpp Namespaces Name stats Statistical functions. Functions Name template <typename D > D get_avg (std::vector< D > a) Get the avgerage of vector. template <typename D > D get_var (std::vector< D > a) Get the variance object. template <typename D > D get_std (std::vector< D > a) Get the standard diviation of vector. template <typename D > var::QR < D > get_qr (std::vector< D > a) Get the quartile range of a vector. template <typename D > D get_r (std::vector< D > x, std::vector< D > y) Get the corelation coefficient of two vectors. Functions Documentation function get_avg template < typename D > D get_avg ( std :: vector < D > a ) Get the avgerage of vector. Parameters : a input vector Template Parameters : D Type Return : D: output average function get_var template < typename D > D get_var ( std :: vector < D > a ) Get the variance object. Parameters : a input vector Template Parameters : D Type Return : D: output variance function get_std template < typename D > D get_std ( std :: vector < D > a ) Get the standard diviation of vector. Parameters : a input vector Template Parameters : D Type Return : D: output standard diviation function get_qr template < typename D > var :: QR < D > get_qr ( std :: vector < D > a ) Get the quartile range of a vector. Parameters : a input vector Return : QR : the quartile range function get_r template < typename D > D get_r ( std :: vector < D > x , std :: vector < D > y ) Get the corelation coefficient of two vectors. Parameters : x x vector y y vector Return : D: corelation coefficient Source code #pragma once #include \"../mathematic/mathematic.hpp\" #include \"../numerical/vect.hpp\" #include \"../variables/others.hpp\" #include \"../variables/vecop.hpp\" namespace stats { template < typename D > D get_avg ( std :: vector < D > a ) { return vect :: sum ( a ) / D ( a . size ()); } template < typename D > D get_var ( std :: vector < D > a ) { D mean = get_avg ( a ); int N = ( int ) a . size (); D sum = D ( 0 ); for ( int i = 0 ; i < N ; i ++ ) { sum += D ( std :: pow (( a [ i ] - mean ), D ( 2 ))); } return ( D ) sum / N ; } template < typename D > D get_std ( std :: vector < D > a ) { return D ( std :: sqrt ( get_var ( a ))); } template < typename D > var :: QR < D > get_qr ( std :: vector < D > a ) { var :: QR < D > qr ; qr . LQ = vect :: min ( a ); qr . UQ = vect :: max ( a ); std :: vector < D > a_sorted = a ; std :: sort ( a_sorted . begin (), a_sorted . end ()); qr . Q1 = a_sorted . at ( D ( a_sorted . size ()) / D ( 4 )); qr . Q2 = a_sorted . at ( D ( a_sorted . size ()) / D ( 2 )); qr . Q3 = a_sorted . at ( D ( D ( 3 ) * ( a_sorted . size ())) / D ( 4 )); return qr ; } template < typename D > D get_r ( std :: vector < D > x , std :: vector < D > y ) { if ( x . size () != y . size ()) { throw std :: invalid_argument ( \"stats::get_r -> Size mismatch\" ); } D sumx = get_sum ( x ); D sumy = get_sum ( y ); D sumxx = get_sum ( x * x ); D sumxy = get_sum ( x * y ); D sumyy = get_sum ( y * y ); return ( D ( x . size ()) * sumxy - ( sumx * sumy )) / D ( D ( std :: sqrt (( D ( x . size ())) * sumxx - D ( std :: pow ( sumx , D ( 2 )))) * ( D ( x . size ()) * sumyy - D ( std :: pow ( sumy , D ( 2 )))))); } } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/statistics/stat.hpp"},{"location":"doxygen/Files/stat_8hpp/#includesstatisticsstathpp","text":"","title":"includes/statistics/stat.hpp"},{"location":"doxygen/Files/stat_8hpp/#namespaces","text":"Name stats Statistical functions.","title":"Namespaces"},{"location":"doxygen/Files/stat_8hpp/#functions","text":"Name template <typename D > D get_avg (std::vector< D > a) Get the avgerage of vector. template <typename D > D get_var (std::vector< D > a) Get the variance object. template <typename D > D get_std (std::vector< D > a) Get the standard diviation of vector. template <typename D > var::QR < D > get_qr (std::vector< D > a) Get the quartile range of a vector. template <typename D > D get_r (std::vector< D > x, std::vector< D > y) Get the corelation coefficient of two vectors.","title":"Functions"},{"location":"doxygen/Files/stat_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/stat_8hpp/#function-get_avg","text":"template < typename D > D get_avg ( std :: vector < D > a ) Get the avgerage of vector. Parameters : a input vector Template Parameters : D Type Return : D: output average","title":"function get_avg"},{"location":"doxygen/Files/stat_8hpp/#function-get_var","text":"template < typename D > D get_var ( std :: vector < D > a ) Get the variance object. Parameters : a input vector Template Parameters : D Type Return : D: output variance","title":"function get_var"},{"location":"doxygen/Files/stat_8hpp/#function-get_std","text":"template < typename D > D get_std ( std :: vector < D > a ) Get the standard diviation of vector. Parameters : a input vector Template Parameters : D Type Return : D: output standard diviation","title":"function get_std"},{"location":"doxygen/Files/stat_8hpp/#function-get_qr","text":"template < typename D > var :: QR < D > get_qr ( std :: vector < D > a ) Get the quartile range of a vector. Parameters : a input vector Return : QR : the quartile range","title":"function get_qr"},{"location":"doxygen/Files/stat_8hpp/#function-get_r","text":"template < typename D > D get_r ( std :: vector < D > x , std :: vector < D > y ) Get the corelation coefficient of two vectors. Parameters : x x vector y y vector Return : D: corelation coefficient","title":"function get_r"},{"location":"doxygen/Files/stat_8hpp/#source-code","text":"#pragma once #include \"../mathematic/mathematic.hpp\" #include \"../numerical/vect.hpp\" #include \"../variables/others.hpp\" #include \"../variables/vecop.hpp\" namespace stats { template < typename D > D get_avg ( std :: vector < D > a ) { return vect :: sum ( a ) / D ( a . size ()); } template < typename D > D get_var ( std :: vector < D > a ) { D mean = get_avg ( a ); int N = ( int ) a . size (); D sum = D ( 0 ); for ( int i = 0 ; i < N ; i ++ ) { sum += D ( std :: pow (( a [ i ] - mean ), D ( 2 ))); } return ( D ) sum / N ; } template < typename D > D get_std ( std :: vector < D > a ) { return D ( std :: sqrt ( get_var ( a ))); } template < typename D > var :: QR < D > get_qr ( std :: vector < D > a ) { var :: QR < D > qr ; qr . LQ = vect :: min ( a ); qr . UQ = vect :: max ( a ); std :: vector < D > a_sorted = a ; std :: sort ( a_sorted . begin (), a_sorted . end ()); qr . Q1 = a_sorted . at ( D ( a_sorted . size ()) / D ( 4 )); qr . Q2 = a_sorted . at ( D ( a_sorted . size ()) / D ( 2 )); qr . Q3 = a_sorted . at ( D ( D ( 3 ) * ( a_sorted . size ())) / D ( 4 )); return qr ; } template < typename D > D get_r ( std :: vector < D > x , std :: vector < D > y ) { if ( x . size () != y . size ()) { throw std :: invalid_argument ( \"stats::get_r -> Size mismatch\" ); } D sumx = get_sum ( x ); D sumy = get_sum ( y ); D sumxx = get_sum ( x * x ); D sumxy = get_sum ( x * y ); D sumyy = get_sum ( y * y ); return ( D ( x . size ()) * sumxy - ( sumx * sumy )) / D ( D ( std :: sqrt (( D ( x . size ())) * sumxx - D ( std :: pow ( sumx , D ( 2 )))) * ( D ( x . size ()) * sumyy - D ( std :: pow ( sumy , D ( 2 )))))); } } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/table_8hpp/","text":"includes/variables/table.hpp Implementation and declaration of table.hpp. More... Namespaces Name var Namespace that contains all variable data types. Classes Name class var::table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 Detailed Description Implementation and declaration of table.hpp. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022 Source code #pragma once #include \"../mathematic/mathematic.hpp\" #include \"../statistics/stat.hpp\" #include \"others.hpp\" // TODO: complete testing // TODO: fix documentation and code namespace var { template < typename D > class table : public std :: vector < std :: vector < D >> { protected : std :: vector < std :: string > col_names ; std :: vector < std :: string > row_names ; int _row ; int _col ; int sz = 10 ; void set_size () { if ( this -> empty ()) { _row = 0 ; _col = 0 ; return ; } _col = ( int ) this -> at ( 0 ). size (); _row = ( int ) this -> size (); } int check_col_name ( std :: string name ) { for ( int i = 0 ; i < ( int ) col_names . size (); i ++ ) { if ( col_names [ i ] == name ) { return i ; } } return -1 ; } int check_row_name ( std :: string name ) { for ( int i = 0 ; i < ( int ) row_names . size (); i ++ ) { if ( row_names [ i ] == name ) { return i ; } } return -1 ; } static std :: string center ( const std :: string s , const int w ) { std :: stringstream ss , spaces ; int padding = w - s . size (); // count excess room to pad for ( int i = 0 ; i < padding / 2 ; ++ i ) { spaces << \" \" ; } ss << spaces . str () << s << spaces . str (); // format with padding // if odd #, add 1 space if ( padding > 0 && padding % 2 != 0 ) { ss << \" \" ; } return ss . str (); } static std :: string prd ( D x , int width ) { std :: stringstream ss ; ss << std :: fixed << std :: left ; ss . fill ( ' ' ); // fill space around displayed # ss . width ( width ); // set width around displayed # ss . precision ( 2 ); // set # places after decimal ss << x ; return center ( ss . str (), width ); } static std :: string prd ( std :: string x , int width ) { std :: stringstream ss ; ss << std :: left ; ss . fill ( ' ' ); // fill space around displayed # ss . width ( width ); // set width around displayed # ss << x ; return center ( ss . str (), width ); } std :: string generate_line ( int l ) { std :: string line ; for ( int i = 0 ; i < l ; i ++ ) { line += \"\u2015\" ; } return line ; } void generate_rows () { if ( ! row_names . empty ()) { row_names . clear (); } set_size (); for ( int i = 0 ; i < _row ; i ++ ) { row_names . push_back ( \"Row-\" + std :: to_string ( i )); } } void generate_cols () { if ( ! col_names . empty ()) { col_names . clear (); } set_size (); for ( int i = 0 ; i < _col ; i ++ ) { row_names . push_back ( \"Col-\" + std :: to_string ( i )); } } public : table () : _row ( 0 ), _col ( 0 ) {} // ************************* Getters ************************ // int row () { set_size (); return _row ; } int col () { set_size (); return _col ; } std :: vector < std :: string > get_col_names () { return col_names ; } std :: vector < std :: string > get_row_names () { return row_names ; } std :: vector <& D > get_col ( int index ){ set_size (); if ( index < 0 || index >= _col ){ throw std :: invalid_argument ( \"var::table::get_col -> given column index doesn't exist\" ); } std :: vector <& D > a ; for ( int i = 0 ; i < _row ; i ++ ) { a . push_back ( & this -> at ( i ). at ( j )); } return a ; } std :: vector <& D > get_col ( std :: string name ){ return get_col ( check_col_name ( name )); } std :: vector <& D > get_row ( int index ){ set_size (); if ( index < 0 || index >= _row ){ throw std :: invalid_argument ( \"var::table::get_row -> given row index doesn't exist\" ); } std :: vector <& D > a ; for ( int i = 0 ; i < _col ; i ++ ) { a . push_back ( & this -> at ( index ). at ( i )); } return a ; } std :: vector <& D > get_row ( std :: string name ){ return get_row ( check_row_name ( name )); } // ************************* Setters ************************ // void set_col_names ( std :: vector < std :: string > names ) { set_size (); if ( names . size () != _col ){ throw std :: invalid_argument ( \"table::set_col_names -> Input parameter size doesn't match curret column size\" ); } col_names = names ; } void set_col_name ( int j , std :: string names ) { set_size (); if ( j < 0 || j >= _col ){ throw std :: invalid_argument ( \"var::table::set_col_name -> given column index doesn't exist\" ); } if ( col_names . size () != _col ){ throw std :: invalid_argument ( \"var::table::set_col_name -> column names are not set correctly\" ); } col_names [ j ] = names ; } void set_row_names ( std :: vector < std :: string > names ) { set_size (); if ( names . size () != _row ){ throw std :: invalid_argument ( \"table::set_row_names -> Input parameter size doesn't match curret row size\" ); } row_names = names ; } // ***** operators ** / bool read_csv ( std :: string filename ) { std :: ifstream file ( filename ); if ( file . is_open ()) { this -> clear (); col_names . clear (); // col name std :: string line , colname ; std :: getline ( file , line ); std :: stringstream ss ( line ); while ( getline ( ss , colname , ',' )) { col_names . push_back ( colname ); } // data D val ; while ( std :: getline ( file , line )) { // Create a stringstream of the current line std :: stringstream ss ( line ); std :: vector < D > r ; while ( ss >> val ) { r . push_back ( val ); // If the next token is a comma, ignore it and move on if ( ss . peek () == ',' ) ss . ignore (); } this -> push_back ( r ); } set_size (); file . close (); return true ; } file . close (); return false ; } bool save_csv ( std :: string filename ) { std :: ofstream file ( filename ); if ( file . is_open ()) { for ( int i = 0 ; i < col_names . size (); i ++ ) { if ( i != col_names . size () - 1 ) { file << col_names [ i ] << \",\" ; } else { file << col_names [ i ] << \" \\n \" ; } } set_size (); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( j != _col - 1 ) { file << this -> at ( i ). at ( j ) << \",\" ; } else if ( j == _col - 1 ) { file << this -> at ( i ). at ( j ) << \" \\n \" ; } } } file . close (); return true ; } file . close (); return false ; } void show ( int r ) { if ( row_names . empty ()) { generate_rows (); } set_size (); std :: string line ; if ( _col == 1 ) { line = generate_line (( std :: pow ( 2 , 1 / _col ) + 0.2 ) * sz * _col ); } else { line = generate_line (( std :: pow ( 1.05 , 1 / _col ) + 1.9 / _col ) * sz * _col ); } for ( int i = -1 ; i < r ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { // to print header if ( i == -1 ) { if ( j == 0 && _col > 1 ) { std :: cout << prd ( \" \" , sz ) << \"\u2502\" << prd ( col_names [ j ], sz ) << \"\u2502\" ; } else if ( j == 0 && _col == 1 ) { std :: cout << prd ( \" \" , sz ) << \"\u2502\" << prd ( col_names [ j ], sz ) << \" \\n \" ; std :: cout << line << \" \\n \" ; } else if ( j != _col - 1 ) { std :: cout << prd ( col_names [ j ], sz ) << \"\u2502\" ; } else { std :: cout << prd ( col_names [ j ], sz ) << \" \\n \" ; std :: cout << line << \" \\n \" ; } } // printing values else { // row name + val if ( j == 0 && _col > 1 ) { std :: cout << prd ( row_names [ i ], sz ) << \"\u2502\" << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \"\u2502\" ; } else if ( j == 0 && _col == 1 ) { std :: cout << prd ( row_names [ i ], sz ) << \"\u2502\" << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \"\u2502\" << \" \\n \" ; std :: cout << line << \" \\n \" ; } else if ( j != _col - 1 ) { std :: cout << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \"\u2502\" ; } else { std :: cout << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \" \\n \" ; std :: cout << line << \" \\n \" ; } } } } } void show () { set_size (); show ( _row ); } void show_header () { show ( 0 ); } table get_row_table ( int r ) { table t ; t . push_back ( this -> at ( r )); t . col_names = col_names ; if ( row_names . empty ()) { generate_rows (); } t . row_names . push_back ( row_names [ r ]); return t ; } table get_col_table ( std :: string name ) { table t ; auto a = get_col_ ( name ); for ( int i = 0 ; i < a . size (); i ++ ) { t . push_back ({ a [ i ] }); } if ( row_names . empty ()) { generate_rows (); } t . col_names . push_back ( col_names [ check_header ( name )]); return t ; } bool add_col ( std :: vector < D > col_data , std :: string col_name = std :: string ()) { set_size (); if (( col_data . size () != _row && _row != 0 ) || col_data . empty ()) { return false ; } col_names . push_back ( col_name ); for ( int i = 0 ; i < col_data . size (); i ++ ) { if ( _row == 0 ) { this -> push_back ({ col_data [ i ] }); } else { this -> at ( i ). push_back ( col_data [ i ]); } } return true ; } bool add_row ( std :: vector < D > row_data ) { return false ; } // ************************* Statistics ************************ // std :: vector < D > get_avgs () { std :: vector < D > a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( stats :: get_avg ( get_col_ ( j ))); } return a ; } std :: vector < D > get_stds () { std :: vector < D > a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( stats :: get_std ( get_col_ ( j ))); } return a ; } std :: vector < D > get_vars () { std :: vector < D > a ; for ( int j = 0 ; j < col_names . size (); j ++ ) { a . push_back ( stats :: get_var ( get_col_ ( col_names [ j ]))); } return a ; } std :: vector < QR < D >> get_qrs () { std :: vector < QR < D >> a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( stats :: get_qr ( get_col_ ( j ))); } return a ; } std :: vector < D > get_sums () { std :: vector < D > a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( vect :: sum ( get_col_ ( j ))); } return a ; } table describe_all () { table t ; auto avg = get_avgs (); auto std = get_stds (); auto var = get_vars (); auto qrs = get_qrs (); auto sms = get_sums (); set_size (); // generates columns if ( col_names . size () != _col ){ generate_cols (); } for ( int i = 0 ; i < _col ; i ++ ) { t . row_names . push_back ( col_names [ i ]); } // loading col names t . col_names . push_back ( \"Avg\" ); t . col_names . push_back ( \"STD\" ); t . col_names . push_back ( \"VAR\" ); t . col_names . push_back ( \"Min\" ); t . col_names . push_back ( \"Q1\" ); t . col_names . push_back ( \"Q2\" ); t . col_names . push_back ( \"Q3\" ); t . col_names . push_back ( \"Max\" ); t . col_names . push_back ( \"IQR\" ); t . col_names . push_back ( \"Sum\" ); // loading values t . _row = t . row_names . size (); t . _col = t . col_names . size (); for ( int i = 0 ; i < t . _row ; i ++ ) { std :: vector < D > rr ; // row rr . push_back ( avg [ i ]); rr . push_back ( std [ i ]); rr . push_back ( var [ i ]); rr . push_back ( qrs [ i ]. LQ ); rr . push_back ( qrs [ i ]. Q1 ); rr . push_back ( qrs [ i ]. Q2 ); rr . push_back ( qrs [ i ]. Q3 ); rr . push_back ( qrs [ i ]. UQ ); rr . push_back ( qrs [ i ]. Q3 - qrs [ i ]. Q1 ); rr . push_back ( sms [ i ]); t . push_back ( rr ); } t . set_size (); return t ; } }; } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/table.hpp"},{"location":"doxygen/Files/table_8hpp/#includesvariablestablehpp","text":"Implementation and declaration of table.hpp. More...","title":"includes/variables/table.hpp"},{"location":"doxygen/Files/table_8hpp/#namespaces","text":"Name var Namespace that contains all variable data types.","title":"Namespaces"},{"location":"doxygen/Files/table_8hpp/#classes","text":"Name class var::table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"Classes"},{"location":"doxygen/Files/table_8hpp/#detailed-description","text":"Implementation and declaration of table.hpp. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/table_8hpp/#source-code","text":"#pragma once #include \"../mathematic/mathematic.hpp\" #include \"../statistics/stat.hpp\" #include \"others.hpp\" // TODO: complete testing // TODO: fix documentation and code namespace var { template < typename D > class table : public std :: vector < std :: vector < D >> { protected : std :: vector < std :: string > col_names ; std :: vector < std :: string > row_names ; int _row ; int _col ; int sz = 10 ; void set_size () { if ( this -> empty ()) { _row = 0 ; _col = 0 ; return ; } _col = ( int ) this -> at ( 0 ). size (); _row = ( int ) this -> size (); } int check_col_name ( std :: string name ) { for ( int i = 0 ; i < ( int ) col_names . size (); i ++ ) { if ( col_names [ i ] == name ) { return i ; } } return -1 ; } int check_row_name ( std :: string name ) { for ( int i = 0 ; i < ( int ) row_names . size (); i ++ ) { if ( row_names [ i ] == name ) { return i ; } } return -1 ; } static std :: string center ( const std :: string s , const int w ) { std :: stringstream ss , spaces ; int padding = w - s . size (); // count excess room to pad for ( int i = 0 ; i < padding / 2 ; ++ i ) { spaces << \" \" ; } ss << spaces . str () << s << spaces . str (); // format with padding // if odd #, add 1 space if ( padding > 0 && padding % 2 != 0 ) { ss << \" \" ; } return ss . str (); } static std :: string prd ( D x , int width ) { std :: stringstream ss ; ss << std :: fixed << std :: left ; ss . fill ( ' ' ); // fill space around displayed # ss . width ( width ); // set width around displayed # ss . precision ( 2 ); // set # places after decimal ss << x ; return center ( ss . str (), width ); } static std :: string prd ( std :: string x , int width ) { std :: stringstream ss ; ss << std :: left ; ss . fill ( ' ' ); // fill space around displayed # ss . width ( width ); // set width around displayed # ss << x ; return center ( ss . str (), width ); } std :: string generate_line ( int l ) { std :: string line ; for ( int i = 0 ; i < l ; i ++ ) { line += \"\u2015\" ; } return line ; } void generate_rows () { if ( ! row_names . empty ()) { row_names . clear (); } set_size (); for ( int i = 0 ; i < _row ; i ++ ) { row_names . push_back ( \"Row-\" + std :: to_string ( i )); } } void generate_cols () { if ( ! col_names . empty ()) { col_names . clear (); } set_size (); for ( int i = 0 ; i < _col ; i ++ ) { row_names . push_back ( \"Col-\" + std :: to_string ( i )); } } public : table () : _row ( 0 ), _col ( 0 ) {} // ************************* Getters ************************ // int row () { set_size (); return _row ; } int col () { set_size (); return _col ; } std :: vector < std :: string > get_col_names () { return col_names ; } std :: vector < std :: string > get_row_names () { return row_names ; } std :: vector <& D > get_col ( int index ){ set_size (); if ( index < 0 || index >= _col ){ throw std :: invalid_argument ( \"var::table::get_col -> given column index doesn't exist\" ); } std :: vector <& D > a ; for ( int i = 0 ; i < _row ; i ++ ) { a . push_back ( & this -> at ( i ). at ( j )); } return a ; } std :: vector <& D > get_col ( std :: string name ){ return get_col ( check_col_name ( name )); } std :: vector <& D > get_row ( int index ){ set_size (); if ( index < 0 || index >= _row ){ throw std :: invalid_argument ( \"var::table::get_row -> given row index doesn't exist\" ); } std :: vector <& D > a ; for ( int i = 0 ; i < _col ; i ++ ) { a . push_back ( & this -> at ( index ). at ( i )); } return a ; } std :: vector <& D > get_row ( std :: string name ){ return get_row ( check_row_name ( name )); } // ************************* Setters ************************ // void set_col_names ( std :: vector < std :: string > names ) { set_size (); if ( names . size () != _col ){ throw std :: invalid_argument ( \"table::set_col_names -> Input parameter size doesn't match curret column size\" ); } col_names = names ; } void set_col_name ( int j , std :: string names ) { set_size (); if ( j < 0 || j >= _col ){ throw std :: invalid_argument ( \"var::table::set_col_name -> given column index doesn't exist\" ); } if ( col_names . size () != _col ){ throw std :: invalid_argument ( \"var::table::set_col_name -> column names are not set correctly\" ); } col_names [ j ] = names ; } void set_row_names ( std :: vector < std :: string > names ) { set_size (); if ( names . size () != _row ){ throw std :: invalid_argument ( \"table::set_row_names -> Input parameter size doesn't match curret row size\" ); } row_names = names ; } // ***** operators ** / bool read_csv ( std :: string filename ) { std :: ifstream file ( filename ); if ( file . is_open ()) { this -> clear (); col_names . clear (); // col name std :: string line , colname ; std :: getline ( file , line ); std :: stringstream ss ( line ); while ( getline ( ss , colname , ',' )) { col_names . push_back ( colname ); } // data D val ; while ( std :: getline ( file , line )) { // Create a stringstream of the current line std :: stringstream ss ( line ); std :: vector < D > r ; while ( ss >> val ) { r . push_back ( val ); // If the next token is a comma, ignore it and move on if ( ss . peek () == ',' ) ss . ignore (); } this -> push_back ( r ); } set_size (); file . close (); return true ; } file . close (); return false ; } bool save_csv ( std :: string filename ) { std :: ofstream file ( filename ); if ( file . is_open ()) { for ( int i = 0 ; i < col_names . size (); i ++ ) { if ( i != col_names . size () - 1 ) { file << col_names [ i ] << \",\" ; } else { file << col_names [ i ] << \" \\n \" ; } } set_size (); for ( int i = 0 ; i < _row ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { if ( j != _col - 1 ) { file << this -> at ( i ). at ( j ) << \",\" ; } else if ( j == _col - 1 ) { file << this -> at ( i ). at ( j ) << \" \\n \" ; } } } file . close (); return true ; } file . close (); return false ; } void show ( int r ) { if ( row_names . empty ()) { generate_rows (); } set_size (); std :: string line ; if ( _col == 1 ) { line = generate_line (( std :: pow ( 2 , 1 / _col ) + 0.2 ) * sz * _col ); } else { line = generate_line (( std :: pow ( 1.05 , 1 / _col ) + 1.9 / _col ) * sz * _col ); } for ( int i = -1 ; i < r ; i ++ ) { for ( int j = 0 ; j < _col ; j ++ ) { // to print header if ( i == -1 ) { if ( j == 0 && _col > 1 ) { std :: cout << prd ( \" \" , sz ) << \"\u2502\" << prd ( col_names [ j ], sz ) << \"\u2502\" ; } else if ( j == 0 && _col == 1 ) { std :: cout << prd ( \" \" , sz ) << \"\u2502\" << prd ( col_names [ j ], sz ) << \" \\n \" ; std :: cout << line << \" \\n \" ; } else if ( j != _col - 1 ) { std :: cout << prd ( col_names [ j ], sz ) << \"\u2502\" ; } else { std :: cout << prd ( col_names [ j ], sz ) << \" \\n \" ; std :: cout << line << \" \\n \" ; } } // printing values else { // row name + val if ( j == 0 && _col > 1 ) { std :: cout << prd ( row_names [ i ], sz ) << \"\u2502\" << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \"\u2502\" ; } else if ( j == 0 && _col == 1 ) { std :: cout << prd ( row_names [ i ], sz ) << \"\u2502\" << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \"\u2502\" << \" \\n \" ; std :: cout << line << \" \\n \" ; } else if ( j != _col - 1 ) { std :: cout << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \"\u2502\" ; } else { std :: cout << prd ( get_col_ ( col_names [ j ]). at ( i ), sz ) << \" \\n \" ; std :: cout << line << \" \\n \" ; } } } } } void show () { set_size (); show ( _row ); } void show_header () { show ( 0 ); } table get_row_table ( int r ) { table t ; t . push_back ( this -> at ( r )); t . col_names = col_names ; if ( row_names . empty ()) { generate_rows (); } t . row_names . push_back ( row_names [ r ]); return t ; } table get_col_table ( std :: string name ) { table t ; auto a = get_col_ ( name ); for ( int i = 0 ; i < a . size (); i ++ ) { t . push_back ({ a [ i ] }); } if ( row_names . empty ()) { generate_rows (); } t . col_names . push_back ( col_names [ check_header ( name )]); return t ; } bool add_col ( std :: vector < D > col_data , std :: string col_name = std :: string ()) { set_size (); if (( col_data . size () != _row && _row != 0 ) || col_data . empty ()) { return false ; } col_names . push_back ( col_name ); for ( int i = 0 ; i < col_data . size (); i ++ ) { if ( _row == 0 ) { this -> push_back ({ col_data [ i ] }); } else { this -> at ( i ). push_back ( col_data [ i ]); } } return true ; } bool add_row ( std :: vector < D > row_data ) { return false ; } // ************************* Statistics ************************ // std :: vector < D > get_avgs () { std :: vector < D > a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( stats :: get_avg ( get_col_ ( j ))); } return a ; } std :: vector < D > get_stds () { std :: vector < D > a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( stats :: get_std ( get_col_ ( j ))); } return a ; } std :: vector < D > get_vars () { std :: vector < D > a ; for ( int j = 0 ; j < col_names . size (); j ++ ) { a . push_back ( stats :: get_var ( get_col_ ( col_names [ j ]))); } return a ; } std :: vector < QR < D >> get_qrs () { std :: vector < QR < D >> a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( stats :: get_qr ( get_col_ ( j ))); } return a ; } std :: vector < D > get_sums () { std :: vector < D > a ; set_size (); for ( int j = 0 ; j < _col ; j ++ ) { a . push_back ( vect :: sum ( get_col_ ( j ))); } return a ; } table describe_all () { table t ; auto avg = get_avgs (); auto std = get_stds (); auto var = get_vars (); auto qrs = get_qrs (); auto sms = get_sums (); set_size (); // generates columns if ( col_names . size () != _col ){ generate_cols (); } for ( int i = 0 ; i < _col ; i ++ ) { t . row_names . push_back ( col_names [ i ]); } // loading col names t . col_names . push_back ( \"Avg\" ); t . col_names . push_back ( \"STD\" ); t . col_names . push_back ( \"VAR\" ); t . col_names . push_back ( \"Min\" ); t . col_names . push_back ( \"Q1\" ); t . col_names . push_back ( \"Q2\" ); t . col_names . push_back ( \"Q3\" ); t . col_names . push_back ( \"Max\" ); t . col_names . push_back ( \"IQR\" ); t . col_names . push_back ( \"Sum\" ); // loading values t . _row = t . row_names . size (); t . _col = t . col_names . size (); for ( int i = 0 ; i < t . _row ; i ++ ) { std :: vector < D > rr ; // row rr . push_back ( avg [ i ]); rr . push_back ( std [ i ]); rr . push_back ( var [ i ]); rr . push_back ( qrs [ i ]. LQ ); rr . push_back ( qrs [ i ]. Q1 ); rr . push_back ( qrs [ i ]. Q2 ); rr . push_back ( qrs [ i ]. Q3 ); rr . push_back ( qrs [ i ]. UQ ); rr . push_back ( qrs [ i ]. Q3 - qrs [ i ]. Q1 ); rr . push_back ( sms [ i ]); t . push_back ( rr ); } t . set_size (); return t ; } }; } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/tree_8hpp/","text":"includes/variables/tree.hpp Namespaces Name var Namespace that contains all variable data types. Classes Name class var::tree Source code #pragma once namespace var { template < typename D > class tree { }; } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/tree.hpp"},{"location":"doxygen/Files/tree_8hpp/#includesvariablestreehpp","text":"","title":"includes/variables/tree.hpp"},{"location":"doxygen/Files/tree_8hpp/#namespaces","text":"Name var Namespace that contains all variable data types.","title":"Namespaces"},{"location":"doxygen/Files/tree_8hpp/#classes","text":"Name class var::tree","title":"Classes"},{"location":"doxygen/Files/tree_8hpp/#source-code","text":"#pragma once namespace var { template < typename D > class tree { }; } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/vecop_8hpp/","text":"includes/variables/vecop.hpp Extends upon std::vector. More... Functions Name template <typename D > std::vector< D > operator* (std::vector< D > first, std::vector< D > second) vector*vector template <typename D > std::vector< D > operator* (D s, std::vector< D > v) var*vector template <typename D > std::vector< D > operator* (std::vector< D > v, D s) vector*var template <typename D > std::vector< D > operator+ (std::vector< D > first, std::vector< D > second) vector+vector template <typename D > std::vector< D > operator+ (D s, std::vector< D > v) var+vector template <typename D > std::vector< D > operator+ (std::vector< D > v, D s) vector+var template <typename D > std::vector< D > operator- (std::vector< D > first, std::vector< D > second) vector-vector template <typename D > std::vector< D > operator- (D s, std::vector< D > v) var-vector template <typename D > std::vector< D > operator- (std::vector< D > v, D s) vector-var template <typename D > std::vector< D > operator/ (std::vector< D > first, std::vector< D > second) vector/vector template <typename D > std::vector< D > operator/ (D s, std::vector< D > v) var/vector template <typename D > std::vector< D > operator/ (std::vector< D > v, D s) vector/var template <typename D > std::ostream & operator<< (std::ostream & out, std::vector< D > & other) cout << vector template <typename D > std::istream & operator>> (std::istream & input, std::vector< D > & other) input operator template <typename D > std::vector< D > operator% (std::vector< D > v, D s) template <typename D > bool operator== (std::vector< D > a, std::vector< D > b) equal operator Detailed Description Extends upon std::vector. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022 Functions Documentation function operator* template < typename D > std :: vector < D > operator * ( std :: vector < D > first , std :: vector < D > second ) vector*vector Parameters : first second Template Parameters : D Return : std::vector function operator* template < typename D > std :: vector < D > operator * ( D s , std :: vector < D > v ) var*vector Parameters : s v Template Parameters : D Return : std::vector function operator* template < typename D > std :: vector < D > operator * ( std :: vector < D > v , D s ) vector*var Parameters : v s Template Parameters : D Return : std::vector function operator+ template < typename D > std :: vector < D > operator + ( std :: vector < D > first , std :: vector < D > second ) vector+vector Parameters : first second Template Parameters : D Return : std::vector function operator+ template < typename D > std :: vector < D > operator + ( D s , std :: vector < D > v ) var+vector Parameters : s v Template Parameters : D Return : std::vector function operator+ template < typename D > std :: vector < D > operator + ( std :: vector < D > v , D s ) vector+var Parameters : v s Template Parameters : D Return : std::vector function operator- template < typename D > std :: vector < D > operator - ( std :: vector < D > first , std :: vector < D > second ) vector-vector Parameters : first second Template Parameters : D Return : std::vector function operator- template < typename D > std :: vector < D > operator - ( D s , std :: vector < D > v ) var-vector Parameters : s v Template Parameters : D Return : std::vector function operator- template < typename D > std :: vector < D > operator - ( std :: vector < D > v , D s ) vector-var Parameters : v s Template Parameters : D Return : std::vector function operator/ template < typename D > std :: vector < D > operator / ( std :: vector < D > first , std :: vector < D > second ) vector/vector Parameters : first second Template Parameters : D Return : std::vector function operator/ template < typename D > std :: vector < D > operator / ( D s , std :: vector < D > v ) var/vector Parameters : s v Template Parameters : D Return : std::vector function operator/ template < typename D > std :: vector < D > operator / ( std :: vector < D > v , D s ) vector/var Parameters : v s Template Parameters : D Return : std::vector function operator<< template < typename D > std :: ostream & operator << ( std :: ostream & out , std :: vector < D > & other ) cout << vector Parameters : out other Template Parameters : D Return : std::ostream& function operator>> template < typename D > std :: istream & operator >> ( std :: istream & input , std :: vector < D > & other ) input operator Parameters : input other Template Parameters : D Return : std::istream& function operator% template < typename D > std :: vector < D > operator % ( std :: vector < D > v , D s ) function operator== template < typename D > bool operator == ( std :: vector < D > a , std :: vector < D > b ) equal operator Parameters : a b Template Parameters : D Return : true false Source code #pragma once #include <iostream> #include <sstream> #include <vector> // ********************** multiply **************************** template < typename D > std :: vector < D > operator * ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator * -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] * second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator * ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s * v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator * ( std :: vector < D > v , D s ) { return s * v ; } // ********************** add **************************** template < typename D > std :: vector < D > operator + ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator + -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] + second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator + ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s + v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator + ( std :: vector < D > v , D s ) { return s + v ; } // ********************** subtract **************************** template < typename D > std :: vector < D > operator - ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator - -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] - second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator - ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s - v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator - ( std :: vector < D > v , D s ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( v [ i ] - s ); } return temp ; } // ********************** divide **************************** template < typename D > std :: vector < D > operator / ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator / -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] / second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator / ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s / v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator / ( std :: vector < D > v , D s ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( v [ i ] / s ); } return temp ; } // ********************** streams **************************** template < typename D > std :: ostream & operator << ( std :: ostream & out , std :: vector < D > & other ) { for ( int i = 0 ; i < other . size (); i ++ ) { out << other [ i ]; if ( other [ i ] != other [ other . size () - 1 ]) { out << \",\" ; } } return out ; } template < typename D > std :: istream & operator >> ( std :: istream & input , std :: vector < D > & other ) { std :: string line ; getline ( input , line ); std :: stringstream LINE ; LINE << line ; std :: string temp ; D var ; while ( LINE . good ()) { getline ( LINE , temp , ',' ); if ( std :: stringstream ( temp ) >> var ) { other . push_back ( var ); } } return input ; } // ********************** others operators **************************** template < typename D > std :: vector < D > operator % ( std :: vector < D > v , D s ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( v [ i ] % s ); } return temp ; } // *********************** comparison ******************************** // TODOconditional operators template < typename D > bool operator == ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"std::vector::operator == -> Invalid size\" ); } for ( int i = 0 ; i < a . size (); i ++ ) { if ( a [ i ] != b [ i ]) { return false ; } } return true ; } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/variables/vecop.hpp"},{"location":"doxygen/Files/vecop_8hpp/#includesvariablesvecophpp","text":"Extends upon std::vector. More...","title":"includes/variables/vecop.hpp"},{"location":"doxygen/Files/vecop_8hpp/#functions","text":"Name template <typename D > std::vector< D > operator* (std::vector< D > first, std::vector< D > second) vector*vector template <typename D > std::vector< D > operator* (D s, std::vector< D > v) var*vector template <typename D > std::vector< D > operator* (std::vector< D > v, D s) vector*var template <typename D > std::vector< D > operator+ (std::vector< D > first, std::vector< D > second) vector+vector template <typename D > std::vector< D > operator+ (D s, std::vector< D > v) var+vector template <typename D > std::vector< D > operator+ (std::vector< D > v, D s) vector+var template <typename D > std::vector< D > operator- (std::vector< D > first, std::vector< D > second) vector-vector template <typename D > std::vector< D > operator- (D s, std::vector< D > v) var-vector template <typename D > std::vector< D > operator- (std::vector< D > v, D s) vector-var template <typename D > std::vector< D > operator/ (std::vector< D > first, std::vector< D > second) vector/vector template <typename D > std::vector< D > operator/ (D s, std::vector< D > v) var/vector template <typename D > std::vector< D > operator/ (std::vector< D > v, D s) vector/var template <typename D > std::ostream & operator<< (std::ostream & out, std::vector< D > & other) cout << vector template <typename D > std::istream & operator>> (std::istream & input, std::vector< D > & other) input operator template <typename D > std::vector< D > operator% (std::vector< D > v, D s) template <typename D > bool operator== (std::vector< D > a, std::vector< D > b) equal operator","title":"Functions"},{"location":"doxygen/Files/vecop_8hpp/#detailed-description","text":"Extends upon std::vector. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 17/07/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/vecop_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/vecop_8hpp/#function-operator","text":"template < typename D > std :: vector < D > operator * ( std :: vector < D > first , std :: vector < D > second ) vector*vector Parameters : first second Template Parameters : D Return : std::vector","title":"function operator*"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_1","text":"template < typename D > std :: vector < D > operator * ( D s , std :: vector < D > v ) var*vector Parameters : s v Template Parameters : D Return : std::vector","title":"function operator*"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_2","text":"template < typename D > std :: vector < D > operator * ( std :: vector < D > v , D s ) vector*var Parameters : v s Template Parameters : D Return : std::vector","title":"function operator*"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_3","text":"template < typename D > std :: vector < D > operator + ( std :: vector < D > first , std :: vector < D > second ) vector+vector Parameters : first second Template Parameters : D Return : std::vector","title":"function operator+"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_4","text":"template < typename D > std :: vector < D > operator + ( D s , std :: vector < D > v ) var+vector Parameters : s v Template Parameters : D Return : std::vector","title":"function operator+"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_5","text":"template < typename D > std :: vector < D > operator + ( std :: vector < D > v , D s ) vector+var Parameters : v s Template Parameters : D Return : std::vector","title":"function operator+"},{"location":"doxygen/Files/vecop_8hpp/#function-operator-","text":"template < typename D > std :: vector < D > operator - ( std :: vector < D > first , std :: vector < D > second ) vector-vector Parameters : first second Template Parameters : D Return : std::vector","title":"function operator-"},{"location":"doxygen/Files/vecop_8hpp/#function-operator-_1","text":"template < typename D > std :: vector < D > operator - ( D s , std :: vector < D > v ) var-vector Parameters : s v Template Parameters : D Return : std::vector","title":"function operator-"},{"location":"doxygen/Files/vecop_8hpp/#function-operator-_2","text":"template < typename D > std :: vector < D > operator - ( std :: vector < D > v , D s ) vector-var Parameters : v s Template Parameters : D Return : std::vector","title":"function operator-"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_6","text":"template < typename D > std :: vector < D > operator / ( std :: vector < D > first , std :: vector < D > second ) vector/vector Parameters : first second Template Parameters : D Return : std::vector","title":"function operator/"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_7","text":"template < typename D > std :: vector < D > operator / ( D s , std :: vector < D > v ) var/vector Parameters : s v Template Parameters : D Return : std::vector","title":"function operator/"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_8","text":"template < typename D > std :: vector < D > operator / ( std :: vector < D > v , D s ) vector/var Parameters : v s Template Parameters : D Return : std::vector","title":"function operator/"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_9","text":"template < typename D > std :: ostream & operator << ( std :: ostream & out , std :: vector < D > & other ) cout << vector Parameters : out other Template Parameters : D Return : std::ostream&","title":"function operator&lt;&lt;"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_10","text":"template < typename D > std :: istream & operator >> ( std :: istream & input , std :: vector < D > & other ) input operator Parameters : input other Template Parameters : D Return : std::istream&","title":"function operator&gt;&gt;"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_11","text":"template < typename D > std :: vector < D > operator % ( std :: vector < D > v , D s )","title":"function operator%"},{"location":"doxygen/Files/vecop_8hpp/#function-operator_12","text":"template < typename D > bool operator == ( std :: vector < D > a , std :: vector < D > b ) equal operator Parameters : a b Template Parameters : D Return : true false","title":"function operator=="},{"location":"doxygen/Files/vecop_8hpp/#source-code","text":"#pragma once #include <iostream> #include <sstream> #include <vector> // ********************** multiply **************************** template < typename D > std :: vector < D > operator * ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator * -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] * second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator * ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s * v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator * ( std :: vector < D > v , D s ) { return s * v ; } // ********************** add **************************** template < typename D > std :: vector < D > operator + ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator + -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] + second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator + ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s + v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator + ( std :: vector < D > v , D s ) { return s + v ; } // ********************** subtract **************************** template < typename D > std :: vector < D > operator - ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator - -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] - second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator - ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s - v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator - ( std :: vector < D > v , D s ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( v [ i ] - s ); } return temp ; } // ********************** divide **************************** template < typename D > std :: vector < D > operator / ( std :: vector < D > first , std :: vector < D > second ) { if ( first . size () != second . size ()) { throw std :: invalid_argument ( \"std::vector::operator / -> Invalid size\" ); } std :: vector < D > temp ; for ( int i = 0 ; i < first . size (); i ++ ) { temp . push_back ( first [ i ] / second [ i ]); } return temp ; } template < typename D > std :: vector < D > operator / ( D s , std :: vector < D > v ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( s / v [ i ]); } return temp ; } template < typename D > std :: vector < D > operator / ( std :: vector < D > v , D s ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( v [ i ] / s ); } return temp ; } // ********************** streams **************************** template < typename D > std :: ostream & operator << ( std :: ostream & out , std :: vector < D > & other ) { for ( int i = 0 ; i < other . size (); i ++ ) { out << other [ i ]; if ( other [ i ] != other [ other . size () - 1 ]) { out << \",\" ; } } return out ; } template < typename D > std :: istream & operator >> ( std :: istream & input , std :: vector < D > & other ) { std :: string line ; getline ( input , line ); std :: stringstream LINE ; LINE << line ; std :: string temp ; D var ; while ( LINE . good ()) { getline ( LINE , temp , ',' ); if ( std :: stringstream ( temp ) >> var ) { other . push_back ( var ); } } return input ; } // ********************** others operators **************************** template < typename D > std :: vector < D > operator % ( std :: vector < D > v , D s ) { std :: vector < D > temp ; for ( int i = 0 ; i < v . size (); i ++ ) { temp . push_back ( v [ i ] % s ); } return temp ; } // *********************** comparison ******************************** // TODOconditional operators template < typename D > bool operator == ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"std::vector::operator == -> Invalid size\" ); } for ( int i = 0 ; i < a . size (); i ++ ) { if ( a [ i ] != b [ i ]) { return false ; } } return true ; } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Files/vect_8hpp/","text":"includes/numerical/vect.hpp Will contain functions that manipulate vectors. More... Namespaces Name vect Contains functions regarding vector operations and 1D array mathematics. Functions Name template <typename D > std::vector< D > round (std::vector< D > & a, int dp =0) Rounding the vector by using mth::round . template <typename D > D min (std::vector< D > & a) template <typename D > D max (std::vector< D > & a) template <typename D > D sum (std::vector< D > & a) template <typename D > std::vector< D > sort_asc (std::vector< D > & a) template <typename D > std::vector< D > abs (std::vector< D > & a) template <typename D > std::vector< D > pow (std::vector< D > a, D b) vector^b template <typename D > std::vector< D > pow (std::vector< D > a, std::vector< D > b) vector^vector template <typename D > std::vector< D > sin (std::vector< D > a) template <typename D > std::vector< D > cos (std::vector< D > a) template <typename D > std::vector< D > tan (std::vector< D > a) template <typename D > std::vector< D > sec (std::vector< D > a) template <typename D > std::vector< D > csc (std::vector< D > a) template <typename D > std::vector< D > cot (std::vector< D > a) template <typename D > std::vector< D > asin (std::vector< D > a) template <typename D > std::vector< D > acos (std::vector< D > a) template <typename D > std::vector< D > atan (std::vector< D > a) template <typename D > std::vector< D > asec (std::vector< D > a) template <typename D > std::vector< D > acsc (std::vector< D > a) template <typename D > std::vector< D > acot (std::vector< D > a) template <typename D > std::vector< D > sinh (std::vector< D > a) template <typename D > std::vector< D > cosh (std::vector< D > a) template <typename D > std::vector< D > tanh (std::vector< D > a) template <typename D > std::vector< D > sech (std::vector< D > a) template <typename D > std::vector< D > csch (std::vector< D > a) template <typename D > std::vector< D > coth (std::vector< D > a) template <typename D > std::vector< D > asinh (std::vector< D > a) template <typename D > std::vector< D > acosh (std::vector< D > a) template <typename D > std::vector< D > atanh (std::vector< D > a) template <typename D > std::vector< D > asech (std::vector< D > a) template <typename D > std::vector< D > acsch (std::vector< D > a) template <typename D > std::vector< D > acoth (std::vector< D > a) template <typename D > std::vector< D > exp (std::vector< D > a) template <typename D ,typename LAMBDA > std::vector< D > vec_op (LAMBDA f, std::vector< D > & x) Runs lambda function on vector array. template <typename D > std::vector< D > difference (std::vector< D > & a) difference of elements in vector template <typename D > std::vector< D > averages (std::vector< D > & a) average of elements in vector template <typename D > std::vector< D > arange (D start, D end, D diff) template <typename D > std::vector< D > linspace (D start, D end, int count) template <typename D > std::vector< D > dot (std::vector< D > a, std::vector< D > b) template <typename D > std::vector< D > cross (std::vector< D > a, std::vector< D > b) Detailed Description Will contain functions that manipulate vectors. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022 Functions Documentation function round template < typename D > std :: vector < D > round ( std :: vector < D > & a , int dp = 0 ) Rounding the vector by using mth::round . Parameters : a vector input dp number of decimal places Template Parameters : D Type Return : std::vector : vector output function min template < typename D > D min ( std :: vector < D > & a ) function max template < typename D > D max ( std :: vector < D > & a ) function sum template < typename D > D sum ( std :: vector < D > & a ) function sort_asc template < typename D > std :: vector < D > sort_asc ( std :: vector < D > & a ) function abs template < typename D > std :: vector < D > abs ( std :: vector < D > & a ) function pow template < typename D > std :: vector < D > pow ( std :: vector < D > a , D b ) vector^b Parameters : a b Template Parameters : D Return : std::vector function pow template < typename D > std :: vector < D > pow ( std :: vector < D > a , std :: vector < D > b ) vector^vector Parameters : a b Template Parameters : D Return : std::vector function sin template < typename D > std :: vector < D > sin ( std :: vector < D > a ) function cos template < typename D > std :: vector < D > cos ( std :: vector < D > a ) function tan template < typename D > std :: vector < D > tan ( std :: vector < D > a ) function sec template < typename D > std :: vector < D > sec ( std :: vector < D > a ) function csc template < typename D > std :: vector < D > csc ( std :: vector < D > a ) function cot template < typename D > std :: vector < D > cot ( std :: vector < D > a ) function asin template < typename D > std :: vector < D > asin ( std :: vector < D > a ) function acos template < typename D > std :: vector < D > acos ( std :: vector < D > a ) function atan template < typename D > std :: vector < D > atan ( std :: vector < D > a ) function asec template < typename D > std :: vector < D > asec ( std :: vector < D > a ) function acsc template < typename D > std :: vector < D > acsc ( std :: vector < D > a ) function acot template < typename D > std :: vector < D > acot ( std :: vector < D > a ) function sinh template < typename D > std :: vector < D > sinh ( std :: vector < D > a ) function cosh template < typename D > std :: vector < D > cosh ( std :: vector < D > a ) function tanh template < typename D > std :: vector < D > tanh ( std :: vector < D > a ) function sech template < typename D > std :: vector < D > sech ( std :: vector < D > a ) function csch template < typename D > std :: vector < D > csch ( std :: vector < D > a ) function coth template < typename D > std :: vector < D > coth ( std :: vector < D > a ) function asinh template < typename D > std :: vector < D > asinh ( std :: vector < D > a ) function acosh template < typename D > std :: vector < D > acosh ( std :: vector < D > a ) function atanh template < typename D > std :: vector < D > atanh ( std :: vector < D > a ) function asech template < typename D > std :: vector < D > asech ( std :: vector < D > a ) function acsch template < typename D > std :: vector < D > acsch ( std :: vector < D > a ) function acoth template < typename D > std :: vector < D > acoth ( std :: vector < D > a ) function exp template < typename D > std :: vector < D > exp ( std :: vector < D > a ) function vec_op template < typename D , typename LAMBDA > std :: vector < D > vec_op ( LAMBDA f , std :: vector < D > & x ) Runs lambda function on vector array. Parameters : f x Template Parameters : D LAMBDA Return : std::vector function difference template < typename D > std :: vector < D > difference ( std :: vector < D > & a ) difference of elements in vector Parameters : a Template Parameters : D Return : std::vector function averages template < typename D > std :: vector < D > averages ( std :: vector < D > & a ) average of elements in vector Parameters : a Template Parameters : D Return : std::vector function arange template < typename D > std :: vector < D > arange ( D start , D end , D diff ) function linspace template < typename D > std :: vector < D > linspace ( D start , D end , int count ) function dot template < typename D > std :: vector < D > dot ( std :: vector < D > a , std :: vector < D > b ) function cross template < typename D > std :: vector < D > cross ( std :: vector < D > a , std :: vector < D > b ) Source code #pragma once #include \"../mathematic/mathematic.hpp\" namespace vect { template < typename D > std :: vector < D > round ( std :: vector < D > & a , int dp = 0 ) { std :: vector < D > b ; for ( int i = 0 ; i < a . size (); i ++ ) { b . push_back ( mth :: round ( a [ i ], dp )); } return b ; } template < typename D > D min ( std :: vector < D > & a ) { D mmin = * std :: min_element ( a . begin (), a . end ()); return mmin ; } template < typename D > D max ( std :: vector < D > & a ) { D mmax = * std :: max_element ( a . begin (), a . end ()); return mmax ; } template < typename D > D sum ( std :: vector < D > & a ) { D sm ; for ( auto & i : a ) { sm += i ; } return sm ; } template < typename D > std :: vector < D > sort_asc ( std :: vector < D > & a ) { } template < typename D > std :: vector < D > abs ( std :: vector < D > & a ) { } template < typename D > std :: vector < D > pow ( std :: vector < D > a , D b ) { std :: vector < D > temp ; for ( int i = 0 ; i < a . size (); i ++ ) { temp . push_back ( std :: pow ( a [ i ], b )); } return temp ; } template < typename D > std :: vector < D > pow ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"mth::pow -> Invalid size\" ); } std :: vector < D > temp ; D temp2 = 1 ; for ( int i = 0 ; i < a . size (); i ++ ) { temp . push_back ( std :: pow ( a [ i ], b [ i ])); } return temp ; } // ********************************************************* // template < typename D > std :: vector < D > sin ( std :: vector < D > a ) { } template < typename D > std :: vector < D > cos ( std :: vector < D > a ) { } template < typename D > std :: vector < D > tan ( std :: vector < D > a ) { } template < typename D > std :: vector < D > sec ( std :: vector < D > a ) { } template < typename D > std :: vector < D > csc ( std :: vector < D > a ) { } template < typename D > std :: vector < D > cot ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asin ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acos ( std :: vector < D > a ) { } template < typename D > std :: vector < D > atan ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asec ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acsc ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acot ( std :: vector < D > a ) { } // ********************************************************* // template < typename D > std :: vector < D > sinh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > cosh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > tanh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > sech ( std :: vector < D > a ) { } template < typename D > std :: vector < D > csch ( std :: vector < D > a ) { } template < typename D > std :: vector < D > coth ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asinh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acosh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > atanh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asech ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acsch ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acoth ( std :: vector < D > a ) { } // ********************************************************* // template < typename D > std :: vector < D > exp ( std :: vector < D > a ) { } // ********************************************************* // template < typename D , typename LAMBDA > std :: vector < D > vec_op ( LAMBDA f , std :: vector < D > & x ) { std :: vector < D > y ; for ( int i = 0 ; i < x . size (); i ++ ) { y . push_back ( f ( x [ i ])); } return y ; } template < typename D > std :: vector < D > difference ( std :: vector < D > & a ) { std :: vector < D > temp ; for ( int i = 0 ; i < a . size () - 1 ; i ++ ) { temp . push_back ( a [ i + 1 ] - a [ i ]); } return temp ; } template < typename D > std :: vector < D > averages ( std :: vector < D > & a ) { std :: vector < D > temp ; for ( int i = 0 ; i < a . size () - 1 ; i ++ ) { temp . push_back (( a [ i + 1 ] + a [ i ]) * D ( 0.5 )); } return temp ; } template < typename D > std :: vector < D > arange ( D start , D end , D diff ) { std :: vector < D > temp ; for ( D i = start ; i < end ; i += diff ) { temp . push_back ( i ); } return temp ; } template < typename D > std :: vector < D > linspace ( D start , D end , int count ) { } template < typename D > std :: vector < D > dot ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"num::vec::dot -> Invalid size\" ); } } template < typename D > std :: vector < D > cross ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"num::vec::cross -> Invalid size\" ); } } } Updated on 20 August 2022 at 21:24:15 EEST","title":"includes/numerical/vect.hpp"},{"location":"doxygen/Files/vect_8hpp/#includesnumericalvecthpp","text":"Will contain functions that manipulate vectors. More...","title":"includes/numerical/vect.hpp"},{"location":"doxygen/Files/vect_8hpp/#namespaces","text":"Name vect Contains functions regarding vector operations and 1D array mathematics.","title":"Namespaces"},{"location":"doxygen/Files/vect_8hpp/#functions","text":"Name template <typename D > std::vector< D > round (std::vector< D > & a, int dp =0) Rounding the vector by using mth::round . template <typename D > D min (std::vector< D > & a) template <typename D > D max (std::vector< D > & a) template <typename D > D sum (std::vector< D > & a) template <typename D > std::vector< D > sort_asc (std::vector< D > & a) template <typename D > std::vector< D > abs (std::vector< D > & a) template <typename D > std::vector< D > pow (std::vector< D > a, D b) vector^b template <typename D > std::vector< D > pow (std::vector< D > a, std::vector< D > b) vector^vector template <typename D > std::vector< D > sin (std::vector< D > a) template <typename D > std::vector< D > cos (std::vector< D > a) template <typename D > std::vector< D > tan (std::vector< D > a) template <typename D > std::vector< D > sec (std::vector< D > a) template <typename D > std::vector< D > csc (std::vector< D > a) template <typename D > std::vector< D > cot (std::vector< D > a) template <typename D > std::vector< D > asin (std::vector< D > a) template <typename D > std::vector< D > acos (std::vector< D > a) template <typename D > std::vector< D > atan (std::vector< D > a) template <typename D > std::vector< D > asec (std::vector< D > a) template <typename D > std::vector< D > acsc (std::vector< D > a) template <typename D > std::vector< D > acot (std::vector< D > a) template <typename D > std::vector< D > sinh (std::vector< D > a) template <typename D > std::vector< D > cosh (std::vector< D > a) template <typename D > std::vector< D > tanh (std::vector< D > a) template <typename D > std::vector< D > sech (std::vector< D > a) template <typename D > std::vector< D > csch (std::vector< D > a) template <typename D > std::vector< D > coth (std::vector< D > a) template <typename D > std::vector< D > asinh (std::vector< D > a) template <typename D > std::vector< D > acosh (std::vector< D > a) template <typename D > std::vector< D > atanh (std::vector< D > a) template <typename D > std::vector< D > asech (std::vector< D > a) template <typename D > std::vector< D > acsch (std::vector< D > a) template <typename D > std::vector< D > acoth (std::vector< D > a) template <typename D > std::vector< D > exp (std::vector< D > a) template <typename D ,typename LAMBDA > std::vector< D > vec_op (LAMBDA f, std::vector< D > & x) Runs lambda function on vector array. template <typename D > std::vector< D > difference (std::vector< D > & a) difference of elements in vector template <typename D > std::vector< D > averages (std::vector< D > & a) average of elements in vector template <typename D > std::vector< D > arange (D start, D end, D diff) template <typename D > std::vector< D > linspace (D start, D end, int count) template <typename D > std::vector< D > dot (std::vector< D > a, std::vector< D > b) template <typename D > std::vector< D > cross (std::vector< D > a, std::vector< D > b)","title":"Functions"},{"location":"doxygen/Files/vect_8hpp/#detailed-description","text":"Will contain functions that manipulate vectors. Author : Harith Al-Safi ( harith.alsafi@gmail.com ) Version : 1.0 Date : 08/08/2022 Copyright : Copyright (c) 2022","title":"Detailed Description"},{"location":"doxygen/Files/vect_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Files/vect_8hpp/#function-round","text":"template < typename D > std :: vector < D > round ( std :: vector < D > & a , int dp = 0 ) Rounding the vector by using mth::round . Parameters : a vector input dp number of decimal places Template Parameters : D Type Return : std::vector : vector output","title":"function round"},{"location":"doxygen/Files/vect_8hpp/#function-min","text":"template < typename D > D min ( std :: vector < D > & a )","title":"function min"},{"location":"doxygen/Files/vect_8hpp/#function-max","text":"template < typename D > D max ( std :: vector < D > & a )","title":"function max"},{"location":"doxygen/Files/vect_8hpp/#function-sum","text":"template < typename D > D sum ( std :: vector < D > & a )","title":"function sum"},{"location":"doxygen/Files/vect_8hpp/#function-sort_asc","text":"template < typename D > std :: vector < D > sort_asc ( std :: vector < D > & a )","title":"function sort_asc"},{"location":"doxygen/Files/vect_8hpp/#function-abs","text":"template < typename D > std :: vector < D > abs ( std :: vector < D > & a )","title":"function abs"},{"location":"doxygen/Files/vect_8hpp/#function-pow","text":"template < typename D > std :: vector < D > pow ( std :: vector < D > a , D b ) vector^b Parameters : a b Template Parameters : D Return : std::vector","title":"function pow"},{"location":"doxygen/Files/vect_8hpp/#function-pow_1","text":"template < typename D > std :: vector < D > pow ( std :: vector < D > a , std :: vector < D > b ) vector^vector Parameters : a b Template Parameters : D Return : std::vector","title":"function pow"},{"location":"doxygen/Files/vect_8hpp/#function-sin","text":"template < typename D > std :: vector < D > sin ( std :: vector < D > a )","title":"function sin"},{"location":"doxygen/Files/vect_8hpp/#function-cos","text":"template < typename D > std :: vector < D > cos ( std :: vector < D > a )","title":"function cos"},{"location":"doxygen/Files/vect_8hpp/#function-tan","text":"template < typename D > std :: vector < D > tan ( std :: vector < D > a )","title":"function tan"},{"location":"doxygen/Files/vect_8hpp/#function-sec","text":"template < typename D > std :: vector < D > sec ( std :: vector < D > a )","title":"function sec"},{"location":"doxygen/Files/vect_8hpp/#function-csc","text":"template < typename D > std :: vector < D > csc ( std :: vector < D > a )","title":"function csc"},{"location":"doxygen/Files/vect_8hpp/#function-cot","text":"template < typename D > std :: vector < D > cot ( std :: vector < D > a )","title":"function cot"},{"location":"doxygen/Files/vect_8hpp/#function-asin","text":"template < typename D > std :: vector < D > asin ( std :: vector < D > a )","title":"function asin"},{"location":"doxygen/Files/vect_8hpp/#function-acos","text":"template < typename D > std :: vector < D > acos ( std :: vector < D > a )","title":"function acos"},{"location":"doxygen/Files/vect_8hpp/#function-atan","text":"template < typename D > std :: vector < D > atan ( std :: vector < D > a )","title":"function atan"},{"location":"doxygen/Files/vect_8hpp/#function-asec","text":"template < typename D > std :: vector < D > asec ( std :: vector < D > a )","title":"function asec"},{"location":"doxygen/Files/vect_8hpp/#function-acsc","text":"template < typename D > std :: vector < D > acsc ( std :: vector < D > a )","title":"function acsc"},{"location":"doxygen/Files/vect_8hpp/#function-acot","text":"template < typename D > std :: vector < D > acot ( std :: vector < D > a )","title":"function acot"},{"location":"doxygen/Files/vect_8hpp/#function-sinh","text":"template < typename D > std :: vector < D > sinh ( std :: vector < D > a )","title":"function sinh"},{"location":"doxygen/Files/vect_8hpp/#function-cosh","text":"template < typename D > std :: vector < D > cosh ( std :: vector < D > a )","title":"function cosh"},{"location":"doxygen/Files/vect_8hpp/#function-tanh","text":"template < typename D > std :: vector < D > tanh ( std :: vector < D > a )","title":"function tanh"},{"location":"doxygen/Files/vect_8hpp/#function-sech","text":"template < typename D > std :: vector < D > sech ( std :: vector < D > a )","title":"function sech"},{"location":"doxygen/Files/vect_8hpp/#function-csch","text":"template < typename D > std :: vector < D > csch ( std :: vector < D > a )","title":"function csch"},{"location":"doxygen/Files/vect_8hpp/#function-coth","text":"template < typename D > std :: vector < D > coth ( std :: vector < D > a )","title":"function coth"},{"location":"doxygen/Files/vect_8hpp/#function-asinh","text":"template < typename D > std :: vector < D > asinh ( std :: vector < D > a )","title":"function asinh"},{"location":"doxygen/Files/vect_8hpp/#function-acosh","text":"template < typename D > std :: vector < D > acosh ( std :: vector < D > a )","title":"function acosh"},{"location":"doxygen/Files/vect_8hpp/#function-atanh","text":"template < typename D > std :: vector < D > atanh ( std :: vector < D > a )","title":"function atanh"},{"location":"doxygen/Files/vect_8hpp/#function-asech","text":"template < typename D > std :: vector < D > asech ( std :: vector < D > a )","title":"function asech"},{"location":"doxygen/Files/vect_8hpp/#function-acsch","text":"template < typename D > std :: vector < D > acsch ( std :: vector < D > a )","title":"function acsch"},{"location":"doxygen/Files/vect_8hpp/#function-acoth","text":"template < typename D > std :: vector < D > acoth ( std :: vector < D > a )","title":"function acoth"},{"location":"doxygen/Files/vect_8hpp/#function-exp","text":"template < typename D > std :: vector < D > exp ( std :: vector < D > a )","title":"function exp"},{"location":"doxygen/Files/vect_8hpp/#function-vec_op","text":"template < typename D , typename LAMBDA > std :: vector < D > vec_op ( LAMBDA f , std :: vector < D > & x ) Runs lambda function on vector array. Parameters : f x Template Parameters : D LAMBDA Return : std::vector","title":"function vec_op"},{"location":"doxygen/Files/vect_8hpp/#function-difference","text":"template < typename D > std :: vector < D > difference ( std :: vector < D > & a ) difference of elements in vector Parameters : a Template Parameters : D Return : std::vector","title":"function difference"},{"location":"doxygen/Files/vect_8hpp/#function-averages","text":"template < typename D > std :: vector < D > averages ( std :: vector < D > & a ) average of elements in vector Parameters : a Template Parameters : D Return : std::vector","title":"function averages"},{"location":"doxygen/Files/vect_8hpp/#function-arange","text":"template < typename D > std :: vector < D > arange ( D start , D end , D diff )","title":"function arange"},{"location":"doxygen/Files/vect_8hpp/#function-linspace","text":"template < typename D > std :: vector < D > linspace ( D start , D end , int count )","title":"function linspace"},{"location":"doxygen/Files/vect_8hpp/#function-dot","text":"template < typename D > std :: vector < D > dot ( std :: vector < D > a , std :: vector < D > b )","title":"function dot"},{"location":"doxygen/Files/vect_8hpp/#function-cross","text":"template < typename D > std :: vector < D > cross ( std :: vector < D > a , std :: vector < D > b )","title":"function cross"},{"location":"doxygen/Files/vect_8hpp/#source-code","text":"#pragma once #include \"../mathematic/mathematic.hpp\" namespace vect { template < typename D > std :: vector < D > round ( std :: vector < D > & a , int dp = 0 ) { std :: vector < D > b ; for ( int i = 0 ; i < a . size (); i ++ ) { b . push_back ( mth :: round ( a [ i ], dp )); } return b ; } template < typename D > D min ( std :: vector < D > & a ) { D mmin = * std :: min_element ( a . begin (), a . end ()); return mmin ; } template < typename D > D max ( std :: vector < D > & a ) { D mmax = * std :: max_element ( a . begin (), a . end ()); return mmax ; } template < typename D > D sum ( std :: vector < D > & a ) { D sm ; for ( auto & i : a ) { sm += i ; } return sm ; } template < typename D > std :: vector < D > sort_asc ( std :: vector < D > & a ) { } template < typename D > std :: vector < D > abs ( std :: vector < D > & a ) { } template < typename D > std :: vector < D > pow ( std :: vector < D > a , D b ) { std :: vector < D > temp ; for ( int i = 0 ; i < a . size (); i ++ ) { temp . push_back ( std :: pow ( a [ i ], b )); } return temp ; } template < typename D > std :: vector < D > pow ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"mth::pow -> Invalid size\" ); } std :: vector < D > temp ; D temp2 = 1 ; for ( int i = 0 ; i < a . size (); i ++ ) { temp . push_back ( std :: pow ( a [ i ], b [ i ])); } return temp ; } // ********************************************************* // template < typename D > std :: vector < D > sin ( std :: vector < D > a ) { } template < typename D > std :: vector < D > cos ( std :: vector < D > a ) { } template < typename D > std :: vector < D > tan ( std :: vector < D > a ) { } template < typename D > std :: vector < D > sec ( std :: vector < D > a ) { } template < typename D > std :: vector < D > csc ( std :: vector < D > a ) { } template < typename D > std :: vector < D > cot ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asin ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acos ( std :: vector < D > a ) { } template < typename D > std :: vector < D > atan ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asec ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acsc ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acot ( std :: vector < D > a ) { } // ********************************************************* // template < typename D > std :: vector < D > sinh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > cosh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > tanh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > sech ( std :: vector < D > a ) { } template < typename D > std :: vector < D > csch ( std :: vector < D > a ) { } template < typename D > std :: vector < D > coth ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asinh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acosh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > atanh ( std :: vector < D > a ) { } template < typename D > std :: vector < D > asech ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acsch ( std :: vector < D > a ) { } template < typename D > std :: vector < D > acoth ( std :: vector < D > a ) { } // ********************************************************* // template < typename D > std :: vector < D > exp ( std :: vector < D > a ) { } // ********************************************************* // template < typename D , typename LAMBDA > std :: vector < D > vec_op ( LAMBDA f , std :: vector < D > & x ) { std :: vector < D > y ; for ( int i = 0 ; i < x . size (); i ++ ) { y . push_back ( f ( x [ i ])); } return y ; } template < typename D > std :: vector < D > difference ( std :: vector < D > & a ) { std :: vector < D > temp ; for ( int i = 0 ; i < a . size () - 1 ; i ++ ) { temp . push_back ( a [ i + 1 ] - a [ i ]); } return temp ; } template < typename D > std :: vector < D > averages ( std :: vector < D > & a ) { std :: vector < D > temp ; for ( int i = 0 ; i < a . size () - 1 ; i ++ ) { temp . push_back (( a [ i + 1 ] + a [ i ]) * D ( 0.5 )); } return temp ; } template < typename D > std :: vector < D > arange ( D start , D end , D diff ) { std :: vector < D > temp ; for ( D i = start ; i < end ; i += diff ) { temp . push_back ( i ); } return temp ; } template < typename D > std :: vector < D > linspace ( D start , D end , int count ) { } template < typename D > std :: vector < D > dot ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"num::vec::dot -> Invalid size\" ); } } template < typename D > std :: vector < D > cross ( std :: vector < D > a , std :: vector < D > b ) { if ( a . size () != b . size ()) { throw std :: invalid_argument ( \"num::vec::cross -> Invalid size\" ); } } } Updated on 20 August 2022 at 21:24:15 EEST","title":"Source code"},{"location":"doxygen/Modules/","text":"Modules Updated on 20 August 2022 at 21:24:15 EEST","title":"Modules"},{"location":"doxygen/Modules/#modules","text":"Updated on 20 August 2022 at 21:24:15 EEST","title":"Modules"},{"location":"doxygen/Modules/group__Getters/","text":"Getters Updated on 18 August 2022 at 23:54:12 EEST","title":"Getters"},{"location":"doxygen/Modules/group__Getters/#getters","text":"Updated on 18 August 2022 at 23:54:12 EEST","title":"Getters"},{"location":"doxygen/Modules/group__Variables/","text":"Global variables Functions Name int row () Get the row size. int col () Get the col size. std::vector< std::string > get_col_names () void set_col_names (std::vector< std::string > names) std::vector< std::string > get_row_names () void set_row_names (std::vector< std::string > names) D & get_element (int i, int j) Functions Documentation function row inline int row () Get the row size. Return : int function col inline int col () Get the col size. Return : int function get_col_names inline std :: vector < std :: string > get_col_names () function set_col_names inline void set_col_names ( std :: vector < std :: string > names ) function get_row_names inline std :: vector < std :: string > get_row_names () function set_row_names inline void set_row_names ( std :: vector < std :: string > names ) function get_element inline D & get_element ( int i , int j ) Updated on 18 August 2022 at 23:45:05 EEST","title":"Global variables"},{"location":"doxygen/Modules/group__Variables/#global-variables","text":"","title":"Global variables"},{"location":"doxygen/Modules/group__Variables/#functions","text":"Name int row () Get the row size. int col () Get the col size. std::vector< std::string > get_col_names () void set_col_names (std::vector< std::string > names) std::vector< std::string > get_row_names () void set_row_names (std::vector< std::string > names) D & get_element (int i, int j)","title":"Functions"},{"location":"doxygen/Modules/group__Variables/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Modules/group__Variables/#function-row","text":"inline int row () Get the row size. Return : int","title":"function row"},{"location":"doxygen/Modules/group__Variables/#function-col","text":"inline int col () Get the col size. Return : int","title":"function col"},{"location":"doxygen/Modules/group__Variables/#function-get_col_names","text":"inline std :: vector < std :: string > get_col_names ()","title":"function get_col_names"},{"location":"doxygen/Modules/group__Variables/#function-set_col_names","text":"inline void set_col_names ( std :: vector < std :: string > names )","title":"function set_col_names"},{"location":"doxygen/Modules/group__Variables/#function-get_row_names","text":"inline std :: vector < std :: string > get_row_names ()","title":"function get_row_names"},{"location":"doxygen/Modules/group__Variables/#function-set_row_names","text":"inline void set_row_names ( std :: vector < std :: string > names )","title":"function set_row_names"},{"location":"doxygen/Modules/group__Variables/#function-get_element","text":"inline D & get_element ( int i , int j ) Updated on 18 August 2022 at 23:45:05 EEST","title":"function get_element"},{"location":"doxygen/Modules/group__group1/","text":"The First Group More... Functions Name int row () Get the row size. int col () Get the col size. std::vector< std::string > get_col_names () void set_col_names (std::vector< std::string > names) std::vector< std::string > get_row_names () void set_row_names (std::vector< std::string > names) D & get_element (int i, int j) Detailed Description This is the first group Functions Documentation function row inline int row () Get the row size. Return : int function col inline int col () Get the col size. Return : int function get_col_names inline std :: vector < std :: string > get_col_names () function set_col_names inline void set_col_names ( std :: vector < std :: string > names ) function get_row_names inline std :: vector < std :: string > get_row_names () function set_row_names inline void set_row_names ( std :: vector < std :: string > names ) function get_element inline D & get_element ( int i , int j ) Updated on 18 August 2022 at 23:46:22 EEST","title":"The First Group"},{"location":"doxygen/Modules/group__group1/#the-first-group","text":"More...","title":"The First Group"},{"location":"doxygen/Modules/group__group1/#functions","text":"Name int row () Get the row size. int col () Get the col size. std::vector< std::string > get_col_names () void set_col_names (std::vector< std::string > names) std::vector< std::string > get_row_names () void set_row_names (std::vector< std::string > names) D & get_element (int i, int j)","title":"Functions"},{"location":"doxygen/Modules/group__group1/#detailed-description","text":"This is the first group","title":"Detailed Description"},{"location":"doxygen/Modules/group__group1/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Modules/group__group1/#function-row","text":"inline int row () Get the row size. Return : int","title":"function row"},{"location":"doxygen/Modules/group__group1/#function-col","text":"inline int col () Get the col size. Return : int","title":"function col"},{"location":"doxygen/Modules/group__group1/#function-get_col_names","text":"inline std :: vector < std :: string > get_col_names ()","title":"function get_col_names"},{"location":"doxygen/Modules/group__group1/#function-set_col_names","text":"inline void set_col_names ( std :: vector < std :: string > names )","title":"function set_col_names"},{"location":"doxygen/Modules/group__group1/#function-get_row_names","text":"inline std :: vector < std :: string > get_row_names ()","title":"function get_row_names"},{"location":"doxygen/Modules/group__group1/#function-set_row_names","text":"inline void set_row_names ( std :: vector < std :: string > names )","title":"function set_row_names"},{"location":"doxygen/Modules/group__group1/#function-get_element","text":"inline D & get_element ( int i , int j ) Updated on 18 August 2022 at 23:46:22 EEST","title":"function get_element"},{"location":"doxygen/Namespaces/","text":"Namespaces namespace alg Arithematic functions and solvers. namespace calc Contains differential and integral calculus functions. namespace lalg Contains functions related to matrices and linear algebra. namespace mth Generic mathematical functions. namespace sig All communication theory and signal processing functions. namespace stats Statistical functions. namespace var Namespace that contains all variable data types. namespace vect Contains functions regarding vector operations and 1D array mathematics. Updated on 20 August 2022 at 21:24:15 EEST","title":"Namespaces"},{"location":"doxygen/Namespaces/#namespaces","text":"namespace alg Arithematic functions and solvers. namespace calc Contains differential and integral calculus functions. namespace lalg Contains functions related to matrices and linear algebra. namespace mth Generic mathematical functions. namespace sig All communication theory and signal processing functions. namespace stats Statistical functions. namespace var Namespace that contains all variable data types. namespace vect Contains functions regarding vector operations and 1D array mathematics. Updated on 20 August 2022 at 21:24:15 EEST","title":"Namespaces"},{"location":"doxygen/Namespaces/namespacealg/","text":"alg Arithematic functions and solvers. More... Classes Name struct alg::ans Functions Name template <typename D ,typename LAMBDA > std::vector< D > root (LAMBDA f, D tol =D(1000)) template <typename D ,typename LAMBDA > std::vector< D > newton_root (LAMBDA f, D x0) template <typename D > ans < D > poly_root (int n, std::vector< D > a) template <typename D > D linear_root (std::vector< D > eq) Linear root through inputing Ax+C such that it is represented as vector {A, C}. template <typename D ,typename LAMBDA > D bisection_root (LAMBDA f, D min, D max, D tol =D(0.00001)) Used to get real roots through bisection method. template <typename D > std::vector< D > linear_sim ( var::matrix < D > eq) Solves a system of linear equations expressed as a matrix. Detailed Description Arithematic functions and solvers. Short for ALGebra Functions Documentation function root template < typename D , typename LAMBDA > std :: vector < D > root ( LAMBDA f , D tol = D ( 1000 ) ) function newton_root template < typename D , typename LAMBDA > std :: vector < D > newton_root ( LAMBDA f , D x0 ) function poly_root template < typename D > ans < D > poly_root ( int n , std :: vector < D > a ) function linear_root template < typename D > D linear_root ( std :: vector < D > eq ) Linear root through inputing Ax+C such that it is represented as vector {A, C}. Parameters : eq Template Parameters : D Return : D Usage : // answer of x+2 = 0; auto ans = linear ({ 1 , 2 }); function bisection_root template < typename D , typename LAMBDA > D bisection_root ( LAMBDA f , D min , D max , D tol = D ( 0.00001 ) ) Used to get real roots through bisection method. Parameters : f function min minimum value max maximum value tol tolerance Template Parameters : D LAMBDA Return : D Usage : // roots between -5 and -1 auto ans = bisection_root < double > ( f , -5.0 , -1.0 ); Exception Will throw exceptions as follows: stdruntime_error \\(\\rightarrow \\min\\) is not smaller than \\(\\max\\) `stdlogic_error \\(\\rightarrow \\text{sign}(f(\\min)) == \\text{sign}(f(\\max))\\) which means solution doesn't exist function linear_sim template < typename D > std :: vector < D > linear_sim ( var :: matrix < D > eq ) Solves a system of linear equations expressed as a matrix. Parameters : eq matrix Template Parameters : D Return : std::vector Representing the input \\[ \\displaylines{\\underbrace{\\left[\\begin{array} \\ a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\\\ \\end{array}\\right]}_A \\ \\underbrace{\\left[\\begin{array} \\ x_1 \\\\ x_2 \\\\ x_3 \\\\ \\end{array}\\right]}_x = \\underbrace{\\left[\\begin{array} \\ d_1 \\\\ d_2 \\\\ d_3 \\end{array}\\right]}_b \\\\ eq = \\left[\\begin{array}{rrr:r} a_1 & b_1 & c_1 & d_1 \\\\ a_2 & b_2 & c_2 & d_2 \\\\ a_3 & b_3 & c_3 & d_3 \\\\ \\end{array}\\right]} \\] Updated on 20 August 2022 at 21:24:15 EEST","title":"alg"},{"location":"doxygen/Namespaces/namespacealg/#alg","text":"Arithematic functions and solvers. More...","title":"alg"},{"location":"doxygen/Namespaces/namespacealg/#classes","text":"Name struct alg::ans","title":"Classes"},{"location":"doxygen/Namespaces/namespacealg/#functions","text":"Name template <typename D ,typename LAMBDA > std::vector< D > root (LAMBDA f, D tol =D(1000)) template <typename D ,typename LAMBDA > std::vector< D > newton_root (LAMBDA f, D x0) template <typename D > ans < D > poly_root (int n, std::vector< D > a) template <typename D > D linear_root (std::vector< D > eq) Linear root through inputing Ax+C such that it is represented as vector {A, C}. template <typename D ,typename LAMBDA > D bisection_root (LAMBDA f, D min, D max, D tol =D(0.00001)) Used to get real roots through bisection method. template <typename D > std::vector< D > linear_sim ( var::matrix < D > eq) Solves a system of linear equations expressed as a matrix.","title":"Functions"},{"location":"doxygen/Namespaces/namespacealg/#detailed-description","text":"Arithematic functions and solvers. Short for ALGebra","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacealg/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Namespaces/namespacealg/#function-root","text":"template < typename D , typename LAMBDA > std :: vector < D > root ( LAMBDA f , D tol = D ( 1000 ) )","title":"function root"},{"location":"doxygen/Namespaces/namespacealg/#function-newton_root","text":"template < typename D , typename LAMBDA > std :: vector < D > newton_root ( LAMBDA f , D x0 )","title":"function newton_root"},{"location":"doxygen/Namespaces/namespacealg/#function-poly_root","text":"template < typename D > ans < D > poly_root ( int n , std :: vector < D > a )","title":"function poly_root"},{"location":"doxygen/Namespaces/namespacealg/#function-linear_root","text":"template < typename D > D linear_root ( std :: vector < D > eq ) Linear root through inputing Ax+C such that it is represented as vector {A, C}. Parameters : eq Template Parameters : D Return : D Usage : // answer of x+2 = 0; auto ans = linear ({ 1 , 2 });","title":"function linear_root"},{"location":"doxygen/Namespaces/namespacealg/#function-bisection_root","text":"template < typename D , typename LAMBDA > D bisection_root ( LAMBDA f , D min , D max , D tol = D ( 0.00001 ) ) Used to get real roots through bisection method. Parameters : f function min minimum value max maximum value tol tolerance Template Parameters : D LAMBDA Return : D Usage : // roots between -5 and -1 auto ans = bisection_root < double > ( f , -5.0 , -1.0 ); Exception Will throw exceptions as follows: stdruntime_error \\(\\rightarrow \\min\\) is not smaller than \\(\\max\\) `stdlogic_error \\(\\rightarrow \\text{sign}(f(\\min)) == \\text{sign}(f(\\max))\\) which means solution doesn't exist","title":"function bisection_root"},{"location":"doxygen/Namespaces/namespacealg/#function-linear_sim","text":"template < typename D > std :: vector < D > linear_sim ( var :: matrix < D > eq ) Solves a system of linear equations expressed as a matrix. Parameters : eq matrix Template Parameters : D Return : std::vector Representing the input \\[ \\displaylines{\\underbrace{\\left[\\begin{array} \\ a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\\\ \\end{array}\\right]}_A \\ \\underbrace{\\left[\\begin{array} \\ x_1 \\\\ x_2 \\\\ x_3 \\\\ \\end{array}\\right]}_x = \\underbrace{\\left[\\begin{array} \\ d_1 \\\\ d_2 \\\\ d_3 \\end{array}\\right]}_b \\\\ eq = \\left[\\begin{array}{rrr:r} a_1 & b_1 & c_1 & d_1 \\\\ a_2 & b_2 & c_2 & d_2 \\\\ a_3 & b_3 & c_3 & d_3 \\\\ \\end{array}\\right]} \\] Updated on 20 August 2022 at 21:24:15 EEST","title":"function linear_sim"},{"location":"doxygen/Namespaces/namespacecalc/","text":"calc Contains differential and integral calculus functions. More... Functions Name template <typename LAMBDA ,typename D > D diff (LAMBDA f, D x, unsigned int n =1, D dx =D(0.00001)) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. template <typename D > std::vector< D > diff (std::vector< D > & x, std::vector< D > & y, int n =1) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > diff (LAMBDA f, std::vector< D > & x, int n =1) Derivative of function with given vector. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > taylor (LAMBDA f, std::vector< D > & x, D x0 =D(0)) template <typename D ,typename LAMBDA > std::vector< D > eular_method (LAMBDA f, D x0, unsigned int n) Detailed Description Contains differential and integral calculus functions. Short for CALCulus Functions Documentation function diff template < typename LAMBDA , typename D > D diff ( LAMBDA f , D x , unsigned int n = 1 , D dx = D ( 0.00001 ) ) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. Parameters : f Function x Point n Derivative order dx Step size Template Parameters : LAMBDA std::function D any floating point type (double, float ..) Return : D function diff template < typename D > std :: vector < D > diff ( std :: vector < D > & x , std :: vector < D > & y , int n = 1 ) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n Parameters : x Domain vector y Range vector n Derivative order Template Parameters : D any floating point type (double, float ..) Return : std::vector function diff template < typename D , typename LAMBDA > std :: vector < D > diff ( LAMBDA f , std :: vector < D > & x , int n = 1 ) Derivative of function with given vector. It returns a vector of size: x.size()-n Parameters : f Function x Domain vector n Derivative order Template Parameters : D LAMBDA Return : std::vector function taylor template < typename D , typename LAMBDA > std :: vector < D > taylor ( LAMBDA f , std :: vector < D > & x , D x0 = D ( 0 ) ) function eular_method template < typename D , typename LAMBDA > std :: vector < D > eular_method ( LAMBDA f , D x0 , unsigned int n ) Updated on 20 August 2022 at 21:24:15 EEST","title":"Calculus"},{"location":"doxygen/Namespaces/namespacecalc/#calc","text":"Contains differential and integral calculus functions. More...","title":"calc"},{"location":"doxygen/Namespaces/namespacecalc/#functions","text":"Name template <typename LAMBDA ,typename D > D diff (LAMBDA f, D x, unsigned int n =1, D dx =D(0.00001)) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. template <typename D > std::vector< D > diff (std::vector< D > & x, std::vector< D > & y, int n =1) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > diff (LAMBDA f, std::vector< D > & x, int n =1) Derivative of function with given vector. It returns a vector of size: x.size()-n template <typename D ,typename LAMBDA > std::vector< D > taylor (LAMBDA f, std::vector< D > & x, D x0 =D(0)) template <typename D ,typename LAMBDA > std::vector< D > eular_method (LAMBDA f, D x0, unsigned int n)","title":"Functions"},{"location":"doxygen/Namespaces/namespacecalc/#detailed-description","text":"Contains differential and integral calculus functions. Short for CALCulus","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacecalc/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Namespaces/namespacecalc/#function-diff","text":"template < typename LAMBDA , typename D > D diff ( LAMBDA f , D x , unsigned int n = 1 , D dx = D ( 0.00001 ) ) Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates dx at higher orders. Parameters : f Function x Point n Derivative order dx Step size Template Parameters : LAMBDA std::function D any floating point type (double, float ..) Return : D","title":"function diff"},{"location":"doxygen/Namespaces/namespacecalc/#function-diff_1","text":"template < typename D > std :: vector < D > diff ( std :: vector < D > & x , std :: vector < D > & y , int n = 1 ) Derivative of 2 std::vectors. It returns a vector of size: x.size()-n Parameters : x Domain vector y Range vector n Derivative order Template Parameters : D any floating point type (double, float ..) Return : std::vector","title":"function diff"},{"location":"doxygen/Namespaces/namespacecalc/#function-diff_2","text":"template < typename D , typename LAMBDA > std :: vector < D > diff ( LAMBDA f , std :: vector < D > & x , int n = 1 ) Derivative of function with given vector. It returns a vector of size: x.size()-n Parameters : f Function x Domain vector n Derivative order Template Parameters : D LAMBDA Return : std::vector","title":"function diff"},{"location":"doxygen/Namespaces/namespacecalc/#function-taylor","text":"template < typename D , typename LAMBDA > std :: vector < D > taylor ( LAMBDA f , std :: vector < D > & x , D x0 = D ( 0 ) )","title":"function taylor"},{"location":"doxygen/Namespaces/namespacecalc/#function-eular_method","text":"template < typename D , typename LAMBDA > std :: vector < D > eular_method ( LAMBDA f , D x0 , unsigned int n ) Updated on 20 August 2022 at 21:24:15 EEST","title":"function eular_method"},{"location":"doxygen/Namespaces/namespacelalg/","text":"lalg Contains functions related to matrices and linear algebra. More... Functions Name template <typename D > var::matrix < D > eye (int n) Produeces identity matrix of length n template <typename D > var::matrix < D > perms (D a, D b) Detailed Description Contains functions related to matrices and linear algebra. Short for Linear ALGebra Functions Documentation function eye template < typename D > var :: matrix < D > eye ( int n ) Produeces identity matrix of length n Parameters : n Template Parameters : D Return : var::matrix<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 function perms template < typename D > var :: matrix < D > perms ( D a , D b ) Updated on 20 August 2022 at 21:24:15 EEST","title":"lalg"},{"location":"doxygen/Namespaces/namespacelalg/#lalg","text":"Contains functions related to matrices and linear algebra. More...","title":"lalg"},{"location":"doxygen/Namespaces/namespacelalg/#functions","text":"Name template <typename D > var::matrix < D > eye (int n) Produeces identity matrix of length n template <typename D > var::matrix < D > perms (D a, D b)","title":"Functions"},{"location":"doxygen/Namespaces/namespacelalg/#detailed-description","text":"Contains functions related to matrices and linear algebra. Short for Linear ALGebra","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacelalg/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Namespaces/namespacelalg/#function-eye","text":"template < typename D > var :: matrix < D > eye ( int n ) Produeces identity matrix of length n Parameters : n Template Parameters : D Return : var::matrix<D>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","title":"function eye"},{"location":"doxygen/Namespaces/namespacelalg/#function-perms","text":"template < typename D > var :: matrix < D > perms ( D a , D b ) Updated on 20 August 2022 at 21:24:15 EEST","title":"function perms"},{"location":"doxygen/Namespaces/namespacemth/","text":"mth Generic mathematical functions. More... Functions Name int factorial (int n) Factorial. int combination (int n, int k) Combination (Cr) template <typename D > int decimals (D a) Gets number of decimal places. template <typename D > D round (D a, int dp =0) overriding default round Detailed Description Generic mathematical functions. Short for MaTHematics Functions Documentation function factorial int factorial ( int n ) Factorial. Parameters : n Return : int function combination int combination ( int n , int k ) Combination (Cr) Parameters : n k Return : int function decimals template < typename D > int decimals ( D a ) Gets number of decimal places. Parameters : a Template Parameters : D Return : int function round template < typename D > D round ( D a , int dp = 0 ) overriding default round Parameters : a dp Template Parameters : D Return : D Updated on 20 August 2022 at 21:24:15 EEST","title":"Math functions"},{"location":"doxygen/Namespaces/namespacemth/#mth","text":"Generic mathematical functions. More...","title":"mth"},{"location":"doxygen/Namespaces/namespacemth/#functions","text":"Name int factorial (int n) Factorial. int combination (int n, int k) Combination (Cr) template <typename D > int decimals (D a) Gets number of decimal places. template <typename D > D round (D a, int dp =0) overriding default round","title":"Functions"},{"location":"doxygen/Namespaces/namespacemth/#detailed-description","text":"Generic mathematical functions. Short for MaTHematics","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacemth/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Namespaces/namespacemth/#function-factorial","text":"int factorial ( int n ) Factorial. Parameters : n Return : int","title":"function factorial"},{"location":"doxygen/Namespaces/namespacemth/#function-combination","text":"int combination ( int n , int k ) Combination (Cr) Parameters : n k Return : int","title":"function combination"},{"location":"doxygen/Namespaces/namespacemth/#function-decimals","text":"template < typename D > int decimals ( D a ) Gets number of decimal places. Parameters : a Template Parameters : D Return : int","title":"function decimals"},{"location":"doxygen/Namespaces/namespacemth/#function-round","text":"template < typename D > D round ( D a , int dp = 0 ) overriding default round Parameters : a dp Template Parameters : D Return : D Updated on 20 August 2022 at 21:24:15 EEST","title":"function round"},{"location":"doxygen/Namespaces/namespacesig/","text":"sig All communication theory and signal processing functions. More... Detailed Description All communication theory and signal processing functions. Short for SIGnals Updated on 20 August 2022 at 21:24:15 EEST","title":"sig"},{"location":"doxygen/Namespaces/namespacesig/#sig","text":"All communication theory and signal processing functions. More...","title":"sig"},{"location":"doxygen/Namespaces/namespacesig/#detailed-description","text":"All communication theory and signal processing functions. Short for SIGnals Updated on 20 August 2022 at 21:24:15 EEST","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacestats/","text":"stats Statistical functions. More... Functions Name template <typename D > D get_avg (std::vector< D > a) Get the avgerage of vector. template <typename D > D get_var (std::vector< D > a) Get the variance object. template <typename D > D get_std (std::vector< D > a) Get the standard diviation of vector. template <typename D > var::QR < D > get_qr (std::vector< D > a) Get the quartile range of a vector. template <typename D > D get_r (std::vector< D > x, std::vector< D > y) Get the corelation coefficient of two vectors. Detailed Description Statistical functions. Short for STATiStics Functions Documentation function get_avg template < typename D > D get_avg ( std :: vector < D > a ) Get the avgerage of vector. Parameters : a input vector Template Parameters : D Type Return : D: output average function get_var template < typename D > D get_var ( std :: vector < D > a ) Get the variance object. Parameters : a input vector Template Parameters : D Type Return : D: output variance function get_std template < typename D > D get_std ( std :: vector < D > a ) Get the standard diviation of vector. Parameters : a input vector Template Parameters : D Type Return : D: output standard diviation function get_qr template < typename D > var :: QR < D > get_qr ( std :: vector < D > a ) Get the quartile range of a vector. Parameters : a input vector Return : QR : the quartile range function get_r template < typename D > D get_r ( std :: vector < D > x , std :: vector < D > y ) Get the corelation coefficient of two vectors. Parameters : x x vector y y vector Return : D: corelation coefficient Updated on 20 August 2022 at 21:24:15 EEST","title":"stats"},{"location":"doxygen/Namespaces/namespacestats/#stats","text":"Statistical functions. More...","title":"stats"},{"location":"doxygen/Namespaces/namespacestats/#functions","text":"Name template <typename D > D get_avg (std::vector< D > a) Get the avgerage of vector. template <typename D > D get_var (std::vector< D > a) Get the variance object. template <typename D > D get_std (std::vector< D > a) Get the standard diviation of vector. template <typename D > var::QR < D > get_qr (std::vector< D > a) Get the quartile range of a vector. template <typename D > D get_r (std::vector< D > x, std::vector< D > y) Get the corelation coefficient of two vectors.","title":"Functions"},{"location":"doxygen/Namespaces/namespacestats/#detailed-description","text":"Statistical functions. Short for STATiStics","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacestats/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Namespaces/namespacestats/#function-get_avg","text":"template < typename D > D get_avg ( std :: vector < D > a ) Get the avgerage of vector. Parameters : a input vector Template Parameters : D Type Return : D: output average","title":"function get_avg"},{"location":"doxygen/Namespaces/namespacestats/#function-get_var","text":"template < typename D > D get_var ( std :: vector < D > a ) Get the variance object. Parameters : a input vector Template Parameters : D Type Return : D: output variance","title":"function get_var"},{"location":"doxygen/Namespaces/namespacestats/#function-get_std","text":"template < typename D > D get_std ( std :: vector < D > a ) Get the standard diviation of vector. Parameters : a input vector Template Parameters : D Type Return : D: output standard diviation","title":"function get_std"},{"location":"doxygen/Namespaces/namespacestats/#function-get_qr","text":"template < typename D > var :: QR < D > get_qr ( std :: vector < D > a ) Get the quartile range of a vector. Parameters : a input vector Return : QR : the quartile range","title":"function get_qr"},{"location":"doxygen/Namespaces/namespacestats/#function-get_r","text":"template < typename D > D get_r ( std :: vector < D > x , std :: vector < D > y ) Get the corelation coefficient of two vectors. Parameters : x x vector y y vector Return : D: corelation coefficient Updated on 20 August 2022 at 21:24:15 EEST","title":"function get_r"},{"location":"doxygen/Namespaces/namespacevar/","text":"var Namespace that contains all variable data types. ## Classes Name class var::table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 class var::matrix Class for 2d matrix of objects. class var::point class var::tree struct var::QR Struct to contain the quartile range. Updated on 20 August 2022 at 21:24:15 EEST","title":"var"},{"location":"doxygen/Namespaces/namespacevar/#var","text":"Namespace that contains all variable data types. ## Classes Name class var::table 2D array class inheriting from std::vector<std::vector<D>>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 class var::matrix Class for 2d matrix of objects. class var::point class var::tree struct var::QR Struct to contain the quartile range. Updated on 20 August 2022 at 21:24:15 EEST","title":"var"},{"location":"doxygen/Namespaces/namespacevect/","text":"vect Contains functions regarding vector operations and 1D array mathematics. More... Functions Name template <typename D > std::vector< D > round (std::vector< D > & a, int dp =0) Rounding the vector by using mth::round . template <typename D > D min (std::vector< D > & a) template <typename D > D max (std::vector< D > & a) template <typename D > D sum (std::vector< D > & a) template <typename D > std::vector< D > sort_asc (std::vector< D > & a) template <typename D > std::vector< D > abs (std::vector< D > & a) template <typename D > std::vector< D > pow (std::vector< D > a, D b) vector^b template <typename D > std::vector< D > pow (std::vector< D > a, std::vector< D > b) vector^vector template <typename D > std::vector< D > sin (std::vector< D > a) template <typename D > std::vector< D > cos (std::vector< D > a) template <typename D > std::vector< D > tan (std::vector< D > a) template <typename D > std::vector< D > sec (std::vector< D > a) template <typename D > std::vector< D > csc (std::vector< D > a) template <typename D > std::vector< D > cot (std::vector< D > a) template <typename D > std::vector< D > asin (std::vector< D > a) template <typename D > std::vector< D > acos (std::vector< D > a) template <typename D > std::vector< D > atan (std::vector< D > a) template <typename D > std::vector< D > asec (std::vector< D > a) template <typename D > std::vector< D > acsc (std::vector< D > a) template <typename D > std::vector< D > acot (std::vector< D > a) template <typename D > std::vector< D > sinh (std::vector< D > a) template <typename D > std::vector< D > cosh (std::vector< D > a) template <typename D > std::vector< D > tanh (std::vector< D > a) template <typename D > std::vector< D > sech (std::vector< D > a) template <typename D > std::vector< D > csch (std::vector< D > a) template <typename D > std::vector< D > coth (std::vector< D > a) template <typename D > std::vector< D > asinh (std::vector< D > a) template <typename D > std::vector< D > acosh (std::vector< D > a) template <typename D > std::vector< D > atanh (std::vector< D > a) template <typename D > std::vector< D > asech (std::vector< D > a) template <typename D > std::vector< D > acsch (std::vector< D > a) template <typename D > std::vector< D > acoth (std::vector< D > a) template <typename D > std::vector< D > exp (std::vector< D > a) template <typename D ,typename LAMBDA > std::vector< D > vec_op (LAMBDA f, std::vector< D > & x) Runs lambda function on vector array. template <typename D > std::vector< D > difference (std::vector< D > & a) difference of elements in vector template <typename D > std::vector< D > averages (std::vector< D > & a) average of elements in vector template <typename D > std::vector< D > arange (D start, D end, D diff) template <typename D > std::vector< D > linspace (D start, D end, int count) template <typename D > std::vector< D > dot (std::vector< D > a, std::vector< D > b) template <typename D > std::vector< D > cross (std::vector< D > a, std::vector< D > b) Detailed Description Contains functions regarding vector operations and 1D array mathematics. Short for vector Functions Documentation function round template < typename D > std :: vector < D > round ( std :: vector < D > & a , int dp = 0 ) Rounding the vector by using mth::round . Parameters : a vector input dp number of decimal places Template Parameters : D Type Return : std::vector : vector output function min template < typename D > D min ( std :: vector < D > & a ) function max template < typename D > D max ( std :: vector < D > & a ) function sum template < typename D > D sum ( std :: vector < D > & a ) function sort_asc template < typename D > std :: vector < D > sort_asc ( std :: vector < D > & a ) function abs template < typename D > std :: vector < D > abs ( std :: vector < D > & a ) function pow template < typename D > std :: vector < D > pow ( std :: vector < D > a , D b ) vector^b Parameters : a b Template Parameters : D Return : std::vector function pow template < typename D > std :: vector < D > pow ( std :: vector < D > a , std :: vector < D > b ) vector^vector Parameters : a b Template Parameters : D Return : std::vector function sin template < typename D > std :: vector < D > sin ( std :: vector < D > a ) function cos template < typename D > std :: vector < D > cos ( std :: vector < D > a ) function tan template < typename D > std :: vector < D > tan ( std :: vector < D > a ) function sec template < typename D > std :: vector < D > sec ( std :: vector < D > a ) function csc template < typename D > std :: vector < D > csc ( std :: vector < D > a ) function cot template < typename D > std :: vector < D > cot ( std :: vector < D > a ) function asin template < typename D > std :: vector < D > asin ( std :: vector < D > a ) function acos template < typename D > std :: vector < D > acos ( std :: vector < D > a ) function atan template < typename D > std :: vector < D > atan ( std :: vector < D > a ) function asec template < typename D > std :: vector < D > asec ( std :: vector < D > a ) function acsc template < typename D > std :: vector < D > acsc ( std :: vector < D > a ) function acot template < typename D > std :: vector < D > acot ( std :: vector < D > a ) function sinh template < typename D > std :: vector < D > sinh ( std :: vector < D > a ) function cosh template < typename D > std :: vector < D > cosh ( std :: vector < D > a ) function tanh template < typename D > std :: vector < D > tanh ( std :: vector < D > a ) function sech template < typename D > std :: vector < D > sech ( std :: vector < D > a ) function csch template < typename D > std :: vector < D > csch ( std :: vector < D > a ) function coth template < typename D > std :: vector < D > coth ( std :: vector < D > a ) function asinh template < typename D > std :: vector < D > asinh ( std :: vector < D > a ) function acosh template < typename D > std :: vector < D > acosh ( std :: vector < D > a ) function atanh template < typename D > std :: vector < D > atanh ( std :: vector < D > a ) function asech template < typename D > std :: vector < D > asech ( std :: vector < D > a ) function acsch template < typename D > std :: vector < D > acsch ( std :: vector < D > a ) function acoth template < typename D > std :: vector < D > acoth ( std :: vector < D > a ) function exp template < typename D > std :: vector < D > exp ( std :: vector < D > a ) function vec_op template < typename D , typename LAMBDA > std :: vector < D > vec_op ( LAMBDA f , std :: vector < D > & x ) Runs lambda function on vector array. Parameters : f x Template Parameters : D LAMBDA Return : std::vector function difference template < typename D > std :: vector < D > difference ( std :: vector < D > & a ) difference of elements in vector Parameters : a Template Parameters : D Return : std::vector function averages template < typename D > std :: vector < D > averages ( std :: vector < D > & a ) average of elements in vector Parameters : a Template Parameters : D Return : std::vector function arange template < typename D > std :: vector < D > arange ( D start , D end , D diff ) function linspace template < typename D > std :: vector < D > linspace ( D start , D end , int count ) function dot template < typename D > std :: vector < D > dot ( std :: vector < D > a , std :: vector < D > b ) function cross template < typename D > std :: vector < D > cross ( std :: vector < D > a , std :: vector < D > b ) Updated on 20 August 2022 at 21:24:15 EEST","title":"vect"},{"location":"doxygen/Namespaces/namespacevect/#vect","text":"Contains functions regarding vector operations and 1D array mathematics. More...","title":"vect"},{"location":"doxygen/Namespaces/namespacevect/#functions","text":"Name template <typename D > std::vector< D > round (std::vector< D > & a, int dp =0) Rounding the vector by using mth::round . template <typename D > D min (std::vector< D > & a) template <typename D > D max (std::vector< D > & a) template <typename D > D sum (std::vector< D > & a) template <typename D > std::vector< D > sort_asc (std::vector< D > & a) template <typename D > std::vector< D > abs (std::vector< D > & a) template <typename D > std::vector< D > pow (std::vector< D > a, D b) vector^b template <typename D > std::vector< D > pow (std::vector< D > a, std::vector< D > b) vector^vector template <typename D > std::vector< D > sin (std::vector< D > a) template <typename D > std::vector< D > cos (std::vector< D > a) template <typename D > std::vector< D > tan (std::vector< D > a) template <typename D > std::vector< D > sec (std::vector< D > a) template <typename D > std::vector< D > csc (std::vector< D > a) template <typename D > std::vector< D > cot (std::vector< D > a) template <typename D > std::vector< D > asin (std::vector< D > a) template <typename D > std::vector< D > acos (std::vector< D > a) template <typename D > std::vector< D > atan (std::vector< D > a) template <typename D > std::vector< D > asec (std::vector< D > a) template <typename D > std::vector< D > acsc (std::vector< D > a) template <typename D > std::vector< D > acot (std::vector< D > a) template <typename D > std::vector< D > sinh (std::vector< D > a) template <typename D > std::vector< D > cosh (std::vector< D > a) template <typename D > std::vector< D > tanh (std::vector< D > a) template <typename D > std::vector< D > sech (std::vector< D > a) template <typename D > std::vector< D > csch (std::vector< D > a) template <typename D > std::vector< D > coth (std::vector< D > a) template <typename D > std::vector< D > asinh (std::vector< D > a) template <typename D > std::vector< D > acosh (std::vector< D > a) template <typename D > std::vector< D > atanh (std::vector< D > a) template <typename D > std::vector< D > asech (std::vector< D > a) template <typename D > std::vector< D > acsch (std::vector< D > a) template <typename D > std::vector< D > acoth (std::vector< D > a) template <typename D > std::vector< D > exp (std::vector< D > a) template <typename D ,typename LAMBDA > std::vector< D > vec_op (LAMBDA f, std::vector< D > & x) Runs lambda function on vector array. template <typename D > std::vector< D > difference (std::vector< D > & a) difference of elements in vector template <typename D > std::vector< D > averages (std::vector< D > & a) average of elements in vector template <typename D > std::vector< D > arange (D start, D end, D diff) template <typename D > std::vector< D > linspace (D start, D end, int count) template <typename D > std::vector< D > dot (std::vector< D > a, std::vector< D > b) template <typename D > std::vector< D > cross (std::vector< D > a, std::vector< D > b)","title":"Functions"},{"location":"doxygen/Namespaces/namespacevect/#detailed-description","text":"Contains functions regarding vector operations and 1D array mathematics. Short for vector","title":"Detailed Description"},{"location":"doxygen/Namespaces/namespacevect/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"doxygen/Namespaces/namespacevect/#function-round","text":"template < typename D > std :: vector < D > round ( std :: vector < D > & a , int dp = 0 ) Rounding the vector by using mth::round . Parameters : a vector input dp number of decimal places Template Parameters : D Type Return : std::vector : vector output","title":"function round"},{"location":"doxygen/Namespaces/namespacevect/#function-min","text":"template < typename D > D min ( std :: vector < D > & a )","title":"function min"},{"location":"doxygen/Namespaces/namespacevect/#function-max","text":"template < typename D > D max ( std :: vector < D > & a )","title":"function max"},{"location":"doxygen/Namespaces/namespacevect/#function-sum","text":"template < typename D > D sum ( std :: vector < D > & a )","title":"function sum"},{"location":"doxygen/Namespaces/namespacevect/#function-sort_asc","text":"template < typename D > std :: vector < D > sort_asc ( std :: vector < D > & a )","title":"function sort_asc"},{"location":"doxygen/Namespaces/namespacevect/#function-abs","text":"template < typename D > std :: vector < D > abs ( std :: vector < D > & a )","title":"function abs"},{"location":"doxygen/Namespaces/namespacevect/#function-pow","text":"template < typename D > std :: vector < D > pow ( std :: vector < D > a , D b ) vector^b Parameters : a b Template Parameters : D Return : std::vector","title":"function pow"},{"location":"doxygen/Namespaces/namespacevect/#function-pow_1","text":"template < typename D > std :: vector < D > pow ( std :: vector < D > a , std :: vector < D > b ) vector^vector Parameters : a b Template Parameters : D Return : std::vector","title":"function pow"},{"location":"doxygen/Namespaces/namespacevect/#function-sin","text":"template < typename D > std :: vector < D > sin ( std :: vector < D > a )","title":"function sin"},{"location":"doxygen/Namespaces/namespacevect/#function-cos","text":"template < typename D > std :: vector < D > cos ( std :: vector < D > a )","title":"function cos"},{"location":"doxygen/Namespaces/namespacevect/#function-tan","text":"template < typename D > std :: vector < D > tan ( std :: vector < D > a )","title":"function tan"},{"location":"doxygen/Namespaces/namespacevect/#function-sec","text":"template < typename D > std :: vector < D > sec ( std :: vector < D > a )","title":"function sec"},{"location":"doxygen/Namespaces/namespacevect/#function-csc","text":"template < typename D > std :: vector < D > csc ( std :: vector < D > a )","title":"function csc"},{"location":"doxygen/Namespaces/namespacevect/#function-cot","text":"template < typename D > std :: vector < D > cot ( std :: vector < D > a )","title":"function cot"},{"location":"doxygen/Namespaces/namespacevect/#function-asin","text":"template < typename D > std :: vector < D > asin ( std :: vector < D > a )","title":"function asin"},{"location":"doxygen/Namespaces/namespacevect/#function-acos","text":"template < typename D > std :: vector < D > acos ( std :: vector < D > a )","title":"function acos"},{"location":"doxygen/Namespaces/namespacevect/#function-atan","text":"template < typename D > std :: vector < D > atan ( std :: vector < D > a )","title":"function atan"},{"location":"doxygen/Namespaces/namespacevect/#function-asec","text":"template < typename D > std :: vector < D > asec ( std :: vector < D > a )","title":"function asec"},{"location":"doxygen/Namespaces/namespacevect/#function-acsc","text":"template < typename D > std :: vector < D > acsc ( std :: vector < D > a )","title":"function acsc"},{"location":"doxygen/Namespaces/namespacevect/#function-acot","text":"template < typename D > std :: vector < D > acot ( std :: vector < D > a )","title":"function acot"},{"location":"doxygen/Namespaces/namespacevect/#function-sinh","text":"template < typename D > std :: vector < D > sinh ( std :: vector < D > a )","title":"function sinh"},{"location":"doxygen/Namespaces/namespacevect/#function-cosh","text":"template < typename D > std :: vector < D > cosh ( std :: vector < D > a )","title":"function cosh"},{"location":"doxygen/Namespaces/namespacevect/#function-tanh","text":"template < typename D > std :: vector < D > tanh ( std :: vector < D > a )","title":"function tanh"},{"location":"doxygen/Namespaces/namespacevect/#function-sech","text":"template < typename D > std :: vector < D > sech ( std :: vector < D > a )","title":"function sech"},{"location":"doxygen/Namespaces/namespacevect/#function-csch","text":"template < typename D > std :: vector < D > csch ( std :: vector < D > a )","title":"function csch"},{"location":"doxygen/Namespaces/namespacevect/#function-coth","text":"template < typename D > std :: vector < D > coth ( std :: vector < D > a )","title":"function coth"},{"location":"doxygen/Namespaces/namespacevect/#function-asinh","text":"template < typename D > std :: vector < D > asinh ( std :: vector < D > a )","title":"function asinh"},{"location":"doxygen/Namespaces/namespacevect/#function-acosh","text":"template < typename D > std :: vector < D > acosh ( std :: vector < D > a )","title":"function acosh"},{"location":"doxygen/Namespaces/namespacevect/#function-atanh","text":"template < typename D > std :: vector < D > atanh ( std :: vector < D > a )","title":"function atanh"},{"location":"doxygen/Namespaces/namespacevect/#function-asech","text":"template < typename D > std :: vector < D > asech ( std :: vector < D > a )","title":"function asech"},{"location":"doxygen/Namespaces/namespacevect/#function-acsch","text":"template < typename D > std :: vector < D > acsch ( std :: vector < D > a )","title":"function acsch"},{"location":"doxygen/Namespaces/namespacevect/#function-acoth","text":"template < typename D > std :: vector < D > acoth ( std :: vector < D > a )","title":"function acoth"},{"location":"doxygen/Namespaces/namespacevect/#function-exp","text":"template < typename D > std :: vector < D > exp ( std :: vector < D > a )","title":"function exp"},{"location":"doxygen/Namespaces/namespacevect/#function-vec_op","text":"template < typename D , typename LAMBDA > std :: vector < D > vec_op ( LAMBDA f , std :: vector < D > & x ) Runs lambda function on vector array. Parameters : f x Template Parameters : D LAMBDA Return : std::vector","title":"function vec_op"},{"location":"doxygen/Namespaces/namespacevect/#function-difference","text":"template < typename D > std :: vector < D > difference ( std :: vector < D > & a ) difference of elements in vector Parameters : a Template Parameters : D Return : std::vector","title":"function difference"},{"location":"doxygen/Namespaces/namespacevect/#function-averages","text":"template < typename D > std :: vector < D > averages ( std :: vector < D > & a ) average of elements in vector Parameters : a Template Parameters : D Return : std::vector","title":"function averages"},{"location":"doxygen/Namespaces/namespacevect/#function-arange","text":"template < typename D > std :: vector < D > arange ( D start , D end , D diff )","title":"function arange"},{"location":"doxygen/Namespaces/namespacevect/#function-linspace","text":"template < typename D > std :: vector < D > linspace ( D start , D end , int count )","title":"function linspace"},{"location":"doxygen/Namespaces/namespacevect/#function-dot","text":"template < typename D > std :: vector < D > dot ( std :: vector < D > a , std :: vector < D > b )","title":"function dot"},{"location":"doxygen/Namespaces/namespacevect/#function-cross","text":"template < typename D > std :: vector < D > cross ( std :: vector < D > a , std :: vector < D > b ) Updated on 20 August 2022 at 21:24:15 EEST","title":"function cross"},{"location":"doxygen/Pages/","text":"Pages Updated on 20 August 2022 at 21:24:15 EEST","title":"Pages"},{"location":"doxygen/Pages/#pages","text":"Updated on 20 August 2022 at 21:24:15 EEST","title":"Pages"},{"location":"other/about/","text":"My Education Other hobbies Socials","title":"About the author"},{"location":"other/about/#my-education","text":"","title":"My Education"},{"location":"other/about/#other-hobbies","text":"","title":"Other hobbies"},{"location":"other/about/#socials","text":"","title":"Socials"},{"location":"other/liscense/","text":"GNU General Public License Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions \u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d. A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see < http://www.gnu.org/licenses/ >. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read < http://www.gnu.org/philosophy/why-not-lgpl.html >.","title":"Liscense"},{"location":"other/liscense/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU General Public License"},{"location":"other/liscense/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"other/liscense/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"other/liscense/#0-definitions","text":"\u201cThis License\u201d refers to version 3 of the GNU General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions"},{"location":"other/liscense/#1-source-code","text":"The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code"},{"location":"other/liscense/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions"},{"location":"other/liscense/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law"},{"location":"other/liscense/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies"},{"location":"other/liscense/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions"},{"location":"other/liscense/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms"},{"location":"other/liscense/#7-additional-terms","text":"\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms"},{"location":"other/liscense/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination"},{"location":"other/liscense/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies"},{"location":"other/liscense/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients"},{"location":"other/liscense/#11-patents","text":"A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d. A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents"},{"location":"other/liscense/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom"},{"location":"other/liscense/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License"},{"location":"other/liscense/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License"},{"location":"other/liscense/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty"},{"location":"other/liscense/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability"},{"location":"other/liscense/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16"},{"location":"other/liscense/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details. The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see < http://www.gnu.org/licenses/ >. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read < http://www.gnu.org/philosophy/why-not-lgpl.html >.","title":"How to Apply These Terms to Your New Programs"},{"location":"other/releases/","text":"","title":"Relases"},{"location":"usage/install/","text":"The compiling process is mainly for the plotting functionality if you don't want that then you can just include the header files and you are good to go If you want to install the header files into a standard directory then follow the compiling process below (without SFML) and add this cmake flag The scripts are also made to compile the library with the plot functionality Tested Platfroms Linux Ubuntu 18.04 macOS 10.13 with xcode 9.4.1 Windows 10 version 1809 Dependinceis cmake version 3.13 or higher SFML version 2.5 or higher (for plots) GNU c++ compiler version 6.1 ot higher (C++ 14 features) GNU make version 4.1 or higher Linux Compilation Run the following script or follow the steps below cd scripts chmod 755 linux.sh ./linux.sh 1) Install SFML dependencies (if needed) sudo apt-get -y install libpthread-stubs0-dev sudo apt-get -y install libgl1-mesa-dev sudo apt-get -y install libxrandr-dev sudo apt-get -y install libfreetype6-dev sudo apt-get -y install libglew1.5-dev sudo apt-get -y install libjpeg8-dev sudo apt-get -y install libsndfile1-dev sudo apt-get -y install libopenal-dev sudo apt-get -y install libx11-dev sudo apt-get -y install xorg-dev sudo apt-get -y install freeglut3-dev sudo apt-get -y install libudev-dev 2) Cmake new version (if needed) CMAKE_URL=\"https://cmake.org/files/v3.19/cmake-3.19.0-Linux-x86_64.tar.gz\" mkdir cmake && wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake 3) Build mkdir build cd build # or use ../cmake/bin/cmake .. -DNO-TEST=True cmake .. -DNO-TEST=True make sudo make install Macos Compilation Run the following script or follow the steps below cd scripts chmod 755 macos.sh ./macos.sh 1) Normal build mkdir build cd build cmake .. -DNO-TEST=True make sudo make install Windows Compilation Run the following script or follow the steps below .\\windows.ps1 1) Install chocolatey (if not installed) Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) 2) Install C++ compilers (if needed) choco install mingw choco install cmake choco install make choco install gsudo 3) Building mkdir build cd build cmake -G \"Unix Makefiles\" .. -DNO-TEST=True make sudo make install Compilation flags No plotting functionality cmake .. -DNO-TEST=True -DNO-PLOT=True Enable Unit tests cmake .. -DNO-TEST=False","title":"Installing"},{"location":"usage/install/#linux-compilation","text":"Run the following script or follow the steps below cd scripts chmod 755 linux.sh ./linux.sh 1) Install SFML dependencies (if needed) sudo apt-get -y install libpthread-stubs0-dev sudo apt-get -y install libgl1-mesa-dev sudo apt-get -y install libxrandr-dev sudo apt-get -y install libfreetype6-dev sudo apt-get -y install libglew1.5-dev sudo apt-get -y install libjpeg8-dev sudo apt-get -y install libsndfile1-dev sudo apt-get -y install libopenal-dev sudo apt-get -y install libx11-dev sudo apt-get -y install xorg-dev sudo apt-get -y install freeglut3-dev sudo apt-get -y install libudev-dev 2) Cmake new version (if needed) CMAKE_URL=\"https://cmake.org/files/v3.19/cmake-3.19.0-Linux-x86_64.tar.gz\" mkdir cmake && wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake 3) Build mkdir build cd build # or use ../cmake/bin/cmake .. -DNO-TEST=True cmake .. -DNO-TEST=True make sudo make install","title":"Linux Compilation"},{"location":"usage/install/#macos-compilation","text":"Run the following script or follow the steps below cd scripts chmod 755 macos.sh ./macos.sh 1) Normal build mkdir build cd build cmake .. -DNO-TEST=True make sudo make install","title":"Macos Compilation"},{"location":"usage/install/#windows-compilation","text":"Run the following script or follow the steps below .\\windows.ps1 1) Install chocolatey (if not installed) Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) 2) Install C++ compilers (if needed) choco install mingw choco install cmake choco install make choco install gsudo 3) Building mkdir build cd build cmake -G \"Unix Makefiles\" .. -DNO-TEST=True make sudo make install","title":"Windows Compilation"},{"location":"usage/install/#compilation-flags","text":"No plotting functionality cmake .. -DNO-TEST=True -DNO-PLOT=True Enable Unit tests cmake .. -DNO-TEST=False","title":"Compilation flags"},{"location":"usage/usage/","text":"Basic Usage No plot usage Non standard path install #include \"includes/mcpp.hpp\" standard install #include <mcpp/mcpp.hpp> No compilation flags needed Plot usage Non standard path install Header #include \"includes/plot.hpp\" Compilation g++ TEST.cpp -L\"build/libmcpp.so\" standard install Header #include <mcpp/plot.hpp> Compilation g++ main.cpp -lmcpp","title":"Getting started"},{"location":"usage/usage/#basic-usage","text":"No plot usage Non standard path install #include \"includes/mcpp.hpp\" standard install #include <mcpp/mcpp.hpp> No compilation flags needed Plot usage Non standard path install Header #include \"includes/plot.hpp\" Compilation g++ TEST.cpp -L\"build/libmcpp.so\" standard install Header #include <mcpp/plot.hpp> Compilation g++ main.cpp -lmcpp","title":"Basic Usage"}]}