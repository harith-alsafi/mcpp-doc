---
title: includes/vectors/vector.hpp

---

# includes/vectors/vector.hpp

## Functions

|                | Name           |
| -------------- | -------------- |
| template <typename D \> <br>std::vector< D > | **[operator*](../Files/vector_8hpp.md#function-operator*)**(std::vector< D > first, std::vector< D > second)<br>vector*vector  |
| template <typename D \> <br>std::vector< D > | **[operator*](../Files/vector_8hpp.md#function-operator*)**(D s, std::vector< D > v)<br>var*vector  |
| template <typename D \> <br>std::vector< D > | **[operator*](../Files/vector_8hpp.md#function-operator*)**(std::vector< D > v, D s)<br>vector*var  |
| template <typename D \> <br>std::vector< D > | **[operator+](../Files/vector_8hpp.md#function-operator+)**(std::vector< D > first, std::vector< D > second)<br>vector+vector  |
| template <typename D \> <br>std::vector< D > | **[operator+](../Files/vector_8hpp.md#function-operator+)**(D s, std::vector< D > v)<br>var+vector  |
| template <typename D \> <br>std::vector< D > | **[operator+](../Files/vector_8hpp.md#function-operator+)**(std::vector< D > v, D s)<br>vector+var  |
| template <typename D \> <br>std::vector< D > | **[operator-](../Files/vector_8hpp.md#function-operator-)**(std::vector< D > first, std::vector< D > second)<br>vector-vector  |
| template <typename D \> <br>std::vector< D > | **[operator-](../Files/vector_8hpp.md#function-operator-)**(D s, std::vector< D > v)<br>var-vector  |
| template <typename D \> <br>std::vector< D > | **[operator-](../Files/vector_8hpp.md#function-operator-)**(std::vector< D > v, D s)<br>vector-var  |
| template <typename D \> <br>std::vector< D > | **[operator/](../Files/vector_8hpp.md#function-operator/)**(std::vector< D > first, std::vector< D > second)<br>vector/vector  |
| template <typename D \> <br>std::vector< D > | **[operator/](../Files/vector_8hpp.md#function-operator/)**(D s, std::vector< D > v)<br>var/vector  |
| template <typename D \> <br>std::vector< D > | **[operator/](../Files/vector_8hpp.md#function-operator/)**(std::vector< D > v, D s)<br>vector/var  |
| template <typename D \> <br>std::ostream & | **[operator<<](../Files/vector_8hpp.md#function-operator<<)**(std::ostream & out, std::vector< D > & other)<br>cout << vector  |
| template <typename D \> <br>std::istream & | **[operator>>](../Files/vector_8hpp.md#function-operator>>)**(std::istream & input, std::vector< D > & other)<br>input operator  |
| template <typename D \> <br>std::vector< D > | **[operator%](../Files/vector_8hpp.md#function-operator%)**(std::vector< D > v, D s) |
| template <typename D \> <br>bool | **[operator==](../Files/vector_8hpp.md#function-operator==)**(std::vector< D > a, std::vector< D > b)<br>equal operator  |


## Functions Documentation

### function operator*

```cpp
template <typename D >
std::vector< D > operator*(
    std::vector< D > first,
    std::vector< D > second
)
```

vector*vector 

**Parameters**: 

  * **first** 
  * **second** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator*

```cpp
template <typename D >
std::vector< D > operator*(
    D s,
    std::vector< D > v
)
```

var*vector 

**Parameters**: 

  * **s** 
  * **v** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator*

```cpp
template <typename D >
std::vector< D > operator*(
    std::vector< D > v,
    D s
)
```

vector*var 

**Parameters**: 

  * **v** 
  * **s** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator+

```cpp
template <typename D >
std::vector< D > operator+(
    std::vector< D > first,
    std::vector< D > second
)
```

vector+vector 

**Parameters**: 

  * **first** 
  * **second** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator+

```cpp
template <typename D >
std::vector< D > operator+(
    D s,
    std::vector< D > v
)
```

var+vector 

**Parameters**: 

  * **s** 
  * **v** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator+

```cpp
template <typename D >
std::vector< D > operator+(
    std::vector< D > v,
    D s
)
```

vector+var 

**Parameters**: 

  * **v** 
  * **s** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator-

```cpp
template <typename D >
std::vector< D > operator-(
    std::vector< D > first,
    std::vector< D > second
)
```

vector-vector 

**Parameters**: 

  * **first** 
  * **second** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator-

```cpp
template <typename D >
std::vector< D > operator-(
    D s,
    std::vector< D > v
)
```

var-vector 

**Parameters**: 

  * **s** 
  * **v** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator-

```cpp
template <typename D >
std::vector< D > operator-(
    std::vector< D > v,
    D s
)
```

vector-var 

**Parameters**: 

  * **v** 
  * **s** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator/

```cpp
template <typename D >
std::vector< D > operator/(
    std::vector< D > first,
    std::vector< D > second
)
```

vector/vector 

**Parameters**: 

  * **first** 
  * **second** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator/

```cpp
template <typename D >
std::vector< D > operator/(
    D s,
    std::vector< D > v
)
```

var/vector 

**Parameters**: 

  * **s** 
  * **v** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator/

```cpp
template <typename D >
std::vector< D > operator/(
    std::vector< D > v,
    D s
)
```

vector/var 

**Parameters**: 

  * **v** 
  * **s** 


**Template Parameters**: 

  * **D** 


**Return**: std::vector<D> 

### function operator<<

```cpp
template <typename D >
std::ostream & operator<<(
    std::ostream & out,
    std::vector< D > & other
)
```

cout << vector 

**Parameters**: 

  * **out** 
  * **other** 


**Template Parameters**: 

  * **D** 


**Return**: std::ostream& 

### function operator>>

```cpp
template <typename D >
std::istream & operator>>(
    std::istream & input,
    std::vector< D > & other
)
```

input operator 

**Parameters**: 

  * **input** 
  * **other** 


**Template Parameters**: 

  * **D** 


**Return**: std::istream& 

### function operator%

```cpp
template <typename D >
std::vector< D > operator%(
    std::vector< D > v,
    D s
)
```


### function operator==

```cpp
template <typename D >
bool operator==(
    std::vector< D > a,
    std::vector< D > b
)
```

equal operator 

**Parameters**: 

  * **a** 
  * **b** 


**Template Parameters**: 

  * **D** 


**Return**: 

  * true 
  * false 




## Source code

```cpp
#pragma once
#include <vector>
#include <iostream>
#include <sstream>
// ********************** multiply ****************************
template<typename D>
std::vector<D> operator *(std::vector<D> first, std::vector<D> second){
    if(first.size() != second.size()){
        throw std::invalid_argument("Invalid size");
    }
    std::vector<D> temp;
    for(int i = 0; i < first.size(); i++){
        temp.push_back(first[i]*second[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator *(D s, std::vector<D> v){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(s*v[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator *(std::vector<D> v, D s){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(v[i]*s);
    }
    return temp;
}

// ********************** add ****************************

template<typename D>
std::vector<D> operator +(std::vector<D> first, std::vector<D> second){
    if(first.size() != second.size()){
        throw std::invalid_argument("Invalid size");
    }
    std::vector<D> temp;
    for(int i = 0; i < first.size(); i++){
        temp.push_back(first[i]+second[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator +(D s, std::vector<D> v){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(s+v[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator +(std::vector<D> v, D s){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(v[i]+s);
    }
    return temp;
}

// ********************** subtract ****************************

template<typename D>
std::vector<D> operator -(std::vector<D> first, std::vector<D> second){
    if(first.size() != second.size()){
        throw std::invalid_argument("Invalid size");
    }
    std::vector<D> temp;
    for(int i = 0; i < first.size(); i++){
        temp.push_back(first[i]-second[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator -(D s, std::vector<D> v){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(s-v[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator -(std::vector<D> v, D s){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(v[i]-s);
    }
    return temp;
}

// ********************** divide ****************************

template<typename D>
std::vector<D> operator /(std::vector<D> first, std::vector<D> second){
    if(first.size() != second.size()){
        throw std::invalid_argument("Invalid size");
    }
    std::vector<D> temp;
    for(int i = 0; i < first.size(); i++){
        temp.push_back(first[i]/second[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator /(D s, std::vector<D> v){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(s/v[i]);
    }
    return temp;
}

template<typename D>
std::vector<D> operator /(std::vector<D> v, D s){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(v[i]/s);
    }
    return temp;
}

// ********************** streams ****************************

template<typename D>
std::ostream& operator << (std::ostream& out, std::vector<D> &other){
    for(int i =0; i < other.size(); i++){
        out << other[i];
        if(other[i] != other[other.size()-1]){
            out << ",";
        }
    }
    return out;
}

template<typename D>
std::istream &operator >> (std::istream  &input, std::vector<D> &other){
    std::string line;
    getline(input, line);
    
    std::stringstream LINE;
    LINE << line;

    std::string temp;
    D var;
    while(LINE.good())
    {
        getline(LINE, temp, ',');
        if(std::stringstream(temp) >> var){
            other.push_back(var);
        }
    }
    return input;
}

// ********************** others operators ****************************


template<typename D>
std::vector<D> operator %(std::vector<D> v, D s){
    std::vector<D> temp;
    for(int i = 0; i < v.size(); i++){
        temp.push_back(v[i]%s);
    }
    return temp;
}



// *********************** comparison ********************************
//TODOconditional operators

template<typename D>
bool operator ==(std::vector<D> a, std::vector<D> b){
    if(a.size() != b.size()){
        throw std::invalid_argument("Invalid size");
    }
    for(int i = 0; i < a.size(); i++){
        if(a[i] != b[i]){
            return false;
        }
    }
    return true;
}
```


-------------------------------

Updated on  9 May 2021 at 21:00:44 EEST
